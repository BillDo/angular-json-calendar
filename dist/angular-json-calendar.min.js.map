{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-json-calendar.min.js","webpack:///webpack/bootstrap 2fa5552fda0febcdbf5c?95e8","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/calendar.provider.js?46b0","webpack:///./src/calendar.provider.js?b2f7*","webpack:///./src/calendar.service.js?2639","webpack:///./src/calendar.service.js?8728*","webpack:///./src/calendar.directive.js?14e7","webpack:///./src/calendar.directive.js?d4aa*","webpack:///./src/calendar.controller.js?3eb8","webpack:///./src/calendar.controller.js?6b53*","webpack:///./src/templates/calendar.html?2144","webpack:///./src/templates/year.html?5759","webpack:///./src/templates/month.html?ef61","webpack:///./src/templates/week.html?4807","webpack:///./src/templates/day.html?9306","webpack:///./src/month.directive.js?4d7d","webpack:///./src/month.directive.js?369b*","webpack:///./src/week.directive.js?eb5f","webpack:///./src/week.directive.js?2d44*","webpack:///./src/day.directive.js?a3c1","webpack:///./src/day.directive.js?de60*"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_calendar","_calendar2","_calendar3","_month","_week","_day","angular","provider","bcCalendarConfig","service","bcCalendarService","directive","bcCalendarDirective","bcMonthDirective","bcWeekDirective","bcDayDirective","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","startDate","moment","Date","toISOString","startOf","nestingDepth","days","weekdayStyle","letter","abbreviation","word","weekTitleFormat","organizeWeeks","date","isBefore","count","push","pad","missingDays","integerToArray","day","subtraction","parseInt","previous","subtract","unshift","collection","direction","arguments","undefined","concat","_interopRequireDefault","obj","__esModule","default","$compile","linkFunction","$scope","$element","$attrs","vm","getTemplateUrl","templates","year","_year2","month","_month2","week","_week2","_day2","restrict","replace","scope","bindToController","bcStartDate","bcNestingDepth","bcDays","bcWeekTitleFormat","bcDateSelected","link","templateUrl","controller","CalendarController","controllerAs","$inject","_year","_activate","today","bcCount","weekdays","WEEK_LENGTH","calendarDuration","duration","interval","calendarDays","asDays","todayDayOfMonth","todayDayOfWeek","selectedDate","JS_DATE","needed","tempDays","_buildDays","bcCollection","_organizeMonths","console","log","_organizeWeeks","dateIsBeforeToday","isSame","limit","start","counter","add","allDays","calendar","SATURDAY","SUNDAY","dayOfMonth","daysInMonth","slice","padDaysLeft","splice","firstDay","padBlankTiles","lastDay","_chunk","group","groupsize","sets","chunks","path","html","window","run","put"],"mappings":"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","file":"angular-json-calendar.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _calendar = __webpack_require__(1);\n\t\n\tvar _calendar2 = __webpack_require__(2);\n\t\n\tvar _calendar3 = __webpack_require__(3);\n\t\n\tvar _month = __webpack_require__(10);\n\t\n\tvar _week = __webpack_require__(11);\n\t\n\tvar _day = __webpack_require__(12);\n\t\n\texports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective).directive('bcMonth', _month.bcMonthDirective).directive('bcWeek', _week.bcWeekDirective).directive('bcDay', _day.bcDayDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\t\n\t    // Define defaults\n\t\n\t    function bcCalendarConfig() {\n\t        _classCallCheck(this, bcCalendarConfig);\n\t\n\t        // The calendar will begin with today\n\t        this.startDate = moment(new Date().toISOString()).startOf('day');\n\t\n\t        // The default interval type [day|week|month]\n\t        this.nestingDepth = 'month';\n\t\n\t        // How many days should be generated\n\t        this.days = 30;\n\t\n\t        // Define the different possible representations of the weekday\n\t        this.weekdayStyle = {\n\t            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n\t            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n\t            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n\t        };\n\t\n\t        // Set the default word type (M vs Mon vs Monday)\n\t        this.weekTitleFormat = 'abbreviation';\n\t\n\t        // Should days be organized by week?\n\t        this.organizeWeeks = true;\n\t    }\n\t\n\t    _createClass(bcCalendarConfig, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return bcCalendarConfig;\n\t}();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarService = exports.bcCalendarService = function () {\n\t    function bcCalendarService() {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, bcCalendarService);\n\t    }\n\t\n\t    /**\n\t     * Check to see if the day is prior to the current date\n\t     * This is used to disable the unselectable days\n\t     *\n\t     * @param {Date} day\n\t     * @return {Bool}\n\t     */\n\t\n\t\n\t    _createClass(bcCalendarService, [{\n\t        key: 'dateIsBeforeToday',\n\t        value: function dateIsBeforeToday(date) {\n\t            return moment(date).isBefore(this.startDate);\n\t        }\n\t\n\t        /**\n\t         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n\t         *\n\t         * @param {Integer} count\n\t         * @return {Array} days\n\t         */\n\t\n\t    }, {\n\t        key: 'integerToArray',\n\t        value: function integerToArray(count) {\n\t            var i = void 0;\n\t            var days = [];\n\t\n\t            for (i = 0; i < count; i += 1) {\n\t                days.push(i);\n\t            }\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Pad the beginning of a week\n\t         *\n\t         * @param {String} startDate - date to to work back from\n\t         * @param {Array} count - how many days to pad\n\t         * @return {Array} pad\n\t         */\n\t\n\t    }, {\n\t        key: 'padDaysLeft',\n\t        value: function padDaysLeft(startDate, count) {\n\t            var pad = [];\n\t            var missingDays = this.integerToArray(count);\n\t\n\t            // Loop through missing days\n\t            for (var day in missingDays) {\n\t                // How many days to go back\n\t                var subtraction = parseInt(day, 10) + 1;\n\t\n\t                // Find that day\n\t                var previous = moment(startDate).subtract(subtraction, 'days').toISOString();\n\t\n\t                // Add to the beginning of the array\n\t                pad.unshift({\n\t                    date: previous\n\t                });\n\t            }\n\t\n\t            return pad;\n\t        }\n\t\n\t        /**\n\t         * Pad a collection with blank tiles at the beginning\n\t         *\n\t         * @param {Array} collection\n\t         * @param {Integer} count\n\t         * @return {Array} paddedCollection\n\t         */\n\t\n\t    }, {\n\t        key: 'padBlankTiles',\n\t        value: function padBlankTiles(collection, count) {\n\t            var direction = arguments.length <= 2 || arguments[2] === undefined ? 'left' : arguments[2];\n\t\n\t            var i = void 0;\n\t            var days = [];\n\t\n\t            // Create array\n\t            for (i = 0; i < count; i += 1) {\n\t                days.push({\n\t                    date: null\n\t                });\n\t            }\n\t\n\t            // If direction is 'right'\n\t            if (direction === 'right') {\n\t                // pad the end\n\t                return collection.concat(days);\n\t            } else if (direction === 'left') {\n\t                // otherwise pad the beginning\n\t                return days.concat(collection);\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return bcCalendarService;\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tbcCalendarDirective.$inject = [\"$compile\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcCalendarDirective = bcCalendarDirective;\n\t\n\tvar _calendar = __webpack_require__(4);\n\t\n\tvar _calendar2 = __webpack_require__(5);\n\t\n\tvar _calendar3 = _interopRequireDefault(_calendar2);\n\t\n\tvar _year = __webpack_require__(6);\n\t\n\tvar _year2 = _interopRequireDefault(_year);\n\t\n\tvar _month = __webpack_require__(7);\n\t\n\tvar _month2 = _interopRequireDefault(_month);\n\t\n\tvar _week = __webpack_require__(8);\n\t\n\tvar _week2 = _interopRequireDefault(_week);\n\t\n\tvar _day = __webpack_require__(9);\n\t\n\tvar _day2 = _interopRequireDefault(_day);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcCalendarDirective($compile) {\n\t    'ngInject';\n\t\n\t    // Define possible templates\n\t\n\t    var templates = {\n\t        year: _year2.default,\n\t        month: _month2.default,\n\t        week: _week2.default,\n\t        day: _day2.default\n\t    };\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcStartDate: '@?', // date - default to today\n\t            bcNestingDepth: '@?', // string [month|week|day] - defaults: month\n\t            bcDays: '@?', // integer - default to 1\n\t            bcWeekTitleFormat: '@?', // string [word|abbreviation|letter] - default: abbreviation\n\t            bcDateSelected: '&' },\n\t        // function will be called when a date is selected (tap/click)\n\t        link: linkFunction,\n\t        templateUrl: _calendar3.default,\n\t        controller: _calendar.CalendarController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, vm) {\n\t\n\t        // Set the correct template based on the desired nesting depth\n\t        vm.getTemplateUrl = function () {\n\t            return templates[vm.nestingDepth];\n\t        };\n\t    }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CalendarController = exports.CalendarController = function () {\n\t    CalendarController.$inject = [\"bcCalendarConfig\", \"bcCalendarService\"];\n\t    function CalendarController(bcCalendarConfig, bcCalendarService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, CalendarController);\n\t\n\t        this.bcCalendarConfig = bcCalendarConfig;\n\t        this.bcCalendarService = bcCalendarService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(CalendarController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            // Define today's date\n\t            this.today = this.bcCalendarConfig.startDate;\n\t\n\t            // DEFAULTS\n\t            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n\t            this.days = parseInt(this.bcCount || this.bcCalendarConfig.days, 10);\n\t            this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n\t            this.weekdays = this.bcWeekTitleFormat ? this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n\t            this.WEEK_LENGTH = 7;\n\t\n\t            // Define the calendar duration (or length)\n\t            this.calendarDuration = moment.duration(this.days, this.bcCalendarConfig.interval);\n\t\n\t            // Get the full count of days\n\t            this.calendarDays = this.calendarDuration.asDays();\n\t\n\t            // Get the current day of the month\n\t            this.todayDayOfMonth = moment(this.startDate).date();\n\t\n\t            // Get the current weekday\n\t            this.todayDayOfWeek = moment(this.startDate).day();\n\t\n\t            // Initially nothing is selected\n\t            this.selectedDate = null;\n\t\n\t            var JS_DATE = {\n\t                year: 2016,\n\t                month: 3,\n\t                day: 11\n\t            };\n\t\n\t            var needed = 100;\n\t            var tempDays = this._buildDays(needed, new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\t\n\t            /*\n\t             *console.log('tempDays: ', tempDays);\n\t             */\n\t\n\t            this.bcCollection = this._organizeMonths(tempDays);\n\t\n\t            console.log('this.bcCollection: ', this.bcCollection);\n\t\n\t            /*\n\t             *console.log('tempMonths: ', tempMonths);\n\t             */\n\t\n\t            // Build the calendar JSON\n\t            /*\n\t             *this.calendar = this.build(this.startDate, 2);\n\t             */\n\t\n\t            //\n\t            // Call the correct organization method based on the nesting depth\n\t            //\n\t            if (this.nestingDepth === 'month') {\n\t                this.bcCollection = this._organizeMonths(tempDays);\n\t            } else if (this.nestingDepth === 'week') {\n\t                this.bcCollection = this._organizeWeeks(tempDays);\n\t            } else if (this.nestingDepth === 'day') {\n\t                this.bcCollection = tempDays;\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day is prior to the current date\n\t         * This is used to disable the unselectable days\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isBeforeToday',\n\t        value: function isBeforeToday(date) {\n\t            return this.bcCalendarService.dateIsBeforeToday(date);\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day matches the current date\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isDayToday',\n\t        value: function isDayToday(date) {\n\t            return moment(date).isSame(this.startDate);\n\t        }\n\t\n\t        /**\n\t         * Select a date\n\t         *\n\t         * @param {Object} day\n\t         */\n\t\n\t    }, {\n\t        key: 'selectDate',\n\t        value: function selectDate(day) {\n\t\n\t            // Set the selected day\n\t            this.selectedDate = day;\n\t\n\t            // Only call the passed method if it exists and a valid date was chosen\n\t            if (day.date && this.bcDateSelected) {\n\t                this.bcDateSelected({\n\t                    date: day.date\n\t                });\n\t            }\n\t        }\n\t    }, {\n\t        key: '_buildDays',\n\t        value: function _buildDays(limit, start) {\n\t            var counter = 0;\n\t            var days = [];\n\t            var day = void 0;\n\t\n\t            while (counter < limit) {\n\t                // Create the day\n\t                day = moment(start).add(counter, 'days').toISOString();\n\t\n\t                // Add to the array\n\t                days.push({\n\t                    date: day\n\t                });\n\t\n\t                // Increment our counter\n\t                counter = counter + 1;\n\t            }\n\t\n\t            /*\n\t             *console.warn('build days: ', limit, start, days);\n\t             */\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Organize by month\n\t         *\n\t         * @param {Array} allDays - An array of all days\n\t         * @return {Array} collection - days organized into weeks and months\n\t         */\n\t\n\t    }, {\n\t        key: '_organizeMonths',\n\t        value: function _organizeMonths(allDays) {\n\t            var calendar = [];\n\t            var SATURDAY = 6;\n\t            var SUNDAY = 0;\n\t            var collection = allDays;\n\t            var month = void 0;\n\t            var dayOfMonth = moment(collection[0].date).date();\n\t            var daysInMonth = moment(collection[0].date).daysInMonth();\n\t\n\t            // Pad the beginning of the month with any missing days\n\t            // If the first day is not the first day of the month\n\t            if (moment(collection[0].date).date() > 0) {\n\t                // Pull this month's days from the collection\n\t                month = collection.slice(0, daysInMonth - (dayOfMonth - 1));\n\t\n\t                // Fill the missing days from the month\n\t                var pad = this.bcCalendarService.padDaysLeft(month[0].date, dayOfMonth - 1);\n\t\n\t                // Combine with the existing array\n\t                collection = pad.concat(collection);\n\t            }\n\t\n\t            // Split into months\n\t            // As long as there are days left in the collection\n\t            while (collection.length > 0) {\n\t\n\t                // Get the day of the month for the first date of the collection eg. '24'\n\t                dayOfMonth = moment(collection[0].date).date();\n\t\n\t                // Determine how many days there are this month (total)\n\t                daysInMonth = moment(collection[0].date).daysInMonth();\n\t\n\t                // Pull this month's days from the collection\n\t                month = collection.splice(0, daysInMonth - (dayOfMonth - 1));\n\t\n\t                // How many weekdays are prior to the first day of this month?\n\t                var firstDay = moment(month[0].date).day();\n\t\n\t                // If the first day is after Sunday\n\t                if (firstDay > SUNDAY) {\n\t                    // Pad with blank tiles so that the first day is lined up in the correct column\n\t                    month = this.bcCalendarService.padBlankTiles(month, firstDay, 'left');\n\t                }\n\t\n\t                // How many weekdays are after the last day of the month?\n\t                // (remember: weeks are zero-based)\n\t                var lastDay = moment(month[month.length - 1].date).day();\n\t\n\t                // If blank tiles are needed for the last week\n\t                if (lastDay < SATURDAY) {\n\t                    // Pad with blank tiles so that the first day is lined up in the correct column\n\t                    month = this.bcCalendarService.padBlankTiles(month, this.WEEK_LENGTH - (lastDay + 1), 'right');\n\t                }\n\t\n\t                // Organize into weeks and add to the calendar array\n\t                calendar.push(this._chunk(month));\n\t            }\n\t\n\t            return calendar;\n\t        }\n\t\n\t        /**\n\t         * Organize a collection of days into sub collections of weeks\n\t         *\n\t         * @param {Array} days - array of days\n\t         * @return {Array} collection\n\t         */\n\t\n\t    }, {\n\t        key: '_organizeWeeks',\n\t        value: function _organizeWeeks(days) {\n\t            // Determine the day of the week that the calendar starts and ends on\n\t            var firstDay = moment(days[0].date).day();\n\t            var lastDay = moment(days[days.length - 1].date).day();\n\t            var SATURDAY = 6;\n\t            var SUNDAY = 0;\n\t\n\t            // If the first day is after Sunday\n\t            if (firstDay > SUNDAY) {\n\t                // Pad with blank tiles so the first day is lined up in the correct weekday column\n\t                days = this.bcCalendarService.padBlankTiles(days, firstDay, 'left');\n\t            }\n\t\n\t            // If the last day is before Saturday\n\t            if (lastDay < SATURDAY) {\n\t                // Pad with blank tiles so that the last week's days are in the correct weekday column\n\t                days = this.bcCalendarService.padBlankTiles(days, this.WEEK_LENGTH - (lastDay + 1), 'right');\n\t            }\n\t\n\t            return this._chunk(days);\n\t        }\n\t\n\t        /**\n\t         * Split an array into chunks and return an array of these chunks\n\t         *\n\t         * @param {Array} group\n\t         * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n\t         * @return {Array} chunks\n\t         */\n\t\n\t    }, {\n\t        key: '_chunk',\n\t        value: function _chunk(group) {\n\t            var groupsize = arguments.length <= 1 || arguments[1] === undefined ? this.WEEK_LENGTH : arguments[1];\n\t\n\t            var sets = [];\n\t            var i = 0;\n\t            var chunks = group.length / parseInt(groupsize, 10);\n\t\n\t            while (i < chunks) {\n\t                sets[i] = group.splice(0, groupsize);\n\t                i = i + 1;\n\t            }\n\t\n\t            return sets;\n\t        }\n\t    }]);\n\t\n\t    return CalendarController;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html';\n\tvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=\\\"bc-calendar__day bc-calendar__day--header\\\" data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div data-ng-include=vm.getTemplateUrl()></div> </section>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html';\n\tvar html = \"<div class=bc-calendar__year data-ng-repeat=\\\"year in vm.bcCollection track by $index\\\"> <bc-month bc-collection=year></bc-month> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html';\n\tvar html = \"<div class=bc-calendar__month data-ng-repeat=\\\"month in vm.bcCollection track by $index\\\"> <bc-week bc-collection=month></bc-week> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html';\n\tvar html = \"<div class=bc-calendar__week data-ng-repeat=\\\"week in vm.bcCollection track by $index\\\"> <bc-day bc-collection=week></bc-day> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html';\n\tvar html = \"<span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\\n                   'bc-calendar__day--even': $even,\\n                   'bc-calendar__day--pad': !day.date,\\n                   'bc-calendar__day--selected': day.date === vm.selectedDate.date }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in vm.bcCollection track by $index\\\"> <time class=bc-calendar__day-time datetime=\\\"{{ day.date | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day.date }}\\\" data-ng-if=\\\"day.date && day.date.length > 3\\\"> {{ day.date | date:'MM/dd/yy' }} <small> {{ day.date | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=!day.date></span> </span>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcMonthDirective = bcMonthDirective;\n\t\n\tvar _month = __webpack_require__(7);\n\t\n\tvar _month2 = _interopRequireDefault(_month);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcMonthDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _month2.default,\n\t        controller: function controller() {},\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcWeekDirective = bcWeekDirective;\n\t\n\tvar _week = __webpack_require__(8);\n\t\n\tvar _week2 = _interopRequireDefault(_week);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcWeekDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _week2.default,\n\t        controller: function controller() {},\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcDayDirective = bcDayDirective;\n\t\n\tvar _day = __webpack_require__(9);\n\t\n\tvar _day2 = _interopRequireDefault(_day);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcDayDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _day2.default,\n\t        controller: function controller() {},\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-json-calendar.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2fa5552fda0febcdbf5c\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _calendar = require('./calendar.provider');\n\nvar _calendar2 = require('./calendar.service');\n\nvar _calendar3 = require('./calendar.directive');\n\nvar _month = require('./month.directive');\n\nvar _week = require('./week.directive');\n\nvar _day = require('./day.directive');\n\nexports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective).directive('bcMonth', _month.bcMonthDirective).directive('bcWeek', _week.bcWeekDirective).directive('bcDay', _day.bcDayDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { bcCalendarConfig } from './calendar.provider';\nimport { bcCalendarService } from './calendar.service';\nimport { bcCalendarDirective } from './calendar.directive';\nimport { bcMonthDirective } from './month.directive';\nimport { bcWeekDirective } from './week.directive';\nimport { bcDayDirective } from './day.directive';\n\nexport default angular.module('bc.JsonCalendar', [])\n    .provider('bcCalendarConfig', bcCalendarConfig)\n    .service('bcCalendarService', bcCalendarService)\n    .directive('bcCalendar', bcCalendarDirective)\n    .directive('bcMonth', bcMonthDirective)\n    .directive('bcWeek', bcWeekDirective)\n    .directive('bcDay', bcDayDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\n    // Define defaults\n\n    function bcCalendarConfig() {\n        _classCallCheck(this, bcCalendarConfig);\n\n        // The calendar will begin with today\n        this.startDate = moment(new Date().toISOString()).startOf('day');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many days should be generated\n        this.days = 30;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n    }\n\n    _createClass(bcCalendarConfig, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return bcCalendarConfig;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.provider.js\n **/","export class bcCalendarConfig {\n\n    // Define defaults\n    constructor() {\n\n        // The calendar will begin with today\n        this.startDate = moment(new Date().toISOString()).startOf('day');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many days should be generated\n        this.days = 30;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: [\n                'S',\n                'M',\n                'T',\n                'W',\n                'T',\n                'F',\n                'S',\n            ],\n            abbreviation: [\n                'Sun',\n                'Mon',\n                'Tue',\n                'Wed',\n                'Thur',\n                'Fri',\n                'Sat',\n            ],\n            word: [\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Satday',\n            ],\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarService = exports.bcCalendarService = function () {\n    function bcCalendarService() {\n        'ngInject';\n\n        _classCallCheck(this, bcCalendarService);\n    }\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n\n\n    _createClass(bcCalendarService, [{\n        key: 'dateIsBeforeToday',\n        value: function dateIsBeforeToday(date) {\n            return moment(date).isBefore(this.startDate);\n        }\n\n        /**\n         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n         *\n         * @param {Integer} count\n         * @return {Array} days\n         */\n\n    }, {\n        key: 'integerToArray',\n        value: function integerToArray(count) {\n            var i = void 0;\n            var days = [];\n\n            for (i = 0; i < count; i += 1) {\n                days.push(i);\n            }\n\n            return days;\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {String} startDate - date to to work back from\n         * @param {Array} count - how many days to pad\n         * @return {Array} pad\n         */\n\n    }, {\n        key: 'padDaysLeft',\n        value: function padDaysLeft(startDate, count) {\n            var pad = [];\n            var missingDays = this.integerToArray(count);\n\n            // Loop through missing days\n            for (var day in missingDays) {\n                // How many days to go back\n                var subtraction = parseInt(day, 10) + 1;\n\n                // Find that day\n                var previous = moment(startDate).subtract(subtraction, 'days').toISOString();\n\n                // Add to the beginning of the array\n                pad.unshift({\n                    date: previous\n                });\n            }\n\n            return pad;\n        }\n\n        /**\n         * Pad a collection with blank tiles at the beginning\n         *\n         * @param {Array} collection\n         * @param {Integer} count\n         * @return {Array} paddedCollection\n         */\n\n    }, {\n        key: 'padBlankTiles',\n        value: function padBlankTiles(collection, count) {\n            var direction = arguments.length <= 2 || arguments[2] === undefined ? 'left' : arguments[2];\n\n            var i = void 0;\n            var days = [];\n\n            // Create array\n            for (i = 0; i < count; i += 1) {\n                days.push({\n                    date: null\n                });\n            }\n\n            // If direction is 'right'\n            if (direction === 'right') {\n                // pad the end\n                return collection.concat(days);\n            } else if (direction === 'left') {\n                // otherwise pad the beginning\n                return days.concat(collection);\n            }\n        }\n    }]);\n\n    return bcCalendarService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.service.js\n **/","export class bcCalendarService {\n\n    constructor(\n    ) {\n        'ngInject';\n\n    }\n\n\n\n\n\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    dateIsBeforeToday(date) {\n        return moment(date).isBefore(this.startDate);\n    }\n\n\n\n\n\n    /**\n     * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    integerToArray(count) {\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {String} startDate - date to to work back from\n     * @param {Array} count - how many days to pad\n     * @return {Array} pad\n     */\n    padDaysLeft(startDate, count) {\n        const pad = [];\n        const missingDays = this.integerToArray(count);\n\n        // Loop through missing days\n        for (const day in missingDays) {\n            // How many days to go back\n            const subtraction = parseInt(day, 10) + 1;\n\n            // Find that day\n            const previous = moment(startDate).subtract((subtraction), 'days').toISOString();\n\n            // Add to the beginning of the array\n            pad.unshift({\n                date: previous,\n            });\n        }\n\n        return pad;\n    }\n\n\n    /**\n     * Pad a collection with blank tiles at the beginning\n     *\n     * @param {Array} collection\n     * @param {Integer} count\n     * @return {Array} paddedCollection\n     */\n    padBlankTiles(collection, count, direction = 'left') {\n        let i;\n        const days = [];\n\n        // Create array\n        for (i = 0; i < count; i += 1) {\n            days.push({\n                date: null,\n            });\n        }\n\n        // If direction is 'right'\n        if (direction === 'right') {\n            // pad the end\n            return collection.concat(days);\n        } else if (direction === 'left') {\n            // otherwise pad the beginning\n            return days.concat(collection);\n        }\n\n    }\n\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcCalendarDirective = bcCalendarDirective;\n\nvar _calendar = require('./calendar.controller');\n\nvar _calendar2 = require('./templates/calendar.html');\n\nvar _calendar3 = _interopRequireDefault(_calendar2);\n\nvar _year = require('./templates/year.html');\n\nvar _year2 = _interopRequireDefault(_year);\n\nvar _month = require('./templates/month.html');\n\nvar _month2 = _interopRequireDefault(_month);\n\nvar _week = require('./templates/week.html');\n\nvar _week2 = _interopRequireDefault(_week);\n\nvar _day = require('./templates/day.html');\n\nvar _day2 = _interopRequireDefault(_day);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcCalendarDirective($compile) {\n    'ngInject';\n\n    // Define possible templates\n\n    var templates = {\n        year: _year2.default,\n        month: _month2.default,\n        week: _week2.default,\n        day: _day2.default\n    };\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [month|week|day] - defaults: month\n            bcDays: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?', // string [word|abbreviation|letter] - default: abbreviation\n            bcDateSelected: '&' },\n        // function will be called when a date is selected (tap/click)\n        link: linkFunction,\n        templateUrl: _calendar3.default,\n        controller: _calendar.CalendarController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = function () {\n            return templates[vm.nestingDepth];\n        };\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.directive.js\n **/","import { CalendarController } from './calendar.controller';\nimport calendarTemplate from './templates/calendar.html';\nimport yearTemplate from './templates/year.html';\nimport monthTemplate from './templates/month.html';\nimport weekTemplate from './templates/week.html';\nimport dayTemplate from './templates/day.html';\n\n\nexport function bcCalendarDirective(\n    $compile\n) {\n    'ngInject';\n\n    // Define possible templates\n    const templates = {\n        year: yearTemplate,\n        month: monthTemplate,\n        week: weekTemplate,\n        day: dayTemplate,\n    };\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [month|week|day] - defaults: month\n            bcDays: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?', // string [word|abbreviation|letter] - default: abbreviation\n            bcDateSelected: '&', // function will be called when a date is selected (tap/click)\n        },\n        link: linkFunction,\n        templateUrl: calendarTemplate,\n        controller: CalendarController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = () => {\n            return templates[vm.nestingDepth];\n        };\n\n    }\n\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CalendarController = exports.CalendarController = function () {\n    function CalendarController(bcCalendarConfig, bcCalendarService) {\n        'ngInject';\n\n        _classCallCheck(this, CalendarController);\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n    }\n\n    _createClass(CalendarController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Define today's date\n            this.today = this.bcCalendarConfig.startDate;\n\n            // DEFAULTS\n            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n            this.days = parseInt(this.bcCount || this.bcCalendarConfig.days, 10);\n            this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n            this.weekdays = this.bcWeekTitleFormat ? this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n            this.WEEK_LENGTH = 7;\n\n            // Define the calendar duration (or length)\n            this.calendarDuration = moment.duration(this.days, this.bcCalendarConfig.interval);\n\n            // Get the full count of days\n            this.calendarDays = this.calendarDuration.asDays();\n\n            // Get the current day of the month\n            this.todayDayOfMonth = moment(this.startDate).date();\n\n            // Get the current weekday\n            this.todayDayOfWeek = moment(this.startDate).day();\n\n            // Initially nothing is selected\n            this.selectedDate = null;\n\n            var JS_DATE = {\n                year: 2016,\n                month: 3,\n                day: 11\n            };\n\n            var needed = 100;\n            var tempDays = this._buildDays(needed, new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n            /*\n             *console.log('tempDays: ', tempDays);\n             */\n\n            this.bcCollection = this._organizeMonths(tempDays);\n\n            console.log('this.bcCollection: ', this.bcCollection);\n\n            /*\n             *console.log('tempMonths: ', tempMonths);\n             */\n\n            // Build the calendar JSON\n            /*\n             *this.calendar = this.build(this.startDate, 2);\n             */\n\n            //\n            // Call the correct organization method based on the nesting depth\n            //\n            if (this.nestingDepth === 'month') {\n                this.bcCollection = this._organizeMonths(tempDays);\n            } else if (this.nestingDepth === 'week') {\n                this.bcCollection = this._organizeWeeks(tempDays);\n            } else if (this.nestingDepth === 'day') {\n                this.bcCollection = tempDays;\n            }\n        }\n\n        /**\n         * Check to see if the day is prior to the current date\n         * This is used to disable the unselectable days\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isBeforeToday',\n        value: function isBeforeToday(date) {\n            return this.bcCalendarService.dateIsBeforeToday(date);\n        }\n\n        /**\n         * Check to see if the day matches the current date\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isDayToday',\n        value: function isDayToday(date) {\n            return moment(date).isSame(this.startDate);\n        }\n\n        /**\n         * Select a date\n         *\n         * @param {Object} day\n         */\n\n    }, {\n        key: 'selectDate',\n        value: function selectDate(day) {\n\n            // Set the selected day\n            this.selectedDate = day;\n\n            // Only call the passed method if it exists and a valid date was chosen\n            if (day.date && this.bcDateSelected) {\n                this.bcDateSelected({\n                    date: day.date\n                });\n            }\n        }\n    }, {\n        key: '_buildDays',\n        value: function _buildDays(limit, start) {\n            var counter = 0;\n            var days = [];\n            var day = void 0;\n\n            while (counter < limit) {\n                // Create the day\n                day = moment(start).add(counter, 'days').toISOString();\n\n                // Add to the array\n                days.push({\n                    date: day\n                });\n\n                // Increment our counter\n                counter = counter + 1;\n            }\n\n            /*\n             *console.warn('build days: ', limit, start, days);\n             */\n\n            return days;\n        }\n\n        /**\n         * Organize by month\n         *\n         * @param {Array} allDays - An array of all days\n         * @return {Array} collection - days organized into weeks and months\n         */\n\n    }, {\n        key: '_organizeMonths',\n        value: function _organizeMonths(allDays) {\n            var calendar = [];\n            var SATURDAY = 6;\n            var SUNDAY = 0;\n            var collection = allDays;\n            var month = void 0;\n            var dayOfMonth = moment(collection[0].date).date();\n            var daysInMonth = moment(collection[0].date).daysInMonth();\n\n            // Pad the beginning of the month with any missing days\n            // If the first day is not the first day of the month\n            if (moment(collection[0].date).date() > 0) {\n                // Pull this month's days from the collection\n                month = collection.slice(0, daysInMonth - (dayOfMonth - 1));\n\n                // Fill the missing days from the month\n                var pad = this.bcCalendarService.padDaysLeft(month[0].date, dayOfMonth - 1);\n\n                // Combine with the existing array\n                collection = pad.concat(collection);\n            }\n\n            // Split into months\n            // As long as there are days left in the collection\n            while (collection.length > 0) {\n\n                // Get the day of the month for the first date of the collection eg. '24'\n                dayOfMonth = moment(collection[0].date).date();\n\n                // Determine how many days there are this month (total)\n                daysInMonth = moment(collection[0].date).daysInMonth();\n\n                // Pull this month's days from the collection\n                month = collection.splice(0, daysInMonth - (dayOfMonth - 1));\n\n                // How many weekdays are prior to the first day of this month?\n                var firstDay = moment(month[0].date).day();\n\n                // If the first day is after Sunday\n                if (firstDay > SUNDAY) {\n                    // Pad with blank tiles so that the first day is lined up in the correct column\n                    month = this.bcCalendarService.padBlankTiles(month, firstDay, 'left');\n                }\n\n                // How many weekdays are after the last day of the month?\n                // (remember: weeks are zero-based)\n                var lastDay = moment(month[month.length - 1].date).day();\n\n                // If blank tiles are needed for the last week\n                if (lastDay < SATURDAY) {\n                    // Pad with blank tiles so that the first day is lined up in the correct column\n                    month = this.bcCalendarService.padBlankTiles(month, this.WEEK_LENGTH - (lastDay + 1), 'right');\n                }\n\n                // Organize into weeks and add to the calendar array\n                calendar.push(this._chunk(month));\n            }\n\n            return calendar;\n        }\n\n        /**\n         * Organize a collection of days into sub collections of weeks\n         *\n         * @param {Array} days - array of days\n         * @return {Array} collection\n         */\n\n    }, {\n        key: '_organizeWeeks',\n        value: function _organizeWeeks(days) {\n            // Determine the day of the week that the calendar starts and ends on\n            var firstDay = moment(days[0].date).day();\n            var lastDay = moment(days[days.length - 1].date).day();\n            var SATURDAY = 6;\n            var SUNDAY = 0;\n\n            // If the first day is after Sunday\n            if (firstDay > SUNDAY) {\n                // Pad with blank tiles so the first day is lined up in the correct weekday column\n                days = this.bcCalendarService.padBlankTiles(days, firstDay, 'left');\n            }\n\n            // If the last day is before Saturday\n            if (lastDay < SATURDAY) {\n                // Pad with blank tiles so that the last week's days are in the correct weekday column\n                days = this.bcCalendarService.padBlankTiles(days, this.WEEK_LENGTH - (lastDay + 1), 'right');\n            }\n\n            return this._chunk(days);\n        }\n\n        /**\n         * Split an array into chunks and return an array of these chunks\n         *\n         * @param {Array} group\n         * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n         * @return {Array} chunks\n         */\n\n    }, {\n        key: '_chunk',\n        value: function _chunk(group) {\n            var groupsize = arguments.length <= 1 || arguments[1] === undefined ? this.WEEK_LENGTH : arguments[1];\n\n            var sets = [];\n            var i = 0;\n            var chunks = group.length / parseInt(groupsize, 10);\n\n            while (i < chunks) {\n                sets[i] = group.splice(0, groupsize);\n                i = i + 1;\n            }\n\n            return sets;\n        }\n    }]);\n\n    return CalendarController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.controller.js\n **/","export class CalendarController {\n\n    constructor(\n        bcCalendarConfig, bcCalendarService\n    ) {\n        'ngInject';\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Define today's date\n        this.today = this.bcCalendarConfig.startDate;\n\n        // DEFAULTS\n        this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n        this.days = parseInt(this.bcCount || this.bcCalendarConfig.days, 10);\n        this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n        this.weekdays = this.bcWeekTitleFormat ?\n            this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] :\n            this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n        this.WEEK_LENGTH = 7;\n\n        // Define the calendar duration (or length)\n        this.calendarDuration =\n            moment.duration(this.days, this.bcCalendarConfig.interval);\n\n        // Get the full count of days\n        this.calendarDays = this.calendarDuration.asDays();\n\n\n        // Get the current day of the month\n        this.todayDayOfMonth = moment(this.startDate).date();\n\n        // Get the current weekday\n        this.todayDayOfWeek = moment(this.startDate).day();\n\n        // Initially nothing is selected\n        this.selectedDate = null;\n\n        const JS_DATE = {\n            year: 2016,\n            month: 3,\n            day: 11,\n        };\n\n        const needed = 100;\n        const tempDays = this._buildDays(needed,\n            new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n        /*\n         *console.log('tempDays: ', tempDays);\n         */\n\n        this.bcCollection = this._organizeMonths(tempDays);\n\n\n        console.log('this.bcCollection: ', this.bcCollection);\n\n        /*\n         *console.log('tempMonths: ', tempMonths);\n         */\n\n        // Build the calendar JSON\n        /*\n         *this.calendar = this.build(this.startDate, 2);\n         */\n\n\n        //\n        // Call the correct organization method based on the nesting depth\n        //\n        if (this.nestingDepth === 'month') {\n            this.bcCollection = this._organizeMonths(tempDays);\n        } else if (this.nestingDepth === 'week') {\n            this.bcCollection = this._organizeWeeks(tempDays);\n        } else if (this.nestingDepth === 'day') {\n            this.bcCollection = tempDays;\n        }\n\n\n\n\n    }\n\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isBeforeToday(date) {\n        return this.bcCalendarService.dateIsBeforeToday(date);\n    }\n\n\n    /**\n     * Check to see if the day matches the current date\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isDayToday(date) {\n        return moment(date).isSame(this.startDate);\n    }\n\n\n    /**\n     * Select a date\n     *\n     * @param {Object} day\n     */\n    selectDate(day) {\n\n        // Set the selected day\n        this.selectedDate = day;\n\n        // Only call the passed method if it exists and a valid date was chosen\n        if (day.date && this.bcDateSelected) {\n            this.bcDateSelected({\n                date: day.date,\n            });\n        }\n\n    }\n\n\n    _buildDays(limit, start) {\n        let counter = 0;\n        const days = [];\n        let day;\n\n        while (counter < limit) {\n            // Create the day\n            day = moment(start).add(counter, 'days').toISOString();\n\n            // Add to the array\n            days.push({\n                date: day,\n            });\n\n            // Increment our counter\n            counter = counter + 1;\n        }\n\n        /*\n         *console.warn('build days: ', limit, start, days);\n         */\n\n        return days;\n    }\n\n\n    /**\n     * Organize by month\n     *\n     * @param {Array} allDays - An array of all days\n     * @return {Array} collection - days organized into weeks and months\n     */\n    _organizeMonths(allDays) {\n        const calendar = [];\n        const SATURDAY = 6;\n        const SUNDAY = 0;\n        let collection = allDays;\n        let month;\n        let dayOfMonth = moment(collection[0].date).date();\n        let daysInMonth = moment(collection[0].date).daysInMonth();\n\n        // Pad the beginning of the month with any missing days\n        // If the first day is not the first day of the month\n        if (moment(collection[0].date).date() > 0) {\n            // Pull this month's days from the collection\n            month = collection.slice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // Fill the missing days from the month\n            const pad = this.bcCalendarService.padDaysLeft(month[0].date, (dayOfMonth - 1));\n\n            // Combine with the existing array\n            collection = pad.concat(collection);\n        }\n\n\n        // Split into months\n        // As long as there are days left in the collection\n        while (collection.length > 0) {\n\n            // Get the day of the month for the first date of the collection eg. '24'\n            dayOfMonth = moment(collection[0].date).date();\n\n            // Determine how many days there are this month (total)\n            daysInMonth = moment(collection[0].date).daysInMonth();\n\n            // Pull this month's days from the collection\n            month = collection.splice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // How many weekdays are prior to the first day of this month?\n            const firstDay = moment(month[0].date).day();\n\n            // If the first day is after Sunday\n            if (firstDay > SUNDAY) {\n                // Pad with blank tiles so that the first day is lined up in the correct column\n                month = this.bcCalendarService.padBlankTiles(month, firstDay, 'left');\n            }\n\n            // How many weekdays are after the last day of the month?\n            // (remember: weeks are zero-based)\n            const lastDay = moment(month[month.length - 1].date).day();\n\n            // If blank tiles are needed for the last week\n            if (lastDay < SATURDAY) {\n                // Pad with blank tiles so that the first day is lined up in the correct column\n                month = this.bcCalendarService.padBlankTiles(month,\n                                                             this.WEEK_LENGTH - (lastDay + 1),\n                                                             'right');\n            }\n\n            // Organize into weeks and add to the calendar array\n            calendar.push(this._chunk(month));\n\n        }\n\n\n        return calendar;\n\n    }\n\n\n    /**\n     * Organize a collection of days into sub collections of weeks\n     *\n     * @param {Array} days - array of days\n     * @return {Array} collection\n     */\n    _organizeWeeks(days) {\n        // Determine the day of the week that the calendar starts and ends on\n        const firstDay = moment(days[0].date).day();\n        const lastDay = moment(days[days.length - 1].date).day();\n        const SATURDAY = 6;\n        const SUNDAY = 0;\n\n        // If the first day is after Sunday\n        if (firstDay > SUNDAY) {\n            // Pad with blank tiles so the first day is lined up in the correct weekday column\n            days = this.bcCalendarService.padBlankTiles(days, firstDay, 'left');\n        }\n\n        // If the last day is before Saturday\n        if (lastDay < SATURDAY) {\n            // Pad with blank tiles so that the last week's days are in the correct weekday column\n            days = this.bcCalendarService.padBlankTiles(days,this.WEEK_LENGTH - (lastDay + 1),\n                                                        'right');\n        }\n\n        return this._chunk(days);\n    }\n\n\n    /**\n     * Split an array into chunks and return an array of these chunks\n     *\n     * @param {Array} group\n     * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n     * @return {Array} chunks\n     */\n    _chunk(group, groupsize = this.WEEK_LENGTH) {\n        const sets = [];\n        let i = 0;\n        const chunks = group.length / parseInt(groupsize, 10);\n\n        while(i < chunks) {\n            sets[i] = group.splice(0, groupsize);\n            i = i + 1;\n        }\n\n        return sets;\n    }\n\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.controller.js\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html';\nvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=\\\"bc-calendar__day bc-calendar__day--header\\\" data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div data-ng-include=vm.getTemplateUrl()></div> </section>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/calendar.html\n ** module id = 5\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html';\nvar html = \"<div class=bc-calendar__year data-ng-repeat=\\\"year in vm.bcCollection track by $index\\\"> <bc-month bc-collection=year></bc-month> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/year.html\n ** module id = 6\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html';\nvar html = \"<div class=bc-calendar__month data-ng-repeat=\\\"month in vm.bcCollection track by $index\\\"> <bc-week bc-collection=month></bc-week> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/month.html\n ** module id = 7\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html';\nvar html = \"<div class=bc-calendar__week data-ng-repeat=\\\"week in vm.bcCollection track by $index\\\"> <bc-day bc-collection=week></bc-day> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/week.html\n ** module id = 8\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html';\nvar html = \"<span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\\n                   'bc-calendar__day--even': $even,\\n                   'bc-calendar__day--pad': !day.date,\\n                   'bc-calendar__day--selected': day.date === vm.selectedDate.date }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in vm.bcCollection track by $index\\\"> <time class=bc-calendar__day-time datetime=\\\"{{ day.date | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day.date }}\\\" data-ng-if=\\\"day.date && day.date.length > 3\\\"> {{ day.date | date:'MM/dd/yy' }} <small> {{ day.date | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=!day.date></span> </span>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/day.html\n ** module id = 9\n ** module chunks = 0 1\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcMonthDirective = bcMonthDirective;\n\nvar _month = require('./templates/month.html');\n\nvar _month2 = _interopRequireDefault(_month);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcMonthDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _month2.default,\n        controller: function controller() {},\n        controllerAs: 'vm'\n    };\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/month.directive.js\n **/","import monthTemplate from './templates/month.html';\n\nexport function bcMonthDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: monthTemplate,\n        controller: () => {},\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/month.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcWeekDirective = bcWeekDirective;\n\nvar _week = require('./templates/week.html');\n\nvar _week2 = _interopRequireDefault(_week);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcWeekDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _week2.default,\n        controller: function controller() {},\n        controllerAs: 'vm'\n    };\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/week.directive.js\n **/","import weekTemplate from './templates/week.html';\n\nexport function bcWeekDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: weekTemplate,\n        controller: () => {},\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/week.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcDayDirective = bcDayDirective;\n\nvar _day = require('./templates/day.html');\n\nvar _day2 = _interopRequireDefault(_day);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcDayDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _day2.default,\n        controller: function controller() {},\n        controllerAs: 'vm'\n    };\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/day.directive.js\n **/","import dayTemplate from './templates/day.html';\n\nexport function bcDayDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: dayTemplate,\n        controller: () => {},\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/day.directive.js\n **/"],"sourceRoot":""}