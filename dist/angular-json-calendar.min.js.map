{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-json-calendar.min.js","webpack:///webpack/bootstrap f30f90268595a54276dc?dc0a","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/calendar.provider.js?46b0","webpack:///./src/calendar.provider.js?b2f7*","webpack:///./src/calendar.service.js?2639","webpack:///./src/calendar.service.js?8728*","webpack:///./src/calendar.directive.js?14e7","webpack:///./src/calendar.directive.js?d4aa*","webpack:///./src/calendar.controller.js?3eb8","webpack:///./src/calendar.controller.js?6b53*","webpack:///./src/templates/calendar.html?2144","webpack:///./src/templates/year.html?5759","webpack:///./src/templates/month.html?ef61","webpack:///./src/templates/week.html?4807","webpack:///./src/templates/day.html?9306","webpack:///./src/templates/test.html?8e0d","webpack:///./src/month.directive.js?4d7d","webpack:///./src/month.directive.js?369b*","webpack:///./src/week.directive.js?eb5f","webpack:///./src/week.directive.js?2d44*","webpack:///./src/day.directive.js?a3c1","webpack:///./src/day.directive.js?de60*"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_calendar","_calendar2","_calendar3","_month","_week","_day","angular","provider","bcCalendarConfig","service","bcCalendarService","directive","bcCalendarDirective","bcMonthDirective","bcWeekDirective","bcDayDirective","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","startDate","moment","Date","toISOString","startOf","add","nestingDepth","count","weekdayStyle","letter","abbreviation","word","weekTitleFormat","organizeWeeks","date1","date2","match","month1","month","month2","year","date","days","getMonth","push","hour","minute","second","format","setDate","getDate","_interopRequireDefault","obj","__esModule","default","$compile","linkFunction","$scope","$element","$attrs","vm","getTemplateUrl","templates","_year2","_month2","week","_week2","day","_day2","restrict","replace","scope","bindToController","bcStartDate","bcNestingDepth","bcCount","bcWeekTitleFormat","link","templateUrl","controller","CalendarController","controllerAs","$inject","_year","_test","_activate","today","parseInt","weekdays","WEEK_LENGTH","calendarDuration","duration","interval","calendarDays","asDays","todayDayOfMonth","todayDayOfWeek","selectedDate","JS_DATE","needed","tempDays","_buildDays","bcCollection","_organizeMonths","console","log","bcCalendar","start","collection","monthsBuilt","_getDaysInMonth","missingDays","_padDaysLeft","concat","_missingDays","_padWeekRight","Array","apply","_organizeWeeks","isBefore","isSame","limit","counter","firstDate","allDays","calendar","dayOfMonth","daysInMonth","slice","pad","splice","daysNeededAtBeginning","_padBlankTiles","daysNeededAtEnd","info","_chunk","group","groupsize","arguments","undefined","sets","chunks","direction","_integerToArray","subtraction","previous","subtract","unshift","startDay","dayOfWeek","neededDays","path","html","window","run","put"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,2BAAAH,GACA,gBAAAC,SACAA,QAAA,yBAAAD,IAEAD,EAAA,yBAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GEtDhC,YAEAS,QAAOC,eAAehB,EAAS,cAC3BiB,OAAO,GCHX,IAAAC,GAAAZ,EAAA,GACAa,EAAAb,EAAA,GACAc,EAAAd,EAAA,GACAe,EAAAf,EAAA,IACAgB,EAAAhB,EAAA,IACAiB,EAAAjB,EAAA,GDaAN,cCXewB,QAAQvB,OAAO,sBACzBwB,SAAS,mBADCP,EAAAQ,kBAEVC,QAAQ,oBAFER,EAAAS,mBAGVC,UAAU,aAHAT,EAAAU,qBAIVD,UAAU,UAJAR,EAAAU,kBAKVF,UAAU,SALAP,EAAAU,iBAMVH,UAAU,QANAN,EAAAU,iBHuET,SAAShC,EAAQD,GI9EvB,YAQA,SAASkC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHtB,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,GAGX,IAAIqB,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMhC,OAAOC,eAAewB,EAAQI,EAAWI,IAAKJ,IAAiB,MAAO,UAAUR,EAAaa,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,KCNnhBpC,GAAA0B,iBAAA,WAGT,QAHSA,KDeLQ,EAAgB9B,KCfXsB,GAOLtB,KAAKgD,UAAYC,QAAO,GAAIC,OAAOC,eAAeC,QAAQ,OAAOC,IAAI,EAAG,QAJ9DrD,KAOLsD,aAAe,QAPVtD,KAULuD,MAAQ,EAVHvD,KAaLwD,cACDC,QACI,IACA,IACA,IACA,IACA,IACA,IACA,KAEJC,cACI,MACA,MACA,MACA,MACA,OACA,MACA,OAEJC,MACI,SACA,SACA,UACA,YACA,WACA,SACA,WAvCE3D,KA4CL4D,gBAAkB,eA5Cb5D,KA+CL6D,eAAgB,EDFzB,MAPA3B,GCzCSZ,ID0CLsB,IAAK,OACL/B,MAAO,WCeP,MAAOb,UA1DFsB,MLqIP,SAASzB,EAAQD,GMrIvB,YAQA,SAASkC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHtB,OAAOC,eAAehB,EAAS,cAC7BiB,OAAO,GAGT,IAAIqB,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMhC,OAAOC,eAAewB,EAAQI,EAAWI,IAAKJ,IAAiB,MAAO,UAAUR,EAAaa,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,KCNnhBpC,GAAA4B,kBAAA,WAET,QAFSA,KAIL,UDUJM,GAAgB9B,KCdPwB,GD6JX,MA5GAU,GCjDWV,IDkDToB,IAAK,gBACL/B,MAAO,SCTOiD,EAAOC,GACjB,GAAIC,IAAQ,EACNC,EAAShB,OAAOa,GAAOI,QACvBC,EAASlB,OAAOc,GAAOG,OAM7B,OAJID,KAAWE,IACXH,GAAQ,GAGLA,KDsEXpB,IAAK,iBACL/B,MAAO,SCAQqD,EAAOE,GAKlB,IAHA,GAAMC,GAAO,GAAInB,MAAKkB,EAAMF,EAAO,GAC7BI,KAECD,EAAKE,aAAeL,GACvBI,EAAKE,KAAKvB,OAAOoB,GAAMI,KAAK,GAAGC,OAAO,GAAGC,OAAO,GAAGC,UACnDP,EAAKQ,QAAQR,EAAKS,UAAY,EAGlC,OAAOR,MDWX1B,IAAK,kBACL/B,MAAO,SCDS0C,GAEZ,GAAIjB,GAAA,OACEgC,IAEN,KAAKhC,EAAI,EAAOiB,EAAJjB,EAAWA,GAAK,EACxBgC,EAAKE,KAAKlC,EAGd,OAAOgC,OAxJF9C,MPySP,SAAS3B,EAAQD,EAASM,GQzShC,YAiCA,SAAS6E,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GCvBhF,QAAStD,GACZyD,GAEA,UADF,SAmCWC,GAAaC,EAAQC,EAAUC,EAAQC,GAG5CA,EAAGC,eAAiB,WAChB,MAAOC,GAAUF,EAAGlC,eAnC5B,GAAMoC,IACFtB,KAAAuB,aACAzB,MAAA0B,aACAC,KAAAC,aACAC,IAAAC,cAGEvE,GACFwE,SAAU,IACVC,SAAS,EACTC,SACAC,kBACIC,YAAa,KACbC,eAAgB,KAChBC,QAAS,KACTC,kBAAmB,MAEvBC,KAAMrB,EACNsB,YAAA1F,aACA2F,WAAA7F,EAAA8F,mBACAC,aAAc,KAGlB,OAAOpF,GTsQVC,EAAoBoF,SAAW,YQ3ShCnG,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,IAEXjB,ECKgB8B,qBAVhB,IAAAZ,GAAAZ,EAAA,GACAa,EAAAb,EAAA,GDUIc,EAAa+D,EAAuBhE,GCTxCgG,EAAA7G,EAAA,GDaIyF,EAASZ,EAAuBgC,GCZpC9F,EAAAf,EAAA,GDgBI0F,EAAUb,EAAuB9D,GCfrCC,EAAAhB,EAAA,GDmBI4F,EAASf,EAAuB7D,GClBpCC,EAAAjB,EAAA,GDsBI8F,EAAQjB,EAAuB5D,GCrBnC6F,EAAA9G,EAAA,GDyBa6E,GAAuBiC,IR8V9B,SAASnH,EAAQD,GU7XvB,YAQA,SAASkC,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHtB,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,GAGX,IAAIqB,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMhC,OAAOC,eAAewB,EAAQI,EAAWI,IAAKJ,IAAiB,MAAO,UAAUR,EAAaa,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBH,EAAYe,UAAWF,GAAiBC,GAAaX,EAAiBH,EAAac,GAAqBd,KVmYtgBpC,GAAQgH,mBAAqB,WWvYnD,QAFSA,GAGLtF,EAAkBE,GAElB,UDSAM,GAAgB9B,KCdX4G,GAOL5G,KAAKsB,iBAAmBA,EACxBtB,KAAKwB,kBAAoBA,EAEzBxB,KAAKiH,YDibT,MVjDCL,GAAmBE,SAAW,mBAAoB,qBUpXnD5E,ECtBS0E,IDuBLhE,IAAK,YACL/B,MAAO,WCLPb,KAAKkH,MAAQlH,KAAKsB,iBAAiB0B,UAF3BhD,KAKHgD,UAAYhD,KAAKgD,WAAahD,KAAKsB,iBAAiB0B,UACzDhD,KAAKuD,MAAQ4D,SAASnH,KAAKuG,SAAWvG,KAAKsB,iBAAiBiC,MAAO,IACnEvD,KAAKsD,aAAetD,KAAKsG,gBAAkBtG,KAAKsB,iBAAiBgC,aACjEtD,KAAKoH,SAAWpH,KAAKwG,kBACjBxG,KAAKsB,iBAAiBkC,aAAaxD,KAAKwG,mBACxCxG,KAAKsB,iBAAiBkC,aAAaxD,KAAKsB,iBAAiBsC,iBAC7D5D,KAAKqH,YAAc,EAXXrH,KAcHsH,iBACDrE,OAAOsE,SAASvH,KAAKuD,MAAOvD,KAAKsB,iBAAiBkG,UAf9CxH,KAkBHyH,aAAezH,KAAKsH,iBAAiBI,SAlBlC1H,KAsBH2H,gBAAkB1E,OAAOjD,KAAKgD,WAAWqB,OAtBtCrE,KAyBH4H,eAAiB3E,OAAOjD,KAAKgD,WAAW+C,MAzBrC/F,KA4BH6H,aAAe,IAEpB,IAAMC,IACF1D,KAAM,KACNF,MAAO,EACP6B,IAAK,IAGHgC,EAAS,IACTC,EAAWhI,KAAKiI,WAAWF,EAC7B,GAAI7E,MAAK4E,EAAQ1D,KAAM0D,EAAQ5D,MAAO4D,EAAQ/B,KAAK5C,cAtC/CnD,MA4CHkI,aAAelI,KAAKmI,gBAAgBH,GAGzCI,QAAQC,IAAI,oBAAqBrI,KAAKsI,eDyBtC1F,IAAK,QACL/B,MAAO,SCFL0H,EAAOhB,GAAU,IACnB,GAAIiB,MACAC,EAAc,GAGGlB,EAAdkB,GAAwB,CAE3BA,GAA4B,EAIR,IAAhBA,IACAF,EAAQtF,OAAOsF,GAAOnF,QAAQ,SAGlC,IAAIkB,GAAOtE,KAAK0I,gBAAgBzF,OAAOsF,GAAOlF,IAAIoF,EAAa,UAVpC,IAaP,IAAhBA,EAAmB,CAEnB,GAAME,GAAc3I,KAAK4I,aAAatE,EAAMtE,KAAK4H,eAF9BtD,GAKZqE,EAAYE,OAAOvE,GAlBH,GAsBvBmE,IAAgBlB,EAAU,CAE1B,GAAMuB,GAAc9I,KAAK+I,cAAczE,EAAMA,EAAKA,EAAK/B,OAAS,GAFtCyG,OAKpBjG,UAAUyB,KAAKyE,MAAM3E,EAAMwE,GA3BVN,EA+BhBhE,KAAKF,GApCD,MAuCftE,MAAK6D,gBACL2E,EAAaxI,KAAKkJ,eAAeV,IAO9BA,KDcP5F,IAAK,gBACL/B,MAAO,SCJGwD,GACV,MAAOpB,QAAOoB,GAAM8E,SAASnJ,KAAKgD,cDelCJ,IAAK,aACL/B,MAAO,SCNAwD,GACP,MAAOpB,QAAOoB,GAAM+E,OAAOpJ,KAAKgD,cDShCJ,IAAK,gBACL/B,MAAO,eAEP+B,IAAK,aACL/B,MAAO,eAEP+B,IAAK,aACL/B,MAAO,SCJAwI,EAAOd,GAKd,IAJA,GAAIe,GAAU,EACRhF,KACFyB,EAAA,OAEasD,EAAVC,GAEHvD,EAAM9C,OAAOsF,GAAOlF,IAAIiG,EAAS,QAAQnG,cAFrBmB,EAKfE,MACDH,KAAM0B,IANUuD,GAUA,CAfH,OAsBdhF,MDeP1B,IAAK,kBACL/B,MAAO,SCNKmC,GAAW,IACvB,GAAMuG,GAAYtG,OAAOD,GACnBsB,KACFD,EAAOpB,OAAOD,GAGXC,OAAOoB,GAAM+E,OAAOG,EAAW,UAElCjF,EAAKE,KAAKvB,OAAOoB,GAAMjB,QAAQ,OAAOwB,UAFMP,EAKrCpB,OAAOoB,GAAMhB,IAAI,EAAG,OAG/B,OAAOiB,MDiBP1B,IAAK,kBACL/B,MAAO,SCRK0C,GACZ,GAAIjB,GAAA,OACEgC,IAEN,KAAKhC,EAAI,EAAOiB,EAAJjB,EAAWA,GAAK,EACxBgC,EAAKE,KAAKlC,EAGd,OAAOgC,MDmBP1B,IAAK,kBACL/B,MAAO,SCVK2I,GACZ,GAAMC,MACFjB,EAAagB,EACbtF,EAAA,OACAwF,EAAazG,OAAOuF,EAAW,GAAGnE,MAAMA,OACxCsF,EAAc1G,OAAOuF,EAAW,GAAGnE,MAAMsF,aALxB,IASjB1G,OAAOuF,EAAW,GAAGnE,MAAMA,OAAS,EAAG,CAEvCH,EAAQsE,EAAWoB,MAAM,EAAID,GAAeD,EAAa,GAFlB,IAKjCG,GAAM7J,KAAK4I,aAAa1E,EAAM,GAAGG,KAAOqF,EAAa,EALpBlB,GAQ1BqB,EAAIhB,OAAOL,GAjBP,KAuBdA,EAAWjG,OAAS,GAAG,CAG1BmH,EAAazG,OAAOuF,EAAW,GAAGnE,MAAMA,OAHdsF,EAMZ1G,OAAOuF,EAAW,GAAGnE,MAAMsF,cANfzF,EASlBsE,EAAWsB,OAAO,EAAIH,GAAeD,EAAa,GAThC,IAYpBK,GAAwB9G,OAAOiB,EAAM,GAAGG,MAAM0B,KAGhDgE,GAAwB,IAExB7F,EAAQlE,KAAKgK,eAAe9F,EAAO6F,EAAuB,QAjBpC,IAsBpBE,GACFjK,KAAKqH,aAAepE,OAAOiB,EAAMA,EAAM3B,OAAS,GAAG8B,MAAM0B,MAAQ,EAGjEkE,GAAkB,IAElB/F,EAAQlE,KAAKgK,eAAe9F,EAAO+F,EAAiB,UA5B9BR,EAgCjBjF,KAAKxE,KAAKkJ,eAAehF,IAMtC,MADAkE,SAAQ8B,KAAK,cAAeT,GACrBA,KDiBP7G,IAAK,iBACL/B,MAAO,SCPIyD,GACX,MAAOtE,MAAKmK,OAAO7F,MDmBnB1B,IAAK,SACL/B,MAAO,SCTJuJ,GAKH,IDKI,GCVMC,GAAAC,UAAA/H,QAAA,GAAAgI,SAAAD,UAAA,GAAYtK,KAAKqH,YAALiD,UAAA,GAChBE,KACFlI,EAAI,EACFmI,EAASL,EAAM7H,OAAS4E,SAASkD,EAAW,IAExCI,EAAJnI,GACFkI,EAAKlI,GAAK8H,EAAMN,OAAO,EAAGO,GAC1B/H,GAAQ,CAGZ,OAAOkI,MDuBP5H,IAAK,iBACL/B,MAAO,SCbI2H,EAAYjF,GDcnB,GCd0BmH,GAAAJ,UAAA/H,QAAA,GAAAgI,SAAAD,UAAA,GAAY,OAAAA,UAAA,GACtChI,EAAA,OACEgC,IAF4C,KAK7ChC,EAAI,EAAOiB,EAAJjB,EAAWA,GAAK,EACxBgC,EAAKE,MACDH,KAAM,MAPoC,OAYhC,UAAdqG,EAEOlC,EAAWK,OAAOvE,GACJ,SAAdoG,EAEApG,EAAKuE,OAAOL,GAFhB,UD8BP5F,IAAK,eACL/B,MAAO,SChBEmC,EAAWO,GACpB,GAAMsG,MACAlB,EAAc3I,KAAK2K,gBAAgBpH,EAFd,KAKtB,GAAMwC,KAAO4C,GAAa,CAE3B,GAAMiC,GAAczD,SAASpB,EAAK,IAAM,EAGlC8E,EAAW5H,OAAOD,GAAW8H,SAAUF,EAAc,QAAQzH,aALxC0G,GAQvBkB,SACA1G,KAAMwG,IAId,MAAOhB,MD2BPjH,IAAK,gBACL/B,MAAO,SClBGyD,EAAM0G,GAChB,GAAMnB,MACAhE,EAAO,EACPoF,EAAYhI,OAAO+H,GAAUjF,MAG7BmF,EAAalL,KAAK2K,gBAAgB9E,GAAQoF,EAAY,GAE5D,KAAK,GAAMlF,KAAOmF,GACdrB,EAAIrF,MACAH,KAAM,MAId,OAAOrE,MAAK2K,gBAAgBO,OAravBtE,MXg0BP,SAAS/G,EAAQD,GYh0BvB,GAAAuL,GAAA,+EACAC,EAAA,oTACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,GZs0BM,SAAStL,EAAQD,Gaz0BvB,GAAAuL,GAAA,2EACAC,EAAA,wIACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,Gb+0BM,SAAStL,EAAQD,Gcl1BvB,GAAAuL,GAAA,4EACAC,EAAA,yIACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,Gdw1BM,SAAStL,EAAQD,Ge31BvB,GAAAuL,GAAA,2EACAC,EAAA,oIACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,Gfi2BM,SAAStL,EAAQD,GgBp2BvB,GAAAuL,GAAA,0EACAC,EAAA,8wBACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,GhB02BM,SAAStL,EAAQD,GiB72BvB,GAAAuL,GAAA,2EACAC,EAAA,4DACAC,QAAAjK,QAAAvB,OAAA,MAAAyL,KAAA,0BAAA7K,GAAgEA,EAAA8K,IAAAJ,EAAAC,MAChEvL,EAAAD,QAAAuL,GjBm3BM,SAAStL,EAAQD,EAASM,GkBt3BhC,YAWA,SAAS6E,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GCThF,QAASrD,KAEZ,UADF,SA0BWyD,GAAaC,EAAQC,EAAUC,EAAQC,GAC5C4C,QAAQC,IAAI,YAAahD,EAAO6C,cAxBpC,GAAMzG,IACFwE,SAAU,IACVC,SAAS,EACTC,SACAC,kBACI8B,aAAc,KAElBxB,YAAAd,aACAe,WAAY,aAOZE,aAAc,KACdJ,KAAMrB,EAYV,OAAO3D,GDhCXd,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,IAEXjB,ECHgB+B,kBAFhB,IAAAV,GAAAf,EAAA,GDSI0F,EAAUb,EAAuB9D,IlB85B/B,SAASpB,EAAQD,EAASM,GoBv6BhC,YAWA,SAAS6E,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GCThF,QAASpD,KAEZ,UADF,SA0BWwD,GAAaC,EAAQC,EAAUC,EAAQC,GAC5C4C,QAAQC,IAAI,YAAahD,EAAO6C,cAxBpC,GAAMzG,IACFwE,SAAU,IACVC,SAAS,EACTC,SACAC,kBACI8B,aAAc,KAElBxB,YAAAZ,aACAa,WAAY,aAOZE,aAAc,KACdJ,KAAMrB,EAYV,OAAO3D,GDhCXd,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,IAEXjB,ECHgBgC,iBAFhB,IAAAV,GAAAhB,EAAA,GDSI4F,EAASf,EAAuB7D,IpB+8B9B,SAASrB,EAAQD,EAASM,GsBx9BhC,YAWA,SAAS6E,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GCThF,QAASnD,KAEZ,UAEA,IAAMJ,IACFwE,SAAU,IACVC,SAAS,EACTC,SACAC,kBACI8B,aAAc,KAElBxB,YAAAV,aACAW,WAAY,aAOZE,aAAc,KAGlB,OAAOpF,GDtBXd,OAAOC,eAAehB,EAAS,cAC3BiB,OAAO,IAEXjB,ECHgBiC,gBAFhB,IAAAV,GAAAjB,EAAA,GDSI8F,EAAQjB,EAAuB5D","file":"angular-json-calendar.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _calendar = __webpack_require__(1);\n\t\n\tvar _calendar2 = __webpack_require__(2);\n\t\n\tvar _calendar3 = __webpack_require__(3);\n\t\n\tvar _month = __webpack_require__(11);\n\t\n\tvar _week = __webpack_require__(12);\n\t\n\tvar _day = __webpack_require__(13);\n\t\n\texports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective).directive('bcMonth', _month.bcMonthDirective).directive('bcWeek', _week.bcWeekDirective).directive('bcDay', _day.bcDayDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\t\n\t    // Define defaults\n\t\n\t    function bcCalendarConfig() {\n\t        _classCallCheck(this, bcCalendarConfig);\n\t\n\t        // The calendar will begin with today\n\t        // TODO: Remove 'add'\n\t        this.startDate = moment(new Date().toISOString()).startOf('day').add(1, 'days');\n\t\n\t        // The default interval type [day|week|month]\n\t        this.nestingDepth = 'month';\n\t\n\t        // How many of the interval type should be generated\n\t        this.count = 1;\n\t\n\t        // Define the different possible representations of the weekday\n\t        this.weekdayStyle = {\n\t            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n\t            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n\t            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n\t        };\n\t\n\t        // Set the default word type (M vs Mon vs Monday)\n\t        this.weekTitleFormat = 'abbreviation';\n\t\n\t        // Should days be organized by week?\n\t        this.organizeWeeks = true;\n\t    }\n\t\n\t    _createClass(bcCalendarConfig, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return bcCalendarConfig;\n\t}();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarService = exports.bcCalendarService = function () {\n\t  function bcCalendarService() {\n\t    'ngInject';\n\t\n\t    _classCallCheck(this, bcCalendarService);\n\t  }\n\t\n\t  /**\n\t   * Test if days match\n\t   *\n\t   * @param {Date} date1\n\t   * @param {Date} date2\n\t   * @return {Bool} match\n\t   */\n\t  /*\n\t   *    daysMatch(date1, date2) {\n\t   *\n\t   *        let match = false;\n\t   *        const day1 = moment(date1).date();\n\t   *        const day2 = moment(date2).date();\n\t   *\n\t   *        if (day1 === day2) {\n\t   *            match = true;\n\t   *        }\n\t   *\n\t   *        return match;\n\t   *\n\t   *    }\n\t   */\n\t\n\t  /**\n\t   * Test if months match\n\t   *\n\t   * @param {Date} date1\n\t   * @param {Date} date2\n\t   * @return {Bool} match\n\t   */\n\t\n\t\n\t  _createClass(bcCalendarService, [{\n\t    key: 'doMonthsMatch',\n\t    value: function doMonthsMatch(date1, date2) {\n\t      var match = false;\n\t      var month1 = moment(date1).month();\n\t      var month2 = moment(date2).month();\n\t\n\t      if (month1 === month2) {\n\t        match = true;\n\t      }\n\t\n\t      return match;\n\t    }\n\t\n\t    /**\n\t     * Test if day is today\n\t     *\n\t     * @param {Date} date - The date to check\n\t     * @param {Date} today - The day to check against\n\t     * @return {Bool} isToday\n\t     */\n\t    /*\n\t     *    isToday(date, today) {\n\t     *\n\t     *        today = moment(today).startOf('day');\n\t     *\n\t     *        const dayToTest = moment(date).startOf('day');\n\t     *        const isToday = today.diff(dayToTest) ? false : true;\n\t     *\n\t     *        return isToday;\n\t     *\n\t     *    }\n\t     */\n\t\n\t    /**\n\t     * Update the date with the current time\n\t     *\n\t     * @param {Date} date\n\t     * @return {Date} updatedDate\n\t     */\n\t    /*\n\t     *    updateTime(date) {\n\t     *\n\t     *        let updatedDate;\n\t     *\n\t     *        // Get the current date\n\t     *        const jsDate = new Date().toISOString();\n\t     *        const currentHour = moment(jsDate).hour();\n\t     *        const currentMinutes = moment(jsDate).minutes();\n\t     *\n\t     *        // Zero out seconds and milliseconds\n\t     *        updatedDate = moment(date).set({\n\t     *            hour: currentHour,\n\t     *            minutes: currentMinutes,\n\t     *            second: 0,\n\t     *            millisecond: 0,\n\t     *        }).format();\n\t     *\n\t     *        return updatedDate;\n\t     *\n\t     *    }\n\t     */\n\t\n\t    /**\n\t     * Return an array of days for the passed in month\n\t     *\n\t     * @param {Integer} month\n\t     * @param {Integer} year\n\t     * @return {Array} days\n\t     */\n\t\n\t  }, {\n\t    key: 'getDaysInMonth',\n\t    value: function getDaysInMonth(month, year) {\n\t\n\t      var date = new Date(year, month, 1);\n\t      var days = [];\n\t\n\t      while (date.getMonth() === month) {\n\t        days.push(moment(date).hour(0).minute(0).second(0).format());\n\t        date.setDate(date.getDate() + 1);\n\t      }\n\t\n\t      return days;\n\t    }\n\t\n\t    /**\n\t     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n\t     *\n\t     * @param {Integer} count\n\t     * @return {Array} days\n\t     */\n\t\n\t  }, {\n\t    key: 'createDaysArray',\n\t    value: function createDaysArray(count) {\n\t\n\t      var i = void 0;\n\t      var days = [];\n\t\n\t      for (i = 0; i < count; i += 1) {\n\t        days.push(i);\n\t      }\n\t\n\t      return days;\n\t    }\n\t  }]);\n\t\n\t  return bcCalendarService;\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tbcCalendarDirective.$inject = [\"$compile\"];\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcCalendarDirective = bcCalendarDirective;\n\t\n\tvar _calendar = __webpack_require__(4);\n\t\n\tvar _calendar2 = __webpack_require__(5);\n\t\n\tvar _calendar3 = _interopRequireDefault(_calendar2);\n\t\n\tvar _year = __webpack_require__(6);\n\t\n\tvar _year2 = _interopRequireDefault(_year);\n\t\n\tvar _month = __webpack_require__(7);\n\t\n\tvar _month2 = _interopRequireDefault(_month);\n\t\n\tvar _week = __webpack_require__(8);\n\t\n\tvar _week2 = _interopRequireDefault(_week);\n\t\n\tvar _day = __webpack_require__(9);\n\t\n\tvar _day2 = _interopRequireDefault(_day);\n\t\n\tvar _test = __webpack_require__(10);\n\t\n\tvar _test2 = _interopRequireDefault(_test);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// TODO: turn these ^ into directives\n\t\n\tfunction bcCalendarDirective($compile) {\n\t    'ngInject';\n\t\n\t    // Define possible templates\n\t\n\t    var templates = {\n\t        year: _year2.default,\n\t        month: _month2.default,\n\t        week: _week2.default,\n\t        day: _day2.default\n\t    };\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcStartDate: '@?', // date - default to today\n\t            bcNestingDepth: '@?', // string [year|month|week|day] - defaults: month\n\t            bcCount: '@?', // integer - default to 1\n\t            bcWeekTitleFormat: '@?' },\n\t        // string [word|abbreviation|letter] - default: abbreviation\n\t        link: linkFunction,\n\t        templateUrl: _calendar3.default,\n\t        controller: _calendar.CalendarController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, vm) {\n\t\n\t        // Set the correct template based on the desired nesting depth\n\t        vm.getTemplateUrl = function () {\n\t            return templates[vm.nestingDepth];\n\t        };\n\t    }\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CalendarController = exports.CalendarController = function () {\n\t    CalendarController.$inject = [\"bcCalendarConfig\", \"bcCalendarService\"];\n\t    function CalendarController(bcCalendarConfig, bcCalendarService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, CalendarController);\n\t\n\t        this.bcCalendarConfig = bcCalendarConfig;\n\t        this.bcCalendarService = bcCalendarService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(CalendarController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            // Define today's date\n\t            this.today = this.bcCalendarConfig.startDate;\n\t\n\t            // DEFAULTS\n\t            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n\t            this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n\t            this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n\t            this.weekdays = this.bcWeekTitleFormat ? this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n\t            this.WEEK_LENGTH = 7;\n\t\n\t            // Define the calendar duration (or length)\n\t            this.calendarDuration = moment.duration(this.count, this.bcCalendarConfig.interval);\n\t\n\t            // Get the full count of days\n\t            this.calendarDays = this.calendarDuration.asDays();\n\t\n\t            // Get the current day of the month\n\t            this.todayDayOfMonth = moment(this.startDate).date();\n\t\n\t            // Get the current weekday\n\t            this.todayDayOfWeek = moment(this.startDate).day();\n\t\n\t            // Initially nothing is selected\n\t            this.selectedDate = null;\n\t\n\t            var JS_DATE = {\n\t                year: 2016,\n\t                month: 3,\n\t                day: 11\n\t            };\n\t\n\t            var needed = 100;\n\t            var tempDays = this._buildDays(needed, new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\t\n\t            /*\n\t             *console.log('tempDays: ', tempDays);\n\t             */\n\t\n\t            this.bcCollection = this._organizeMonths(tempDays);\n\t\n\t            console.log('this.bcCalendar: ', this.bcCalendar);\n\t\n\t            /*\n\t             *console.log('tempMonths: ', tempMonths);\n\t             */\n\t\n\t            // Build the calendar JSON\n\t            /*\n\t             *this.calendar = this.build(this.startDate, 2);\n\t             */\n\t        }\n\t\n\t        /**\n\t         * Build calendar\n\t         * TODO: Should this be a service?\n\t         * TODO: Abstract this out so I can better build the needed collection. Abstract out each part,\n\t         * building days, organizing weeks/months/years\n\t         *\n\t         * @param {String} start\n\t         * @param {Integer} duration\n\t         * @return {Array} collection\n\t         */\n\t\n\t    }, {\n\t        key: 'build',\n\t        value: function build(start, duration) {\n\t            var collection = [];\n\t            var monthsBuilt = -1;\n\t\n\t            // Loop to create months\n\t            while (monthsBuilt < duration) {\n\t                // Increment counter\n\t                monthsBuilt = monthsBuilt + 1;\n\t\n\t                // If not the first month generated, the start of the month should be at the beginning\n\t                // rather than the start date\n\t                if (monthsBuilt !== 0) {\n\t                    start = moment(start).startOf('month');\n\t                }\n\t\n\t                var days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\t\n\t                // If this is the FIRST month\n\t                if (monthsBuilt === 0) {\n\t                    // Create the missing days for the padding\n\t                    var missingDays = this._padDaysLeft(days, this.todayDayOfWeek);\n\t\n\t                    // Add to the BEGINNING of our existing array\n\t                    days = missingDays.concat(days);\n\t                }\n\t\n\t                // If this is the LAST month\n\t                if (monthsBuilt === duration) {\n\t                    // Create the missing days for the padding\n\t                    var _missingDays = this._padWeekRight(days, days[days.length - 1]);\n\t\n\t                    // Add to the END of our existing array\n\t                    Array.prototype.push.apply(days, _missingDays);\n\t                }\n\t\n\t                // Add month to collection\n\t                collection.push(days);\n\t            }\n\t\n\t            if (this.organizeWeeks) {\n\t                collection = this._organizeWeeks(collection);\n\t            }\n\t\n\t            /*\n\t             *console.log('collection: ', collection);\n\t             */\n\t\n\t            return collection;\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day is prior to the current date\n\t         * This is used to disable the unselectable days\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isBeforeToday',\n\t        value: function isBeforeToday(date) {\n\t            return moment(date).isBefore(this.startDate);\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day matches the current date\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isDayToday',\n\t        value: function isDayToday(date) {\n\t            return moment(date).isSame(this.startDate);\n\t        }\n\t    }, {\n\t        key: 'isDaySelected',\n\t        value: function isDaySelected() {}\n\t    }, {\n\t        key: 'selectDate',\n\t        value: function selectDate() {}\n\t    }, {\n\t        key: '_buildDays',\n\t        value: function _buildDays(limit, start) {\n\t            var counter = 0;\n\t            var days = [];\n\t            var day = void 0;\n\t\n\t            while (counter < limit) {\n\t                // Create the day\n\t                day = moment(start).add(counter, 'days').toISOString();\n\t\n\t                // Add to the array\n\t                days.push({\n\t                    date: day\n\t                });\n\t\n\t                // Increment our counter\n\t                counter = counter + 1;\n\t            }\n\t\n\t            /*\n\t             *console.warn('build days: ', limit, start, days);\n\t             */\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Return an array of dates for the passed in month\n\t         *\n\t         * @param {Date} startDate\n\t         * @return {Array} days\n\t         */\n\t\n\t    }, {\n\t        key: '_getDaysInMonth',\n\t        value: function _getDaysInMonth(startDate) {\n\t            var firstDate = moment(startDate);\n\t            var days = [];\n\t            var date = moment(startDate);\n\t\n\t            // As long as the month hasn't changed\n\t            while (moment(date).isSame(firstDate, 'month')) {\n\t                // Add the new day to our array\n\t                days.push(moment(date).startOf('day').format());\n\t\n\t                // Increment the date by one day\n\t                date = moment(date).add(1, 'days');\n\t            }\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n\t         *\n\t         * @param {Integer} count\n\t         * @return {Array} days\n\t         */\n\t\n\t    }, {\n\t        key: '_integerToArray',\n\t        value: function _integerToArray(count) {\n\t            var i = void 0;\n\t            var days = [];\n\t\n\t            for (i = 0; i < count; i += 1) {\n\t                days.push(i);\n\t            }\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Organize by month\n\t         *\n\t         * @param {Array} allDays - An array of all days\n\t         * @return {Array} collection - days organized into weeks and months\n\t         */\n\t\n\t    }, {\n\t        key: '_organizeMonths',\n\t        value: function _organizeMonths(allDays) {\n\t            var calendar = [];\n\t            var collection = allDays;\n\t            var month = void 0;\n\t            var dayOfMonth = moment(collection[0].date).date();\n\t            var daysInMonth = moment(collection[0].date).daysInMonth();\n\t\n\t            // Pad the beginning of the month with any missing days\n\t            // If the first day is not the first day of the month\n\t            if (moment(collection[0].date).date() > 0) {\n\t                // Pull this month's days from the collection\n\t                month = collection.slice(0, daysInMonth - (dayOfMonth - 1));\n\t\n\t                // Fill the missing days from the month\n\t                var pad = this._padDaysLeft(month[0].date, dayOfMonth - 1);\n\t\n\t                // Combine with the existing array\n\t                collection = pad.concat(collection);\n\t            }\n\t\n\t            // Split into months\n\t            // As long as there are days left in the collection\n\t            while (collection.length > 0) {\n\t\n\t                // Get the day of the month for the first date of the collection eg. '24'\n\t                dayOfMonth = moment(collection[0].date).date();\n\t\n\t                // Determine how many days there are this month (total)\n\t                daysInMonth = moment(collection[0].date).daysInMonth();\n\t\n\t                // Pull this month's days from the collection\n\t                month = collection.splice(0, daysInMonth - (dayOfMonth - 1));\n\t\n\t                // How many weekdays are prior to the first day of this month?\n\t                var daysNeededAtBeginning = moment(month[0].date).day();\n\t\n\t                // If days are needed for the first week\n\t                if (daysNeededAtBeginning > 0) {\n\t                    // Pad with blank tiles so that the first day is lined up in the correct column\n\t                    month = this._padBlankTiles(month, daysNeededAtBeginning, 'left');\n\t                }\n\t\n\t                // How many weekdays are after the last day of the month?\n\t                // (remember: weeks are zero-based)\n\t                var daysNeededAtEnd = this.WEEK_LENGTH - (moment(month[month.length - 1].date).day() + 1);\n\t\n\t                // If days are needed for the last week\n\t                if (daysNeededAtEnd > 0) {\n\t                    // Pad with blank tiles so that the first day is lined up in the correct column\n\t                    month = this._padBlankTiles(month, daysNeededAtEnd, 'right');\n\t                }\n\t\n\t                // Organize and add to the calendar array\n\t                calendar.push(this._organizeWeeks(month));\n\t            }\n\t\n\t            console.info('RETURNING: ', calendar);\n\t            return calendar;\n\t        }\n\t\n\t        /**\n\t         * Organize collection of days into sub collections of weeks\n\t         *\n\t         * @param {Array} days - array of days\n\t         * @return {Array} collection\n\t         */\n\t\n\t    }, {\n\t        key: '_organizeWeeks',\n\t        value: function _organizeWeeks(days) {\n\t            return this._chunk(days);\n\t        }\n\t\n\t        /**\n\t         * Split an array into chunks and return an array of these chunks\n\t         *\n\t         * @param {Array} group\n\t         * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n\t         * @return {Array} chunks\n\t         */\n\t\n\t    }, {\n\t        key: '_chunk',\n\t        value: function _chunk(group) {\n\t            var groupsize = arguments.length <= 1 || arguments[1] === undefined ? this.WEEK_LENGTH : arguments[1];\n\t\n\t            var sets = [];\n\t            var i = 0;\n\t            var chunks = group.length / parseInt(groupsize, 10);\n\t\n\t            while (i < chunks) {\n\t                sets[i] = group.splice(0, groupsize);\n\t                i = i + 1;\n\t            }\n\t\n\t            return sets;\n\t        }\n\t\n\t        /**\n\t         * Pad a collection with blank tiles at the beginning\n\t         *\n\t         * @param {Array} collection\n\t         * @param {Integer} count\n\t         * @return {Array} paddedCollection\n\t         */\n\t\n\t    }, {\n\t        key: '_padBlankTiles',\n\t        value: function _padBlankTiles(collection, count) {\n\t            var direction = arguments.length <= 2 || arguments[2] === undefined ? 'left' : arguments[2];\n\t\n\t            var i = void 0;\n\t            var days = [];\n\t\n\t            // Create array\n\t            for (i = 0; i < count; i += 1) {\n\t                days.push({\n\t                    date: null\n\t                });\n\t            }\n\t\n\t            // If direction is 'right'\n\t            if (direction === 'right') {\n\t                // pad the end\n\t                return collection.concat(days);\n\t            } else if (direction === 'left') {\n\t                // otherwise pad the beginning\n\t                return days.concat(collection);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Pad the beginning of a week\n\t         *\n\t         * @param {String} startDate - date to to work back from\n\t         * @param {Array} count - how many days to pad\n\t         * @return {Array} pad\n\t         */\n\t\n\t    }, {\n\t        key: '_padDaysLeft',\n\t        value: function _padDaysLeft(startDate, count) {\n\t            var pad = [];\n\t            var missingDays = this._integerToArray(count);\n\t\n\t            // Loop through missing days\n\t            for (var day in missingDays) {\n\t                // How many days to go back\n\t                var subtraction = parseInt(day, 10) + 1;\n\t\n\t                // Find that day\n\t                var previous = moment(startDate).subtract(subtraction, 'days').toISOString();\n\t\n\t                // Add to the beginning of the array\n\t                pad.unshift({\n\t                    date: previous\n\t                });\n\t            }\n\t\n\t            return pad;\n\t        }\n\t\n\t        /**\n\t         * Pad the beginning of a week\n\t         *\n\t         * @param {Array} days\n\t         * @return {Array} pad\n\t         */\n\t\n\t    }, {\n\t        key: '_padWeekRight',\n\t        value: function _padWeekRight(days, startDay) {\n\t            var pad = [];\n\t            var week = 7;\n\t            var dayOfWeek = moment(startDay).day();\n\t\n\t            // weekdays are zero based\n\t            var neededDays = this._integerToArray(week - (dayOfWeek + 1));\n\t\n\t            for (var day in neededDays) {\n\t                pad.push({\n\t                    date: null\n\t                });\n\t            }\n\t\n\t            return this._integerToArray(neededDays);\n\t        }\n\t    }]);\n\t\n\t    return CalendarController;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html';\n\tvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=\\\"bc-calendar__day bc-calendar__day--header\\\" data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div data-ng-include=vm.getTemplateUrl()></div> </section>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html';\n\tvar html = \"<div class=bc-calendar__year data-ng-repeat=\\\"year in vm.bcCollection track by $index\\\"> <bc-month bc-collection=year></bc-month> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html';\n\tvar html = \"<div class=bc-calendar__month data-ng-repeat=\\\"month in vm.bcCollection track by $index\\\"> <bc-week bc-collection=month></bc-week> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html';\n\tvar html = \"<div class=bc-calendar__week data-ng-repeat=\\\"week in vm.bcCollection track by $index\\\"> <bc-day bc-collection=week></bc-day> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html';\n\tvar html = \"<span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\\n                   'bc-calendar__day--even': $even,\\n                   'bc-calendar__day--pad': !day.date }\\\" data-ng-click=vm.selectDate(day.date) data-ng-repeat=\\\"day in vm.bcCollection track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day.date) }\\\" datetime=\\\"{{ day.date | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day.date }}\\\" data-ng-if=\\\"day.date && day.date.length > 3\\\"> {{ day.date | date:'MM/dd/yy' }} <small> {{ day.date | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=!day.date></span> </span>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/test.html';\n\tvar html = \"<div> <h1>TEST</h1> <pre>\\n{{ vm  | json }}\\n</pre> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcMonthDirective = bcMonthDirective;\n\t\n\tvar _month = __webpack_require__(7);\n\t\n\tvar _month2 = _interopRequireDefault(_month);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcMonthDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _month2.default,\n\t        controller: function controller() {\n\t\n\t            /*\n\t             *console.log(this);\n\t             */\n\t\n\t        },\n\t        controllerAs: 'vm',\n\t        link: linkFunction\n\t    };\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, vm) {\n\t        console.log('In link: ', $scope.bcCollection);\n\t    }\n\t\n\t    return directive;\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcWeekDirective = bcWeekDirective;\n\t\n\tvar _week = __webpack_require__(8);\n\t\n\tvar _week2 = _interopRequireDefault(_week);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcWeekDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _week2.default,\n\t        controller: function controller() {\n\t\n\t            /*\n\t             *console.log(this.bcCollection);\n\t             */\n\t\n\t        },\n\t        controllerAs: 'vm',\n\t        link: linkFunction\n\t    };\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, vm) {\n\t        console.log('In link: ', $scope.bcCollection);\n\t    }\n\t\n\t    return directive;\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcDayDirective = bcDayDirective;\n\t\n\tvar _day = __webpack_require__(9);\n\t\n\tvar _day2 = _interopRequireDefault(_day);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcDayDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcCollection: '='\n\t        },\n\t        templateUrl: _day2.default,\n\t        controller: function controller() {\n\t\n\t            /*\n\t             *console.log(this.bcCollection);\n\t             */\n\t\n\t        },\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-json-calendar.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f30f90268595a54276dc\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _calendar = require('./calendar.provider');\n\nvar _calendar2 = require('./calendar.service');\n\nvar _calendar3 = require('./calendar.directive');\n\nvar _month = require('./month.directive');\n\nvar _week = require('./week.directive');\n\nvar _day = require('./day.directive');\n\nexports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective).directive('bcMonth', _month.bcMonthDirective).directive('bcWeek', _week.bcWeekDirective).directive('bcDay', _day.bcDayDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { bcCalendarConfig } from './calendar.provider';\nimport { bcCalendarService } from './calendar.service';\nimport { bcCalendarDirective } from './calendar.directive';\nimport { bcMonthDirective } from './month.directive';\nimport { bcWeekDirective } from './week.directive';\nimport { bcDayDirective } from './day.directive';\n\nexport default angular.module('bc.JsonCalendar', [])\n    .provider('bcCalendarConfig', bcCalendarConfig)\n    .service('bcCalendarService', bcCalendarService)\n    .directive('bcCalendar', bcCalendarDirective)\n    .directive('bcMonth', bcMonthDirective)\n    .directive('bcWeek', bcWeekDirective)\n    .directive('bcDay', bcDayDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\n    // Define defaults\n\n    function bcCalendarConfig() {\n        _classCallCheck(this, bcCalendarConfig);\n\n        // The calendar will begin with today\n        // TODO: Remove 'add'\n        this.startDate = moment(new Date().toISOString()).startOf('day').add(1, 'days');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n    }\n\n    _createClass(bcCalendarConfig, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return bcCalendarConfig;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.provider.js\n **/","export class bcCalendarConfig {\n\n    // Define defaults\n    constructor() {\n\n        // The calendar will begin with today\n        // TODO: Remove 'add'\n        this.startDate = moment(new Date().toISOString()).startOf('day').add(1, 'days');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: [\n                'S',\n                'M',\n                'T',\n                'W',\n                'T',\n                'F',\n                'S',\n            ],\n            abbreviation: [\n                'Sun',\n                'Mon',\n                'Tue',\n                'Wed',\n                'Thur',\n                'Fri',\n                'Sat',\n            ],\n            word: [\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Satday',\n            ],\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarService = exports.bcCalendarService = function () {\n  function bcCalendarService() {\n    'ngInject';\n\n    _classCallCheck(this, bcCalendarService);\n  }\n\n  /**\n   * Test if days match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n  /*\n   *    daysMatch(date1, date2) {\n   *\n   *        let match = false;\n   *        const day1 = moment(date1).date();\n   *        const day2 = moment(date2).date();\n   *\n   *        if (day1 === day2) {\n   *            match = true;\n   *        }\n   *\n   *        return match;\n   *\n   *    }\n   */\n\n  /**\n   * Test if months match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n\n\n  _createClass(bcCalendarService, [{\n    key: 'doMonthsMatch',\n    value: function doMonthsMatch(date1, date2) {\n      var match = false;\n      var month1 = moment(date1).month();\n      var month2 = moment(date2).month();\n\n      if (month1 === month2) {\n        match = true;\n      }\n\n      return match;\n    }\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'getDaysInMonth',\n    value: function getDaysInMonth(month, year) {\n\n      var date = new Date(year, month, 1);\n      var days = [];\n\n      while (date.getMonth() === month) {\n        days.push(moment(date).hour(0).minute(0).second(0).format());\n        date.setDate(date.getDate() + 1);\n      }\n\n      return days;\n    }\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'createDaysArray',\n    value: function createDaysArray(count) {\n\n      var i = void 0;\n      var days = [];\n\n      for (i = 0; i < count; i += 1) {\n        days.push(i);\n      }\n\n      return days;\n    }\n  }]);\n\n  return bcCalendarService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.service.js\n **/","export class bcCalendarService {\n\n    constructor(\n    ) {\n        'ngInject';\n\n    }\n\n\n\n\n    /**\n     * Test if days match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    /*\n     *    daysMatch(date1, date2) {\n     *\n     *        let match = false;\n     *        const day1 = moment(date1).date();\n     *        const day2 = moment(date2).date();\n     *\n     *        if (day1 === day2) {\n     *            match = true;\n     *        }\n     *\n     *        return match;\n     *\n     *    }\n     */\n\n\n    /**\n     * Test if months match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    doMonthsMatch(date1, date2) {\n        let match = false;\n        const month1 = moment(date1).month();\n        const month2 = moment(date2).month();\n\n        if (month1 === month2) {\n            match = true;\n        }\n\n        return match;\n\n    }\n\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n    getDaysInMonth(month, year) {\n\n        const date = new Date(year, month, 1);\n        const days = [];\n\n        while (date.getMonth() === month) {\n            days.push(moment(date).hour(0).minute(0).second(0).format());\n            date.setDate(date.getDate() + 1);\n        }\n\n        return days;\n\n    }\n\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    createDaysArray(count) {\n\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcCalendarDirective = bcCalendarDirective;\n\nvar _calendar = require('./calendar.controller');\n\nvar _calendar2 = require('./templates/calendar.html');\n\nvar _calendar3 = _interopRequireDefault(_calendar2);\n\nvar _year = require('./templates/year.html');\n\nvar _year2 = _interopRequireDefault(_year);\n\nvar _month = require('./templates/month.html');\n\nvar _month2 = _interopRequireDefault(_month);\n\nvar _week = require('./templates/week.html');\n\nvar _week2 = _interopRequireDefault(_week);\n\nvar _day = require('./templates/day.html');\n\nvar _day2 = _interopRequireDefault(_day);\n\nvar _test = require('./templates/test.html');\n\nvar _test2 = _interopRequireDefault(_test);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: turn these ^ into directives\n\nfunction bcCalendarDirective($compile) {\n    'ngInject';\n\n    // Define possible templates\n\n    var templates = {\n        year: _year2.default,\n        month: _month2.default,\n        week: _week2.default,\n        day: _day2.default\n    };\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [year|month|week|day] - defaults: month\n            bcCount: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?' },\n        // string [word|abbreviation|letter] - default: abbreviation\n        link: linkFunction,\n        templateUrl: _calendar3.default,\n        controller: _calendar.CalendarController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = function () {\n            return templates[vm.nestingDepth];\n        };\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.directive.js\n **/","import { CalendarController } from './calendar.controller';\nimport calendarTemplate from './templates/calendar.html';\nimport yearTemplate from './templates/year.html';\nimport monthTemplate from './templates/month.html';\nimport weekTemplate from './templates/week.html';\nimport dayTemplate from './templates/day.html';\nimport testTemplate from './templates/test.html';\n\n// TODO: turn these ^ into directives\n\nexport function bcCalendarDirective(\n    $compile\n) {\n    'ngInject';\n\n    // Define possible templates\n    const templates = {\n        year: yearTemplate,\n        month: monthTemplate,\n        week: weekTemplate,\n        day: dayTemplate,\n    };\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [year|month|week|day] - defaults: month\n            bcCount: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?', // string [word|abbreviation|letter] - default: abbreviation\n        },\n        link: linkFunction,\n        templateUrl: calendarTemplate,\n        controller: CalendarController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = () => {\n            return templates[vm.nestingDepth];\n        };\n\n    }\n\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CalendarController = exports.CalendarController = function () {\n    function CalendarController(bcCalendarConfig, bcCalendarService) {\n        'ngInject';\n\n        _classCallCheck(this, CalendarController);\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n    }\n\n    _createClass(CalendarController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Define today's date\n            this.today = this.bcCalendarConfig.startDate;\n\n            // DEFAULTS\n            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n            this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n            this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n            this.weekdays = this.bcWeekTitleFormat ? this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n            this.WEEK_LENGTH = 7;\n\n            // Define the calendar duration (or length)\n            this.calendarDuration = moment.duration(this.count, this.bcCalendarConfig.interval);\n\n            // Get the full count of days\n            this.calendarDays = this.calendarDuration.asDays();\n\n            // Get the current day of the month\n            this.todayDayOfMonth = moment(this.startDate).date();\n\n            // Get the current weekday\n            this.todayDayOfWeek = moment(this.startDate).day();\n\n            // Initially nothing is selected\n            this.selectedDate = null;\n\n            var JS_DATE = {\n                year: 2016,\n                month: 3,\n                day: 11\n            };\n\n            var needed = 100;\n            var tempDays = this._buildDays(needed, new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n            /*\n             *console.log('tempDays: ', tempDays);\n             */\n\n            this.bcCollection = this._organizeMonths(tempDays);\n\n            console.log('this.bcCalendar: ', this.bcCalendar);\n\n            /*\n             *console.log('tempMonths: ', tempMonths);\n             */\n\n            // Build the calendar JSON\n            /*\n             *this.calendar = this.build(this.startDate, 2);\n             */\n        }\n\n        /**\n         * Build calendar\n         * TODO: Should this be a service?\n         * TODO: Abstract this out so I can better build the needed collection. Abstract out each part,\n         * building days, organizing weeks/months/years\n         *\n         * @param {String} start\n         * @param {Integer} duration\n         * @return {Array} collection\n         */\n\n    }, {\n        key: 'build',\n        value: function build(start, duration) {\n            var collection = [];\n            var monthsBuilt = -1;\n\n            // Loop to create months\n            while (monthsBuilt < duration) {\n                // Increment counter\n                monthsBuilt = monthsBuilt + 1;\n\n                // If not the first month generated, the start of the month should be at the beginning\n                // rather than the start date\n                if (monthsBuilt !== 0) {\n                    start = moment(start).startOf('month');\n                }\n\n                var days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n                // If this is the FIRST month\n                if (monthsBuilt === 0) {\n                    // Create the missing days for the padding\n                    var missingDays = this._padDaysLeft(days, this.todayDayOfWeek);\n\n                    // Add to the BEGINNING of our existing array\n                    days = missingDays.concat(days);\n                }\n\n                // If this is the LAST month\n                if (monthsBuilt === duration) {\n                    // Create the missing days for the padding\n                    var _missingDays = this._padWeekRight(days, days[days.length - 1]);\n\n                    // Add to the END of our existing array\n                    Array.prototype.push.apply(days, _missingDays);\n                }\n\n                // Add month to collection\n                collection.push(days);\n            }\n\n            if (this.organizeWeeks) {\n                collection = this._organizeWeeks(collection);\n            }\n\n            /*\n             *console.log('collection: ', collection);\n             */\n\n            return collection;\n        }\n\n        /**\n         * Check to see if the day is prior to the current date\n         * This is used to disable the unselectable days\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isBeforeToday',\n        value: function isBeforeToday(date) {\n            return moment(date).isBefore(this.startDate);\n        }\n\n        /**\n         * Check to see if the day matches the current date\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isDayToday',\n        value: function isDayToday(date) {\n            return moment(date).isSame(this.startDate);\n        }\n    }, {\n        key: 'isDaySelected',\n        value: function isDaySelected() {}\n    }, {\n        key: 'selectDate',\n        value: function selectDate() {}\n    }, {\n        key: '_buildDays',\n        value: function _buildDays(limit, start) {\n            var counter = 0;\n            var days = [];\n            var day = void 0;\n\n            while (counter < limit) {\n                // Create the day\n                day = moment(start).add(counter, 'days').toISOString();\n\n                // Add to the array\n                days.push({\n                    date: day\n                });\n\n                // Increment our counter\n                counter = counter + 1;\n            }\n\n            /*\n             *console.warn('build days: ', limit, start, days);\n             */\n\n            return days;\n        }\n\n        /**\n         * Return an array of dates for the passed in month\n         *\n         * @param {Date} startDate\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_getDaysInMonth',\n        value: function _getDaysInMonth(startDate) {\n            var firstDate = moment(startDate);\n            var days = [];\n            var date = moment(startDate);\n\n            // As long as the month hasn't changed\n            while (moment(date).isSame(firstDate, 'month')) {\n                // Add the new day to our array\n                days.push(moment(date).startOf('day').format());\n\n                // Increment the date by one day\n                date = moment(date).add(1, 'days');\n            }\n\n            return days;\n        }\n\n        /**\n         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n         *\n         * @param {Integer} count\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_integerToArray',\n        value: function _integerToArray(count) {\n            var i = void 0;\n            var days = [];\n\n            for (i = 0; i < count; i += 1) {\n                days.push(i);\n            }\n\n            return days;\n        }\n\n        /**\n         * Organize by month\n         *\n         * @param {Array} allDays - An array of all days\n         * @return {Array} collection - days organized into weeks and months\n         */\n\n    }, {\n        key: '_organizeMonths',\n        value: function _organizeMonths(allDays) {\n            var calendar = [];\n            var collection = allDays;\n            var month = void 0;\n            var dayOfMonth = moment(collection[0].date).date();\n            var daysInMonth = moment(collection[0].date).daysInMonth();\n\n            // Pad the beginning of the month with any missing days\n            // If the first day is not the first day of the month\n            if (moment(collection[0].date).date() > 0) {\n                // Pull this month's days from the collection\n                month = collection.slice(0, daysInMonth - (dayOfMonth - 1));\n\n                // Fill the missing days from the month\n                var pad = this._padDaysLeft(month[0].date, dayOfMonth - 1);\n\n                // Combine with the existing array\n                collection = pad.concat(collection);\n            }\n\n            // Split into months\n            // As long as there are days left in the collection\n            while (collection.length > 0) {\n\n                // Get the day of the month for the first date of the collection eg. '24'\n                dayOfMonth = moment(collection[0].date).date();\n\n                // Determine how many days there are this month (total)\n                daysInMonth = moment(collection[0].date).daysInMonth();\n\n                // Pull this month's days from the collection\n                month = collection.splice(0, daysInMonth - (dayOfMonth - 1));\n\n                // How many weekdays are prior to the first day of this month?\n                var daysNeededAtBeginning = moment(month[0].date).day();\n\n                // If days are needed for the first week\n                if (daysNeededAtBeginning > 0) {\n                    // Pad with blank tiles so that the first day is lined up in the correct column\n                    month = this._padBlankTiles(month, daysNeededAtBeginning, 'left');\n                }\n\n                // How many weekdays are after the last day of the month?\n                // (remember: weeks are zero-based)\n                var daysNeededAtEnd = this.WEEK_LENGTH - (moment(month[month.length - 1].date).day() + 1);\n\n                // If days are needed for the last week\n                if (daysNeededAtEnd > 0) {\n                    // Pad with blank tiles so that the first day is lined up in the correct column\n                    month = this._padBlankTiles(month, daysNeededAtEnd, 'right');\n                }\n\n                // Organize and add to the calendar array\n                calendar.push(this._organizeWeeks(month));\n            }\n\n            console.info('RETURNING: ', calendar);\n            return calendar;\n        }\n\n        /**\n         * Organize collection of days into sub collections of weeks\n         *\n         * @param {Array} days - array of days\n         * @return {Array} collection\n         */\n\n    }, {\n        key: '_organizeWeeks',\n        value: function _organizeWeeks(days) {\n            return this._chunk(days);\n        }\n\n        /**\n         * Split an array into chunks and return an array of these chunks\n         *\n         * @param {Array} group\n         * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n         * @return {Array} chunks\n         */\n\n    }, {\n        key: '_chunk',\n        value: function _chunk(group) {\n            var groupsize = arguments.length <= 1 || arguments[1] === undefined ? this.WEEK_LENGTH : arguments[1];\n\n            var sets = [];\n            var i = 0;\n            var chunks = group.length / parseInt(groupsize, 10);\n\n            while (i < chunks) {\n                sets[i] = group.splice(0, groupsize);\n                i = i + 1;\n            }\n\n            return sets;\n        }\n\n        /**\n         * Pad a collection with blank tiles at the beginning\n         *\n         * @param {Array} collection\n         * @param {Integer} count\n         * @return {Array} paddedCollection\n         */\n\n    }, {\n        key: '_padBlankTiles',\n        value: function _padBlankTiles(collection, count) {\n            var direction = arguments.length <= 2 || arguments[2] === undefined ? 'left' : arguments[2];\n\n            var i = void 0;\n            var days = [];\n\n            // Create array\n            for (i = 0; i < count; i += 1) {\n                days.push({\n                    date: null\n                });\n            }\n\n            // If direction is 'right'\n            if (direction === 'right') {\n                // pad the end\n                return collection.concat(days);\n            } else if (direction === 'left') {\n                // otherwise pad the beginning\n                return days.concat(collection);\n            }\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {String} startDate - date to to work back from\n         * @param {Array} count - how many days to pad\n         * @return {Array} pad\n         */\n\n    }, {\n        key: '_padDaysLeft',\n        value: function _padDaysLeft(startDate, count) {\n            var pad = [];\n            var missingDays = this._integerToArray(count);\n\n            // Loop through missing days\n            for (var day in missingDays) {\n                // How many days to go back\n                var subtraction = parseInt(day, 10) + 1;\n\n                // Find that day\n                var previous = moment(startDate).subtract(subtraction, 'days').toISOString();\n\n                // Add to the beginning of the array\n                pad.unshift({\n                    date: previous\n                });\n            }\n\n            return pad;\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {Array} days\n         * @return {Array} pad\n         */\n\n    }, {\n        key: '_padWeekRight',\n        value: function _padWeekRight(days, startDay) {\n            var pad = [];\n            var week = 7;\n            var dayOfWeek = moment(startDay).day();\n\n            // weekdays are zero based\n            var neededDays = this._integerToArray(week - (dayOfWeek + 1));\n\n            for (var day in neededDays) {\n                pad.push({\n                    date: null\n                });\n            }\n\n            return this._integerToArray(neededDays);\n        }\n    }]);\n\n    return CalendarController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.controller.js\n **/","export class CalendarController {\n\n    constructor(\n        bcCalendarConfig, bcCalendarService\n    ) {\n        'ngInject';\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Define today's date\n        this.today = this.bcCalendarConfig.startDate;\n\n        // DEFAULTS\n        this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n        this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n        this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n        this.weekdays = this.bcWeekTitleFormat ?\n            this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] :\n            this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n        this.WEEK_LENGTH = 7;\n\n        // Define the calendar duration (or length)\n        this.calendarDuration =\n            moment.duration(this.count, this.bcCalendarConfig.interval);\n\n        // Get the full count of days\n        this.calendarDays = this.calendarDuration.asDays();\n\n\n        // Get the current day of the month\n        this.todayDayOfMonth = moment(this.startDate).date();\n\n        // Get the current weekday\n        this.todayDayOfWeek = moment(this.startDate).day();\n\n        // Initially nothing is selected\n        this.selectedDate = null;\n\n        const JS_DATE = {\n            year: 2016,\n            month: 3,\n            day: 11,\n        };\n\n        const needed = 100;\n        const tempDays = this._buildDays(needed,\n            new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n        /*\n         *console.log('tempDays: ', tempDays);\n         */\n\n        this.bcCollection = this._organizeMonths(tempDays);\n\n\n        console.log('this.bcCalendar: ', this.bcCalendar);\n\n        /*\n         *console.log('tempMonths: ', tempMonths);\n         */\n\n        // Build the calendar JSON\n        /*\n         *this.calendar = this.build(this.startDate, 2);\n         */\n\n    }\n\n\n    /**\n     * Build calendar\n     * TODO: Should this be a service?\n     * TODO: Abstract this out so I can better build the needed collection. Abstract out each part,\n     * building days, organizing weeks/months/years\n     *\n     * @param {String} start\n     * @param {Integer} duration\n     * @return {Array} collection\n     */\n    build(start, duration) {\n        let collection = [];\n        let monthsBuilt = -1;\n\n        // Loop to create months\n        while (monthsBuilt < duration) {\n            // Increment counter\n            monthsBuilt = monthsBuilt + 1;\n\n            // If not the first month generated, the start of the month should be at the beginning\n            // rather than the start date\n            if (monthsBuilt !== 0) {\n                start = moment(start).startOf('month');\n            }\n\n            let days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n            // If this is the FIRST month\n            if (monthsBuilt === 0) {\n                // Create the missing days for the padding\n                const missingDays = this._padDaysLeft(days, this.todayDayOfWeek);\n\n                // Add to the BEGINNING of our existing array\n                days = missingDays.concat(days);\n            }\n\n            // If this is the LAST month\n            if (monthsBuilt === duration) {\n                // Create the missing days for the padding\n                const missingDays = this._padWeekRight(days, days[days.length - 1]);\n\n                // Add to the END of our existing array\n                Array.prototype.push.apply(days, missingDays)\n            }\n\n            // Add month to collection\n            collection.push(days);\n        }\n\n        if (this.organizeWeeks) {\n            collection = this._organizeWeeks(collection);\n        }\n\n        /*\n         *console.log('collection: ', collection);\n         */\n\n        return collection;\n    }\n\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isBeforeToday(date) {\n        return moment(date).isBefore(this.startDate);\n    }\n\n\n    /**\n     * Check to see if the day matches the current date\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isDayToday(date) {\n        return moment(date).isSame(this.startDate);\n    }\n\n\n    isDaySelected() {\n    }\n\n\n    selectDate() {\n    }\n\n\n    _buildDays(limit, start) {\n        let counter = 0;\n        const days = [];\n        let day;\n\n        while (counter < limit) {\n            // Create the day\n            day = moment(start).add(counter, 'days').toISOString();\n\n            // Add to the array\n            days.push({\n                date: day,\n            });\n\n            // Increment our counter\n            counter = counter + 1;\n        }\n\n        /*\n         *console.warn('build days: ', limit, start, days);\n         */\n\n        return days;\n    }\n\n\n    /**\n     * Return an array of dates for the passed in month\n     *\n     * @param {Date} startDate\n     * @return {Array} days\n     */\n    _getDaysInMonth(startDate) {\n        const firstDate = moment(startDate);\n        const days = [];\n        let date = moment(startDate);\n\n        // As long as the month hasn't changed\n        while (moment(date).isSame(firstDate, 'month')) {\n            // Add the new day to our array\n            days.push(moment(date).startOf('day').format());\n\n            // Increment the date by one day\n            date = moment(date).add(1, 'days');\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    _integerToArray(count) {\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Organize by month\n     *\n     * @param {Array} allDays - An array of all days\n     * @return {Array} collection - days organized into weeks and months\n     */\n    _organizeMonths(allDays) {\n        const calendar = [];\n        let collection = allDays;\n        let month;\n        let dayOfMonth = moment(collection[0].date).date();\n        let daysInMonth = moment(collection[0].date).daysInMonth();\n\n        // Pad the beginning of the month with any missing days\n        // If the first day is not the first day of the month\n        if (moment(collection[0].date).date() > 0) {\n            // Pull this month's days from the collection\n            month = collection.slice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // Fill the missing days from the month\n            const pad = this._padDaysLeft(month[0].date, (dayOfMonth - 1));\n\n            // Combine with the existing array\n            collection = pad.concat(collection);\n        }\n\n\n        // Split into months\n        // As long as there are days left in the collection\n        while (collection.length > 0) {\n\n            // Get the day of the month for the first date of the collection eg. '24'\n            dayOfMonth = moment(collection[0].date).date();\n\n            // Determine how many days there are this month (total)\n            daysInMonth = moment(collection[0].date).daysInMonth();\n\n            // Pull this month's days from the collection\n            month = collection.splice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // How many weekdays are prior to the first day of this month?\n            const daysNeededAtBeginning = moment(month[0].date).day();\n\n            // If days are needed for the first week\n            if (daysNeededAtBeginning > 0) {\n                // Pad with blank tiles so that the first day is lined up in the correct column\n                month = this._padBlankTiles(month, daysNeededAtBeginning, 'left');\n            }\n\n            // How many weekdays are after the last day of the month?\n            // (remember: weeks are zero-based)\n            const daysNeededAtEnd =\n                this.WEEK_LENGTH - (moment(month[month.length - 1].date).day() + 1);\n\n            // If days are needed for the last week\n            if (daysNeededAtEnd > 0) {\n                // Pad with blank tiles so that the first day is lined up in the correct column\n                month = this._padBlankTiles(month, daysNeededAtEnd, 'right');\n            }\n\n            // Organize and add to the calendar array\n            calendar.push(this._organizeWeeks(month));\n\n        }\n\n\n        console.info('RETURNING: ', calendar);\n        return calendar;\n\n    }\n\n\n    /**\n     * Organize collection of days into sub collections of weeks\n     *\n     * @param {Array} days - array of days\n     * @return {Array} collection\n     */\n    _organizeWeeks(days) {\n        return this._chunk(days);\n    }\n\n\n    /**\n     * Split an array into chunks and return an array of these chunks\n     *\n     * @param {Array} group\n     * @param {Integer} groupsize - Chunk size. Defaults to 7 (one week).\n     * @return {Array} chunks\n     */\n    _chunk(group, groupsize = this.WEEK_LENGTH) {\n        const sets = [];\n        let i = 0;\n        const chunks = group.length / parseInt(groupsize, 10);\n\n        while(i < chunks) {\n            sets[i] = group.splice(0, groupsize);\n            i = i + 1;\n        }\n\n        return sets;\n    }\n\n\n    /**\n     * Pad a collection with blank tiles at the beginning\n     *\n     * @param {Array} collection\n     * @param {Integer} count\n     * @return {Array} paddedCollection\n     */\n    _padBlankTiles(collection, count, direction = 'left') {\n        let i;\n        const days = [];\n\n        // Create array\n        for (i = 0; i < count; i += 1) {\n            days.push({\n                date: null,\n            });\n        }\n\n        // If direction is 'right'\n        if (direction === 'right') {\n            // pad the end\n            return collection.concat(days);\n        } else if (direction === 'left') {\n            // otherwise pad the beginning\n            return days.concat(collection);\n        }\n\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {String} startDate - date to to work back from\n     * @param {Array} count - how many days to pad\n     * @return {Array} pad\n     */\n    _padDaysLeft(startDate, count) {\n        const pad = [];\n        const missingDays = this._integerToArray(count);\n\n        // Loop through missing days\n        for (const day in missingDays) {\n            // How many days to go back\n            const subtraction = parseInt(day, 10) + 1;\n\n            // Find that day\n            const previous = moment(startDate).subtract((subtraction), 'days').toISOString();\n\n            // Add to the beginning of the array\n            pad.unshift({\n                date: previous,\n            });\n        }\n\n        return pad;\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {Array} days\n     * @return {Array} pad\n     */\n    _padWeekRight(days, startDay) {\n        const pad =[];\n        const week = 7;\n        const dayOfWeek = moment(startDay).day();\n\n        // weekdays are zero based\n        const neededDays = this._integerToArray(week - (dayOfWeek + 1));\n\n        for (const day in neededDays) {\n            pad.push({\n                date: null,\n            });\n        }\n\n        return this._integerToArray(neededDays);\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.controller.js\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html';\nvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=\\\"bc-calendar__day bc-calendar__day--header\\\" data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div data-ng-include=vm.getTemplateUrl()></div> </section>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/calendar.html\n ** module id = 5\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html';\nvar html = \"<div class=bc-calendar__year data-ng-repeat=\\\"year in vm.bcCollection track by $index\\\"> <bc-month bc-collection=year></bc-month> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/year.html\n ** module id = 6\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html';\nvar html = \"<div class=bc-calendar__month data-ng-repeat=\\\"month in vm.bcCollection track by $index\\\"> <bc-week bc-collection=month></bc-week> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/month.html\n ** module id = 7\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html';\nvar html = \"<div class=bc-calendar__week data-ng-repeat=\\\"week in vm.bcCollection track by $index\\\"> <bc-day bc-collection=week></bc-day> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/week.html\n ** module id = 8\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html';\nvar html = \"<span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\\n                   'bc-calendar__day--even': $even,\\n                   'bc-calendar__day--pad': !day.date }\\\" data-ng-click=vm.selectDate(day.date) data-ng-repeat=\\\"day in vm.bcCollection track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day.date) }\\\" datetime=\\\"{{ day.date | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day.date }}\\\" data-ng-if=\\\"day.date && day.date.length > 3\\\"> {{ day.date | date:'MM/dd/yy' }} <small> {{ day.date | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=!day.date></span> </span>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/day.html\n ** module id = 9\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/test.html';\nvar html = \"<div> <h1>TEST</h1> <pre>\\n{{ vm  | json }}\\n</pre> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/test.html\n ** module id = 10\n ** module chunks = 0 1\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcMonthDirective = bcMonthDirective;\n\nvar _month = require('./templates/month.html');\n\nvar _month2 = _interopRequireDefault(_month);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcMonthDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _month2.default,\n        controller: function controller() {\n\n            /*\n             *console.log(this);\n             */\n\n        },\n        controllerAs: 'vm',\n        link: linkFunction\n    };\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('In link: ', $scope.bcCollection);\n    }\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/month.directive.js\n **/","import monthTemplate from './templates/month.html';\n\nexport function bcMonthDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: monthTemplate,\n        controller: () => {\n\n            /*\n             *console.log(this);\n             */\n\n        },\n        controllerAs: 'vm',\n        link: linkFunction,\n    };\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('In link: ', $scope.bcCollection);\n    }\n\n\n    return directive;\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/month.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcWeekDirective = bcWeekDirective;\n\nvar _week = require('./templates/week.html');\n\nvar _week2 = _interopRequireDefault(_week);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcWeekDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _week2.default,\n        controller: function controller() {\n\n            /*\n             *console.log(this.bcCollection);\n             */\n\n        },\n        controllerAs: 'vm',\n        link: linkFunction\n    };\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('In link: ', $scope.bcCollection);\n    }\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/week.directive.js\n **/","import weekTemplate from './templates/week.html';\n\nexport function bcWeekDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: weekTemplate,\n        controller: () => {\n\n            /*\n             *console.log(this.bcCollection);\n             */\n\n        },\n        controllerAs: 'vm',\n        link: linkFunction,\n    };\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('In link: ', $scope.bcCollection);\n    }\n\n\n    return directive;\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/week.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcDayDirective = bcDayDirective;\n\nvar _day = require('./templates/day.html');\n\nvar _day2 = _interopRequireDefault(_day);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcDayDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '='\n        },\n        templateUrl: _day2.default,\n        controller: function controller() {\n\n            /*\n             *console.log(this.bcCollection);\n             */\n\n        },\n        controllerAs: 'vm'\n    };\n\n    return directive;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/day.directive.js\n **/","import dayTemplate from './templates/day.html';\n\nexport function bcDayDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcCollection: '=',\n        },\n        templateUrl: dayTemplate,\n        controller: () => {\n\n            /*\n             *console.log(this.bcCollection);\n             */\n\n        },\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/day.directive.js\n **/"],"sourceRoot":""}