{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///angular-json-calendar.min.js","webpack:///webpack/bootstrap 8c2f548312f3e4d5a8d8?adf2","webpack:///./src/index.js?9552","webpack:///./src/index.js?1f39*","webpack:///./src/calendar.provider.js?46b0","webpack:///./src/calendar.provider.js?b2f7*","webpack:///./src/calendar.service.js?2639","webpack:///./src/calendar.service.js?8728*","webpack:///./src/calendar.directive.js?14e7","webpack:///./src/calendar.directive.js?d4aa*","webpack:///./src/calendar.controller.js?3eb8","webpack:///./src/calendar.controller.js?6b53*","webpack:///./src/calendar.html?add9"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Object","defineProperty","value","_calendar","_calendar2","_calendar3","angular","provider","bcCalendarConfig","service","bcCalendarService","directive","bcCalendarDirective","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","startDate","moment","Date","toISOString","startOf","interval","count","weekdayStyle","letter","abbreviation","word","wordType","organizeWeeks","date1","date2","match","month1","month","month2","year","date","days","getMonth","push","hour","minute","second","format","setDate","getDate","_interopRequireDefault","obj","__esModule","default","linkFunction","$scope","$element","$attrs","vm","restrict","replace","scope","bindToController","bcStartDate","bcInterval","bcCount","bcWordType","bcOrganizeWeeks","templateUrl","link","controller","CalendarController","controllerAs","_activate","$inject","today","parseInt","weekdays","calendarDuration","duration","calendarDays","asDays","todayDayOfMonth","todayDayOfWeek","day","selectedDate","calendar","build","start","collection","monthsBuilt","_getDaysInMonth","add","missingDays","_padWeekLeft","concat","_organizeWeeks","console","log","isBefore","isSame","firstDate","_this","weekLength","forEach","index","_chunk","group","groupsize","sets","chunks","splice","startDay","pad","_integerToArray","subtraction","previous","subtract","unshift","path","html","window","run","put"],"mappings":"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","file":"angular-json-calendar.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _calendar = __webpack_require__(1);\n\t\n\tvar _calendar2 = __webpack_require__(2);\n\t\n\tvar _calendar3 = __webpack_require__(3);\n\t\n\texports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\t\n\t    // Define defaults\n\t\n\t    function bcCalendarConfig() {\n\t        _classCallCheck(this, bcCalendarConfig);\n\t\n\t        // The calendar will begin with today\n\t        this.startDate = moment(new Date().toISOString()).startOf('day');\n\t\n\t        // The default interval type [days|weeks|months]\n\t        this.interval = 'months';\n\t\n\t        // How many of the interval type should be generated\n\t        this.count = 1;\n\t\n\t        // Define the different possible representations of the weekday\n\t        this.weekdayStyle = {\n\t            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n\t            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n\t            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n\t        };\n\t\n\t        // Set the default word type (M vs Mon vs Monday)\n\t        this.wordType = 'abbreviation';\n\t\n\t        // Should days be organized by week?\n\t        this.organizeWeeks = true;\n\t    }\n\t\n\t    _createClass(bcCalendarConfig, [{\n\t        key: '$get',\n\t        value: function $get() {\n\t            return this;\n\t        }\n\t    }]);\n\t\n\t    return bcCalendarConfig;\n\t}();\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar bcCalendarService = exports.bcCalendarService = function () {\n\t  function bcCalendarService() {\n\t    'ngInject';\n\t\n\t    _classCallCheck(this, bcCalendarService);\n\t  }\n\t\n\t  /**\n\t   * Test if days match\n\t   *\n\t   * @param {Date} date1\n\t   * @param {Date} date2\n\t   * @return {Bool} match\n\t   */\n\t  /*\n\t   *    daysMatch(date1, date2) {\n\t   *\n\t   *        let match = false;\n\t   *        const day1 = moment(date1).date();\n\t   *        const day2 = moment(date2).date();\n\t   *\n\t   *        if (day1 === day2) {\n\t   *            match = true;\n\t   *        }\n\t   *\n\t   *        return match;\n\t   *\n\t   *    }\n\t   */\n\t\n\t  /**\n\t   * Test if months match\n\t   *\n\t   * @param {Date} date1\n\t   * @param {Date} date2\n\t   * @return {Bool} match\n\t   */\n\t\n\t\n\t  _createClass(bcCalendarService, [{\n\t    key: 'doMonthsMatch',\n\t    value: function doMonthsMatch(date1, date2) {\n\t      var match = false;\n\t      var month1 = moment(date1).month();\n\t      var month2 = moment(date2).month();\n\t\n\t      if (month1 === month2) {\n\t        match = true;\n\t      }\n\t\n\t      return match;\n\t    }\n\t\n\t    /**\n\t     * Test if day is today\n\t     *\n\t     * @param {Date} date - The date to check\n\t     * @param {Date} today - The day to check against\n\t     * @return {Bool} isToday\n\t     */\n\t    /*\n\t     *    isToday(date, today) {\n\t     *\n\t     *        today = moment(today).startOf('day');\n\t     *\n\t     *        const dayToTest = moment(date).startOf('day');\n\t     *        const isToday = today.diff(dayToTest) ? false : true;\n\t     *\n\t     *        return isToday;\n\t     *\n\t     *    }\n\t     */\n\t\n\t    /**\n\t     * Update the date with the current time\n\t     *\n\t     * @param {Date} date\n\t     * @return {Date} updatedDate\n\t     */\n\t    /*\n\t     *    updateTime(date) {\n\t     *\n\t     *        let updatedDate;\n\t     *\n\t     *        // Get the current date\n\t     *        const jsDate = new Date().toISOString();\n\t     *        const currentHour = moment(jsDate).hour();\n\t     *        const currentMinutes = moment(jsDate).minutes();\n\t     *\n\t     *        // Zero out seconds and milliseconds\n\t     *        updatedDate = moment(date).set({\n\t     *            hour: currentHour,\n\t     *            minutes: currentMinutes,\n\t     *            second: 0,\n\t     *            millisecond: 0,\n\t     *        }).format();\n\t     *\n\t     *        return updatedDate;\n\t     *\n\t     *    }\n\t     */\n\t\n\t    /**\n\t     * Return an array of days for the passed in month\n\t     *\n\t     * @param {Integer} month\n\t     * @param {Integer} year\n\t     * @return {Array} days\n\t     */\n\t\n\t  }, {\n\t    key: 'getDaysInMonth',\n\t    value: function getDaysInMonth(month, year) {\n\t\n\t      var date = new Date(year, month, 1);\n\t      var days = [];\n\t\n\t      while (date.getMonth() === month) {\n\t        days.push(moment(date).hour(0).minute(0).second(0).format());\n\t        date.setDate(date.getDate() + 1);\n\t      }\n\t\n\t      return days;\n\t    }\n\t\n\t    /**\n\t     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n\t     *\n\t     * @param {Integer} count\n\t     * @return {Array} days\n\t     */\n\t\n\t  }, {\n\t    key: 'createDaysArray',\n\t    value: function createDaysArray(count) {\n\t\n\t      var i = void 0;\n\t      var days = [];\n\t\n\t      for (i = 0; i < count; i += 1) {\n\t        days.push(i);\n\t      }\n\t\n\t      return days;\n\t    }\n\t  }]);\n\t\n\t  return bcCalendarService;\n\t}();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.bcCalendarDirective = bcCalendarDirective;\n\t\n\tvar _calendar = __webpack_require__(4);\n\t\n\tvar _calendar2 = __webpack_require__(5);\n\t\n\tvar _calendar3 = _interopRequireDefault(_calendar2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction bcCalendarDirective() {\n\t    'ngInject';\n\t\n\t    var directive = {\n\t        restrict: 'E',\n\t        replace: true,\n\t        scope: {},\n\t        bindToController: {\n\t            bcStartDate: '@?', // date - default to today\n\t            bcInterval: '@?', // string days|weeks|months - defaults to month\n\t            bcCount: '@?', // integer - default to 1\n\t            bcWordType: '@?', // string - default to 'abbreviation'\n\t            bcOrganizeWeeks: '@?' },\n\t        // bool - default to true\n\t        templateUrl: _calendar3.default,\n\t        link: linkFunction,\n\t        controller: _calendar.CalendarController,\n\t        controllerAs: 'vm'\n\t    };\n\t\n\t    return directive;\n\t\n\t    /**\n\t     * Link\n\t     */\n\t    function linkFunction($scope, $element, $attrs, vm) {}\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar CalendarController = exports.CalendarController = function () {\n\t    CalendarController.$inject = [\"bcCalendarConfig\", \"bcCalendarService\"];\n\t    function CalendarController(bcCalendarConfig, bcCalendarService) {\n\t        'ngInject';\n\t\n\t        _classCallCheck(this, CalendarController);\n\t\n\t        this.bcCalendarConfig = bcCalendarConfig;\n\t        this.bcCalendarService = bcCalendarService;\n\t\n\t        this._activate();\n\t    }\n\t\n\t    _createClass(CalendarController, [{\n\t        key: '_activate',\n\t        value: function _activate() {\n\t            // Define today's date\n\t            this.today = this.bcCalendarConfig.startDate;\n\t\n\t            // DEFAULTS\n\t            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n\t            this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n\t            this.interval = this.bcInterval || this.bcCalendarConfig.interval;\n\t            this.weekdays = this.bcWordType ? this.bcCalendarConfig.weekdayStyle[this.bcWordType] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.wordType];\n\t            this.organizeWeeks = this.bcOrganizeWeeks || this.bcCalendarConfig.organizeWeeks;\n\t\n\t            // Define the calendar duration (or length)\n\t            this.calendarDuration = moment.duration(this.count, this.bcCalendarConfig.interval);\n\t\n\t            // Get the full count of days\n\t            this.calendarDays = this.calendarDuration.asDays();\n\t\n\t            // Get the current day of the month\n\t            this.todayDayOfMonth = moment(this.startDate).date();\n\t\n\t            // Get the current weekday\n\t            this.todayDayOfWeek = moment(this.startDate).day();\n\t\n\t            // Initially nothing is selected\n\t            this.selectedDate = null;\n\t\n\t            var DEV_DATE = {\n\t                year: 2016,\n\t                month: 3,\n\t                day: 5\n\t            };\n\t\n\t            // loop through `interval` for `count` times\n\t            //\n\t            // always are building out days no matter the interval\n\t            // interval is merely to simplify math for the end user\n\t            //\n\t            // if ask for 2 days\n\t            //   collection is array with single item (month)\n\t            //   month is array with single item (week)\n\t            //   if weeks are turned ON\n\t            //     week is array with 7 items (days) (backfilled for missing days)\n\t            //   if weeks are turned OFF\n\t            //     week is array with 2 items (days)\n\t            //\n\t            // if ask for 2 weeks\n\t            //   collection is array with single item (month)\n\t            //   month is array with 2 items (weeks)\n\t            //   weeks are arrays with 7 items (days)\n\t            //   if weeks are turned ON\n\t            //     backfill for missing days\n\t            //\n\t            //\n\t            // assume 'month'\n\t            // buildMonth(start month)\n\t            //   build out month json\n\t            //     get all days\n\t            //     formatMonth\n\t            //       loop through putting weeks into arrays\n\t            //       final collection looks like:\n\t            //         - collection is array of months\n\t            //         - months is an array of weeks\n\t            //         - weeks is an array of days\n\t            //   store month somewhere\n\t            //   increment counter by 1\n\t            //   if still less than this.count\n\t            //     call buildMonth again with next month\n\t            //\n\t\n\t            this.calendar = this.build(this.startDate, 2);\n\t        }\n\t\n\t        /**\n\t         * Build calendar\n\t         * TODO: Should this be a service?\n\t         *\n\t         * @param {String} start\n\t         * @param {Integer} duration\n\t         * @return {Array} collection\n\t         */\n\t\n\t    }, {\n\t        key: 'build',\n\t        value: function build(start, duration) {\n\t            var collection = [];\n\t            var monthsBuilt = 0;\n\t\n\t            // Loop to create months\n\t            while (monthsBuilt < duration) {\n\t                var days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\t\n\t                // If this is the first month\n\t                if (monthsBuilt === 0) {\n\t                    // Create the missing days for the padding\n\t                    var missingDays = this._padWeekLeft(days, this.todayDayOfWeek);\n\t\n\t                    // Add to the beginning of our existing array\n\t                    days = missingDays.concat(days);\n\t                }\n\t\n\t                // Add month to collection\n\t                collection.push(days);\n\t\n\t                // Increment counter\n\t                monthsBuilt = monthsBuilt + 1;\n\t            }\n\t\n\t            if (this.organizeWeeks) {\n\t                collection = this._organizeWeeks(collection);\n\t            }\n\t\n\t            console.log('collection: ', collection);\n\t\n\t            return collection;\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day is prior to the current date\n\t         * This is used to disable the unselectable days\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isBeforeToday',\n\t        value: function isBeforeToday(date) {\n\t            return moment(date).isBefore(this.startDate);\n\t        }\n\t\n\t        /**\n\t         * Check to see if the day matches the current date\n\t         *\n\t         * @param {Date} day\n\t         * @return {Bool}\n\t         */\n\t\n\t    }, {\n\t        key: 'isDayToday',\n\t        value: function isDayToday(date) {\n\t            return moment(date).isSame(this.startDate);\n\t        }\n\t    }, {\n\t        key: 'isDaySelected',\n\t        value: function isDaySelected() {}\n\t    }, {\n\t        key: 'selectDate',\n\t        value: function selectDate() {}\n\t\n\t        /**\n\t         * Return an array of dates for the passed in month\n\t         *\n\t         * @param {Date} startDate\n\t         * @return {Array} days\n\t         */\n\t\n\t    }, {\n\t        key: '_getDaysInMonth',\n\t        value: function _getDaysInMonth(startDate) {\n\t            var firstDate = moment(startDate);\n\t            var days = [];\n\t            var date = moment(startDate);\n\t\n\t            // As long as the month hasn't changed\n\t            while (moment(date).isSame(firstDate, 'month')) {\n\t                // Add the new day to our array\n\t                days.push(moment(date).startOf('day').format());\n\t\n\t                // Increment the date by one day\n\t                date = moment(date).add(1, 'days');\n\t            }\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n\t         *\n\t         * @param {Integer} count\n\t         * @return {Array} days\n\t         */\n\t\n\t    }, {\n\t        key: '_integerToArray',\n\t        value: function _integerToArray(count) {\n\t            var i = void 0;\n\t            var days = [];\n\t\n\t            for (i = 0; i < count; i += 1) {\n\t                days.push(i);\n\t            }\n\t\n\t            return days;\n\t        }\n\t\n\t        /**\n\t         * Organize collection of days into sub collections of weeks\n\t         *\n\t         * @param {Array} collection\n\t         * @return {Array} collection\n\t         */\n\t\n\t    }, {\n\t        key: '_organizeWeeks',\n\t        value: function _organizeWeeks(collection) {\n\t            var _this = this;\n\t\n\t            var weekLength = 7;\n\t\n\t            collection.forEach(function (value, index) {\n\t                collection[index] = _this._chunk(value, weekLength);\n\t            });\n\t\n\t            return collection;\n\t        }\n\t\n\t        /**\n\t         * Split an array into chunks and return an array of these chunks\n\t         *\n\t         * @param {Array} group\n\t         * @param {Integer} groupsize\n\t         * @return {Array} chunks\n\t         */\n\t\n\t    }, {\n\t        key: '_chunk',\n\t        value: function _chunk(group, groupsize) {\n\t            var sets = [];\n\t            var i = 0;\n\t            var chunks = group.length / parseInt(groupsize, 10);\n\t\n\t            while (i < chunks) {\n\t                sets[i] = group.splice(0, groupsize);\n\t                i = i + 1;\n\t            }\n\t\n\t            return sets;\n\t        }\n\t\n\t        /**\n\t         * Pad the beginning of a week\n\t         *\n\t         * @param {Array} days\n\t         * @return {Array} pad\n\t         */\n\t\n\t    }, {\n\t        key: '_padWeekLeft',\n\t        value: function _padWeekLeft(days, startDay) {\n\t            var pad = [];\n\t            var missingDays = this._integerToArray(startDay);\n\t\n\t            // Loop through missing days\n\t            for (var day in missingDays) {\n\t                // How many days to go back\n\t                var subtraction = parseInt(day, 10) + 1;\n\t\n\t                // Find that day\n\t                var previous = moment(this.startDate).subtract(subtraction, 'days').toISOString();\n\t                // Add to the beginning of the array\n\t                pad.unshift(previous);\n\t            }\n\t\n\t            return pad;\n\t        }\n\t    }]);\n\t\n\t    return CalendarController;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tvar path = '/Users/bc/Code/open-source/angular-json-calendar/src/calendar.html';\n\tvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=bc-calendar__day data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div class=bc-calendar__month data-ng-repeat=\\\"month in vm.calendar track by $index\\\"> <div class=bc-calendar__week data-ng-repeat=\\\"week in month track by $index\\\"> <span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day),\\n                         'bc-calendar__day--today': vm.isDayToday(day) }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in week track by $index\\\"> <time class=bc-calendar__time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day) }\\\" datetime=\\\"{{ day | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day }}\\\"> {{ day | date:'EEE dd' }} </time> </span> </div> </div> </section>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** angular-json-calendar.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8c2f548312f3e4d5a8d8\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _calendar = require('./calendar.provider');\n\nvar _calendar2 = require('./calendar.service');\n\nvar _calendar3 = require('./calendar.directive');\n\nexports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { bcCalendarConfig } from './calendar.provider';\nimport { bcCalendarService } from './calendar.service';\nimport { bcCalendarDirective } from './calendar.directive';\n\nexport default angular.module('bc.JsonCalendar', [])\n    .provider('bcCalendarConfig', bcCalendarConfig)\n    .service('bcCalendarService', bcCalendarService)\n    .directive('bcCalendar', bcCalendarDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\n    // Define defaults\n\n    function bcCalendarConfig() {\n        _classCallCheck(this, bcCalendarConfig);\n\n        // The calendar will begin with today\n        this.startDate = moment(new Date().toISOString()).startOf('day');\n\n        // The default interval type [days|weeks|months]\n        this.interval = 'months';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.wordType = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n    }\n\n    _createClass(bcCalendarConfig, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return bcCalendarConfig;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.provider.js\n **/","export class bcCalendarConfig {\n\n    // Define defaults\n    constructor() {\n\n        // The calendar will begin with today\n        this.startDate = moment(new Date().toISOString()).startOf('day');\n\n        // The default interval type [days|weeks|months]\n        this.interval = 'months';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: [\n                'S',\n                'M',\n                'T',\n                'W',\n                'T',\n                'F',\n                'S',\n            ],\n            abbreviation: [\n                'Sun',\n                'Mon',\n                'Tue',\n                'Wed',\n                'Thur',\n                'Fri',\n                'Sat',\n            ],\n            word: [\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Satday',\n            ],\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.wordType = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarService = exports.bcCalendarService = function () {\n  function bcCalendarService() {\n    'ngInject';\n\n    _classCallCheck(this, bcCalendarService);\n  }\n\n  /**\n   * Test if days match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n  /*\n   *    daysMatch(date1, date2) {\n   *\n   *        let match = false;\n   *        const day1 = moment(date1).date();\n   *        const day2 = moment(date2).date();\n   *\n   *        if (day1 === day2) {\n   *            match = true;\n   *        }\n   *\n   *        return match;\n   *\n   *    }\n   */\n\n  /**\n   * Test if months match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n\n\n  _createClass(bcCalendarService, [{\n    key: 'doMonthsMatch',\n    value: function doMonthsMatch(date1, date2) {\n      var match = false;\n      var month1 = moment(date1).month();\n      var month2 = moment(date2).month();\n\n      if (month1 === month2) {\n        match = true;\n      }\n\n      return match;\n    }\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'getDaysInMonth',\n    value: function getDaysInMonth(month, year) {\n\n      var date = new Date(year, month, 1);\n      var days = [];\n\n      while (date.getMonth() === month) {\n        days.push(moment(date).hour(0).minute(0).second(0).format());\n        date.setDate(date.getDate() + 1);\n      }\n\n      return days;\n    }\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'createDaysArray',\n    value: function createDaysArray(count) {\n\n      var i = void 0;\n      var days = [];\n\n      for (i = 0; i < count; i += 1) {\n        days.push(i);\n      }\n\n      return days;\n    }\n  }]);\n\n  return bcCalendarService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.service.js\n **/","export class bcCalendarService {\n\n    constructor(\n    ) {\n        'ngInject';\n\n    }\n\n\n\n\n    /**\n     * Test if days match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    /*\n     *    daysMatch(date1, date2) {\n     *\n     *        let match = false;\n     *        const day1 = moment(date1).date();\n     *        const day2 = moment(date2).date();\n     *\n     *        if (day1 === day2) {\n     *            match = true;\n     *        }\n     *\n     *        return match;\n     *\n     *    }\n     */\n\n\n    /**\n     * Test if months match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    doMonthsMatch(date1, date2) {\n        let match = false;\n        const month1 = moment(date1).month();\n        const month2 = moment(date2).month();\n\n        if (month1 === month2) {\n            match = true;\n        }\n\n        return match;\n\n    }\n\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n    getDaysInMonth(month, year) {\n\n        const date = new Date(year, month, 1);\n        const days = [];\n\n        while (date.getMonth() === month) {\n            days.push(moment(date).hour(0).minute(0).second(0).format());\n            date.setDate(date.getDate() + 1);\n        }\n\n        return days;\n\n    }\n\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    createDaysArray(count) {\n\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcCalendarDirective = bcCalendarDirective;\n\nvar _calendar = require('./calendar.controller');\n\nvar _calendar2 = require('./calendar.html');\n\nvar _calendar3 = _interopRequireDefault(_calendar2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcCalendarDirective() {\n    'ngInject';\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcInterval: '@?', // string days|weeks|months - defaults to month\n            bcCount: '@?', // integer - default to 1\n            bcWordType: '@?', // string - default to 'abbreviation'\n            bcOrganizeWeeks: '@?' },\n        // bool - default to true\n        templateUrl: _calendar3.default,\n        link: linkFunction,\n        controller: _calendar.CalendarController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.directive.js\n **/","import { CalendarController } from './calendar.controller';\nimport template from './calendar.html';\n\nexport function bcCalendarDirective(\n) {\n    'ngInject';\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcInterval: '@?', // string days|weeks|months - defaults to month\n            bcCount: '@?', // integer - default to 1\n            bcWordType: '@?', // string - default to 'abbreviation'\n            bcOrganizeWeeks: '@?', // bool - default to true\n        },\n        templateUrl: template,\n        link: linkFunction,\n        controller: CalendarController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n\n    }\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CalendarController = exports.CalendarController = function () {\n    function CalendarController(bcCalendarConfig, bcCalendarService) {\n        'ngInject';\n\n        _classCallCheck(this, CalendarController);\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n    }\n\n    _createClass(CalendarController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Define today's date\n            this.today = this.bcCalendarConfig.startDate;\n\n            // DEFAULTS\n            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n            this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n            this.interval = this.bcInterval || this.bcCalendarConfig.interval;\n            this.weekdays = this.bcWordType ? this.bcCalendarConfig.weekdayStyle[this.bcWordType] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.wordType];\n            this.organizeWeeks = this.bcOrganizeWeeks || this.bcCalendarConfig.organizeWeeks;\n\n            // Define the calendar duration (or length)\n            this.calendarDuration = moment.duration(this.count, this.bcCalendarConfig.interval);\n\n            // Get the full count of days\n            this.calendarDays = this.calendarDuration.asDays();\n\n            // Get the current day of the month\n            this.todayDayOfMonth = moment(this.startDate).date();\n\n            // Get the current weekday\n            this.todayDayOfWeek = moment(this.startDate).day();\n\n            // Initially nothing is selected\n            this.selectedDate = null;\n\n            var DEV_DATE = {\n                year: 2016,\n                month: 3,\n                day: 5\n            };\n\n            // loop through `interval` for `count` times\n            //\n            // always are building out days no matter the interval\n            // interval is merely to simplify math for the end user\n            //\n            // if ask for 2 days\n            //   collection is array with single item (month)\n            //   month is array with single item (week)\n            //   if weeks are turned ON\n            //     week is array with 7 items (days) (backfilled for missing days)\n            //   if weeks are turned OFF\n            //     week is array with 2 items (days)\n            //\n            // if ask for 2 weeks\n            //   collection is array with single item (month)\n            //   month is array with 2 items (weeks)\n            //   weeks are arrays with 7 items (days)\n            //   if weeks are turned ON\n            //     backfill for missing days\n            //\n            //\n            // assume 'month'\n            // buildMonth(start month)\n            //   build out month json\n            //     get all days\n            //     formatMonth\n            //       loop through putting weeks into arrays\n            //       final collection looks like:\n            //         - collection is array of months\n            //         - months is an array of weeks\n            //         - weeks is an array of days\n            //   store month somewhere\n            //   increment counter by 1\n            //   if still less than this.count\n            //     call buildMonth again with next month\n            //\n\n            this.calendar = this.build(this.startDate, 2);\n        }\n\n        /**\n         * Build calendar\n         * TODO: Should this be a service?\n         *\n         * @param {String} start\n         * @param {Integer} duration\n         * @return {Array} collection\n         */\n\n    }, {\n        key: 'build',\n        value: function build(start, duration) {\n            var collection = [];\n            var monthsBuilt = 0;\n\n            // Loop to create months\n            while (monthsBuilt < duration) {\n                var days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n                // If this is the first month\n                if (monthsBuilt === 0) {\n                    // Create the missing days for the padding\n                    var missingDays = this._padWeekLeft(days, this.todayDayOfWeek);\n\n                    // Add to the beginning of our existing array\n                    days = missingDays.concat(days);\n                }\n\n                // Add month to collection\n                collection.push(days);\n\n                // Increment counter\n                monthsBuilt = monthsBuilt + 1;\n            }\n\n            if (this.organizeWeeks) {\n                collection = this._organizeWeeks(collection);\n            }\n\n            console.log('collection: ', collection);\n\n            return collection;\n        }\n\n        /**\n         * Check to see if the day is prior to the current date\n         * This is used to disable the unselectable days\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isBeforeToday',\n        value: function isBeforeToday(date) {\n            return moment(date).isBefore(this.startDate);\n        }\n\n        /**\n         * Check to see if the day matches the current date\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isDayToday',\n        value: function isDayToday(date) {\n            return moment(date).isSame(this.startDate);\n        }\n    }, {\n        key: 'isDaySelected',\n        value: function isDaySelected() {}\n    }, {\n        key: 'selectDate',\n        value: function selectDate() {}\n\n        /**\n         * Return an array of dates for the passed in month\n         *\n         * @param {Date} startDate\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_getDaysInMonth',\n        value: function _getDaysInMonth(startDate) {\n            var firstDate = moment(startDate);\n            var days = [];\n            var date = moment(startDate);\n\n            // As long as the month hasn't changed\n            while (moment(date).isSame(firstDate, 'month')) {\n                // Add the new day to our array\n                days.push(moment(date).startOf('day').format());\n\n                // Increment the date by one day\n                date = moment(date).add(1, 'days');\n            }\n\n            return days;\n        }\n\n        /**\n         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n         *\n         * @param {Integer} count\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_integerToArray',\n        value: function _integerToArray(count) {\n            var i = void 0;\n            var days = [];\n\n            for (i = 0; i < count; i += 1) {\n                days.push(i);\n            }\n\n            return days;\n        }\n\n        /**\n         * Organize collection of days into sub collections of weeks\n         *\n         * @param {Array} collection\n         * @return {Array} collection\n         */\n\n    }, {\n        key: '_organizeWeeks',\n        value: function _organizeWeeks(collection) {\n            var _this = this;\n\n            var weekLength = 7;\n\n            collection.forEach(function (value, index) {\n                collection[index] = _this._chunk(value, weekLength);\n            });\n\n            return collection;\n        }\n\n        /**\n         * Split an array into chunks and return an array of these chunks\n         *\n         * @param {Array} group\n         * @param {Integer} groupsize\n         * @return {Array} chunks\n         */\n\n    }, {\n        key: '_chunk',\n        value: function _chunk(group, groupsize) {\n            var sets = [];\n            var i = 0;\n            var chunks = group.length / parseInt(groupsize, 10);\n\n            while (i < chunks) {\n                sets[i] = group.splice(0, groupsize);\n                i = i + 1;\n            }\n\n            return sets;\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {Array} days\n         * @return {Array} pad\n         */\n\n    }, {\n        key: '_padWeekLeft',\n        value: function _padWeekLeft(days, startDay) {\n            var pad = [];\n            var missingDays = this._integerToArray(startDay);\n\n            // Loop through missing days\n            for (var day in missingDays) {\n                // How many days to go back\n                var subtraction = parseInt(day, 10) + 1;\n\n                // Find that day\n                var previous = moment(this.startDate).subtract(subtraction, 'days').toISOString();\n                // Add to the beginning of the array\n                pad.unshift(previous);\n            }\n\n            return pad;\n        }\n    }]);\n\n    return CalendarController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.controller.js\n **/","export class CalendarController {\n\n    constructor(\n        bcCalendarConfig, bcCalendarService\n    ) {\n        'ngInject';\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Define today's date\n        this.today = this.bcCalendarConfig.startDate;\n\n        // DEFAULTS\n        this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n        this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n        this.interval = this.bcInterval || this.bcCalendarConfig.interval;\n        this.weekdays = this.bcWordType ?  this.bcCalendarConfig.weekdayStyle[this.bcWordType] :\n                this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.wordType];\n        this.organizeWeeks = this.bcOrganizeWeeks || this.bcCalendarConfig.organizeWeeks;\n\n        // Define the calendar duration (or length)\n        this.calendarDuration =\n            moment.duration(this.count, this.bcCalendarConfig.interval);\n\n        // Get the full count of days\n        this.calendarDays = this.calendarDuration.asDays();\n\n\n        // Get the current day of the month\n        this.todayDayOfMonth = moment(this.startDate).date();\n\n        // Get the current weekday\n        this.todayDayOfWeek = moment(this.startDate).day();\n\n        // Initially nothing is selected\n        this.selectedDate = null;\n\n\n\n\n        const DEV_DATE = {\n            year: 2016,\n            month: 3,\n            day: 5,\n        };\n\n\n\n\n\n\n        // loop through `interval` for `count` times\n        //\n        // always are building out days no matter the interval\n        // interval is merely to simplify math for the end user\n        //\n        // if ask for 2 days\n        //   collection is array with single item (month)\n        //   month is array with single item (week)\n        //   if weeks are turned ON\n        //     week is array with 7 items (days) (backfilled for missing days)\n        //   if weeks are turned OFF\n        //     week is array with 2 items (days)\n        //\n        // if ask for 2 weeks\n        //   collection is array with single item (month)\n        //   month is array with 2 items (weeks)\n        //   weeks are arrays with 7 items (days)\n        //   if weeks are turned ON\n        //     backfill for missing days\n        //\n        //\n        // assume 'month'\n        // buildMonth(start month)\n        //   build out month json\n        //     get all days\n        //     formatMonth\n        //       loop through putting weeks into arrays\n        //       final collection looks like:\n        //         - collection is array of months\n        //         - months is an array of weeks\n        //         - weeks is an array of days\n        //   store month somewhere\n        //   increment counter by 1\n        //   if still less than this.count\n        //     call buildMonth again with next month\n        //\n\n\n        this.calendar = this.build(this.startDate, 2);\n\n    }\n\n\n    /**\n     * Build calendar\n     * TODO: Should this be a service?\n     *\n     * @param {String} start\n     * @param {Integer} duration\n     * @return {Array} collection\n     */\n    build(start, duration) {\n        let collection = [];\n        let monthsBuilt = 0;\n\n        // Loop to create months\n        while (monthsBuilt < duration) {\n            let days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n            // If this is the first month\n            if (monthsBuilt === 0) {\n                // Create the missing days for the padding\n                const missingDays = this._padWeekLeft(days, this.todayDayOfWeek);\n\n                // Add to the beginning of our existing array\n                days = missingDays.concat(days);\n            }\n\n            // Add month to collection\n            collection.push(days);\n\n            // Increment counter\n            monthsBuilt = monthsBuilt + 1;\n        }\n\n        if (this.organizeWeeks) {\n            collection = this._organizeWeeks(collection);\n        }\n\n        console.log('collection: ', collection);\n\n        return collection;\n    }\n\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isBeforeToday(date) {\n        return moment(date).isBefore(this.startDate);\n    }\n\n\n    /**\n     * Check to see if the day matches the current date\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isDayToday(date) {\n        return moment(date).isSame(this.startDate);\n    }\n\n\n    isDaySelected() {\n    }\n\n\n    selectDate() {\n    }\n\n\n    /**\n     * Return an array of dates for the passed in month\n     *\n     * @param {Date} startDate\n     * @return {Array} days\n     */\n    _getDaysInMonth(startDate) {\n        const firstDate = moment(startDate);\n        const days = [];\n        let date = moment(startDate);\n\n        // As long as the month hasn't changed\n        while (moment(date).isSame(firstDate, 'month')) {\n            // Add the new day to our array\n            days.push(moment(date).startOf('day').format());\n\n            // Increment the date by one day\n            date = moment(date).add(1, 'days');\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    _integerToArray(count) {\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Organize collection of days into sub collections of weeks\n     *\n     * @param {Array} collection\n     * @return {Array} collection\n     */\n    _organizeWeeks(collection) {\n        const weekLength = 7;\n\n        collection.forEach((value, index) => {\n            collection[index] = this._chunk(value, weekLength);\n        });\n\n        return collection;\n    }\n\n\n    /**\n     * Split an array into chunks and return an array of these chunks\n     *\n     * @param {Array} group\n     * @param {Integer} groupsize\n     * @return {Array} chunks\n     */\n    _chunk(group, groupsize) {\n        const sets = [];\n        let i = 0;\n        const chunks = group.length / parseInt(groupsize, 10);\n\n        while(i < chunks) {\n            sets[i] = group.splice(0, groupsize);\n            i = i + 1;\n        }\n\n        return sets;\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {Array} days\n     * @return {Array} pad\n     */\n    _padWeekLeft(days, startDay) {\n        const pad = [];\n        const missingDays = this._integerToArray(startDay);\n\n        // Loop through missing days\n        for (const day in missingDays) {\n            // How many days to go back\n            const subtraction = parseInt(day, 10) + 1;\n\n            // Find that day\n            const previous = moment(this.startDate).subtract((subtraction), 'days').toISOString();\n            // Add to the beginning of the array\n            pad.unshift(previous);\n        }\n\n        return pad;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.controller.js\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/calendar.html';\nvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=bc-calendar__day data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div class=bc-calendar__month data-ng-repeat=\\\"month in vm.calendar track by $index\\\"> <div class=bc-calendar__week data-ng-repeat=\\\"week in month track by $index\\\"> <span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day),\\n                         'bc-calendar__day--today': vm.isDayToday(day) }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in week track by $index\\\"> <time class=bc-calendar__time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day) }\\\" datetime=\\\"{{ day | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day }}\\\"> {{ day | date:'EEE dd' }} </time> </span> </div> </div> </section>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/calendar.html\n ** module id = 5\n ** module chunks = 0 1\n **/"],"sourceRoot":""}