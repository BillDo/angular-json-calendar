!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("angular-json-calendar",[],t):"object"==typeof exports?exports["angular-json-calendar"]=t():e["angular-json-calendar"]=t()}(this,function(){return function(e){function t(n){if(a[n])return a[n].exports;var r=a[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var a={};return t.m=e,t.c=a,t.p="",t(0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(1),r=a(3),o=a(4),i=a(11),c=a(12),l=a(13);t["default"]=angular.module("bc.JsonCalendar",[]).provider("bcCalendarConfig",n.bcCalendarConfig).service("bcCalendarService",r.bcCalendarService).directive("bcCalendar",o.bcCalendarDirective).directive("bcMonth",i.bcMonthDirective).directive("bcWeek",c.bcWeekDirective).directive("bcDay",l.bcDayDirective)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarConfig=void 0;var o=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),i=a(2),c=n(i);t.bcCalendarConfig=function(){function e(){"ngInject";var t=this;r(this,e),this.startDate=moment(new Date).startOf("day").format(),this.nestingDepth="month",this.days=30,this.weekdayStyle={letter:["S","M","T","W","T","F","S"],abbreviation:["Sun","Mon","Tue","Wed","Thur","Fri","Sat"],word:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},this.dayTitleFormat="abbreviation",this.showWeekdays=!0,this.dayTemplate=c["default"],this.setDayTemplate=function(e){t.userDayTemplate=e},this.dateFormat="D",this.monthTitleFormat="MMMM",this.showMonthTitles=!0}return o(e,[{key:"$get",value:function(){return this}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.inner.html",n='<time datetime="{{ day.date | date:\'yyyy-MM-dd\' }}" class=bc-calendar__day-time title="{{ day.date }}" data-ng-if=day.date> <span data-ng-bind="vm.formatDate(day.date, vm.dateFormat)"></span> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.bcCalendarService=function(){function e(){"ngInject";a(this,e),this.WEEK_LENGTH=7}return n(e,[{key:"dateIsBeforeToday",value:function(e){var t=moment(new Date).startOf("day").format();return moment(e).isBefore(t)}},{key:"isDayToday",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?moment(new Date).format():arguments[1];return moment(e).isSame(t)}},{key:"integerToArray",value:function(e){var t=void 0,a=[];for(t=0;t<e;t+=1)a.push(t);return a}},{key:"padDaysLeft",value:function(e,t){var a=[],n=this.integerToArray(t);for(var r in n){var o=parseInt(r,10)+1,i=moment(e).subtract(o,"days").toISOString();a.unshift({date:i})}return a}},{key:"padBlankTiles",value:function(e,t){var a=arguments.length<=2||void 0===arguments[2]?"left":arguments[2],n=void 0,r=[];for(n=0;n<t;n+=1)r.push({date:null});return"right"===a?e.concat(r):"left"===a?r.concat(e):void 0}},{key:"chunk",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?this.WEEK_LENGTH:arguments[1],a=[],n=0,r=e.length/parseInt(t,10);n<r;)a[n]=e.splice(0,t),n+=1;return a}},{key:"durationInDays",value:function(e,t){var a=moment(e).startOf("day"),n=moment(t).startOf("day").add(1,"days");return n.diff(a,"days")}},{key:"organizeWeeks",value:function(e){var t=moment(e[0].date).day(),a=moment(e[e.length-1].date).day(),n=6,r=0;return t>r&&(e=this.padBlankTiles(e,t,"left")),a<n&&(e=this.padBlankTiles(e,this.WEEK_LENGTH-(a+1),"right")),this.chunk(e)}},{key:"organizeMonths",value:function(e){var t=[],a=6,n=0,r=e,o=void 0,i=moment(r[0].date).date(),c=moment(r[0].date).daysInMonth();if(moment(r[0].date).date()>0){o=r.slice(0,c-(i-1));var l=this.padDaysLeft(o[0].date,i-1);r=l.concat(r)}for(;r.length>0;){i=moment(r[0].date).date(),c=moment(r[0].date).daysInMonth(),o=r.splice(0,c-(i-1));var d=moment(o[0].date).day();d>n&&(o=this.padBlankTiles(o,d,"left"));var s=moment(o[o.length-1].date).day();s<a&&(o=this.padBlankTiles(o,this.WEEK_LENGTH-(s+1),"right")),t.push(this.chunk(o))}return t}},{key:"buildDays",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?new Date:arguments[1],a=0,n=[],r=void 0;a<e;)r=moment(t).add(a,"days").toISOString(),n.push({date:r}),a+=1;return n}}]),e}()},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";function e(e,a,n,r){r.getTemplateUrl=function(){return t[r.nestingDepth]}}var t={year:d["default"],month:u["default"],week:y["default"],day:m["default"]},a={restrict:"E",replace:!0,scope:{},bindToController:{bcStartDate:"@?",bcEndDate:"@?",bcNestingDepth:"@?",bcDays:"@?",bcDayTitleFormat:"@?",bcMonthTitleFormat:"@?",bcDateSelected:"&",bcShowWeekdays:"=?",bcShowMonthTitles:"=?",bcDayTemplate:"@?",bcDateFormat:"@?"},link:e,templateUrl:c["default"],controller:o.CalendarController,controllerAs:"vm"};return a}Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarDirective=r;var o=a(5),i=a(6),c=n(i),l=a(7),d=n(l),s=a(8),u=n(s),h=a(9),y=n(h),f=a(10),m=n(f)},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.CalendarController=function(){function e(t,n,r){"ngInject";a(this,e),this.$templateCache=t,this.bcCalendarConfig=n,this.bcCalendarService=r,this._activate()}return e.$inject=["$templateCache","bcCalendarConfig","bcCalendarService"],n(e,[{key:"_activate",value:function(){if(this.today=moment(new Date).startOf("day"),this.startDate=this.bcStartDate||this.bcCalendarConfig.startDate,this.bcEndDate?this.days=this.bcCalendarService.durationInDays(this.startDate,this.bcEndDate):this.days=parseInt(this.bcDays||this.bcCalendarConfig.days,10),this.nestingDepth=this.bcNestingDepth||this.bcCalendarConfig.nestingDepth,this.weekdays=this.bcDayTitleFormat?this.bcCalendarConfig.weekdayStyle[this.bcDayTitleFormat]:this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.dayTitleFormat],this.monthTitleFormat=this.bcMonthTitleFormat||this.bcCalendarConfig.monthTitleFormat,this.showMonthTitles="boolean"==typeof this.bcShowMonthTitles?this.bcShowMonthTitles:this.bcCalendarConfig.showMonthTitles,this.selectedDate=null,this.showWeekdays="boolean"==typeof this.bcShowWeekdays?this.bcShowWeekdays:this.bcCalendarConfig.showWeekdays,this.bcDayTemplate){var e="userDayTemplate.html";this.$templateCache.put(e,this.bcDayTemplate),this.dayTemplate=e}else if(this.bcCalendarConfig.userDayTemplate){var t="userDayTemplate.html";this.$templateCache.put(t,this.bcCalendarConfig.userDayTemplate),this.dayTemplate=t}else this.dayTemplate=this.bcCalendarConfig.dayTemplate;this.dateFormat=this.bcDateFormat||this.bcCalendarConfig.dateFormat;var a=this.bcCalendarService.buildDays(this.days,this.startDate);this._buildCalendar(a,this.nestingDepth)}},{key:"isBeforeToday",value:function(e){return this.bcCalendarService.dateIsBeforeToday(e)}},{key:"isDayToday",value:function(e){return this.bcCalendarService.isDayToday(e,this.startDate)}},{key:"selectDate",value:function(e){this.selectedDate=e,e.date&&this.bcDateSelected&&this.bcDateSelected({date:e.date})}},{key:"formatDate",value:function(e,t){return!!e&&moment(e).format(t)}},{key:"_buildCalendar",value:function(e,t){"month"===t?this.bcCollection=this.bcCalendarService.organizeMonths(e):"week"===t?this.bcCollection=this.bcCalendarService.organizeWeeks(e):"day"===t&&(this.bcCollection=e)}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html",n='<section class=bc-calendar> <span class=bc-calendar__weekdays data-ng-if="vm.showWeekdays && vm.nestingDepth === \'week\'"> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in vm.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <div data-ng-include=vm.getTemplateUrl()></div> </section>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html",n='<div class=bc-calendar__year data-ng-repeat="year in vm.bcCollection track by $index"> <bc-month bc-collection=year bc-weeks-header=vm.weekdaysHeader></bc-month> </div>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html",n='<time class=bc-calendar__month datetime="{{ month[0][month[0].length - 1].date | date:\'yyyy-MM\' }}" data-ng-repeat="month in vm.bcCollection track by $index"> <span class=bc-calendar__month-title data-ng-bind="vm.formatDate(month[0][month[0].length - 1].date, vm.monthTitleFormat)" data-ng-if=vm.showMonthTitles></span> <span class=bc-calendar__weekdays data-ng-if=vm.showWeekdays> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in vm.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <bc-week bc-collection=month></bc-week> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html",n='<time class=bc-calendar__week datetime="{{ week[week.length - 1].date | date:\'yyyy-ww\' }}" data-ng-repeat="week in vm.bcCollection track by $index"> <bc-day bc-collection=week></bc-day> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html",n="<span class=bc-calendar__day data-ng-class=\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\n                   'bc-calendar__day--even': $even,\n                   'bc-calendar__day--odd': $odd,\n                   'bc-calendar__day--pad': !day.date,\n                   'bc-calendar__day--valid': day.date,\n                   'bc-calendar__day--selected': day.date === vm.selectedDate.date }\" data-ng-click=vm.selectDate(day) data-ng-repeat=\"day in vm.bcCollection track by $index\" title=day.date> <ng-include src=vm.dayTemplate></ng-include> </span>";window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"=",bcWeekdaysHeader:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcMonthDirective=r;var o=a(8),i=n(o)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcWeekDirective=r;var o=a(9),i=n(o)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){"ngInject";var t={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return t}r.$inject=["bcCalendarConfig"],Object.defineProperty(t,"__esModule",{value:!0}),t.bcDayDirective=r;var o=a(10),i=n(o)}])});
//# sourceMappingURL=data:application/json;base64,