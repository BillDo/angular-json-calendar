!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("angular-json-calendar",[],t):"object"==typeof exports?exports["angular-json-calendar"]=t():e["angular-json-calendar"]=t()}(this,function(){return function(e){function t(n){if(a[n])return a[n].exports;var r=a[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var a={};return t.m=e,t.c=a,t.p="",t(0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(1),r=a(3),o=a(4),i=a(11),c=a(12),l=a(13);t["default"]=angular.module("bc.JsonCalendar",[]).provider("bcCalendarConfig",n.bcCalendarConfig).service("bcCalendarService",r.bcCalendarService).directive("bcCalendar",o.bcCalendarDirective).directive("bcMonth",i.bcMonthDirective).directive("bcWeek",c.bcWeekDirective).directive("bcDay",l.bcDayDirective)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarConfig=void 0;var o=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),i=a(2),c=n(i);t.bcCalendarConfig=function(){function e(){"ngInject";var t=this;r(this,e),this.startDate=moment(new Date).startOf("day").format(),this.nestingDepth="month",this.days=30,this.weekdayStyle={letter:["S","M","T","W","T","F","S"],abbreviation:["Sun","Mon","Tue","Wed","Thur","Fri","Sat"],word:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},this.dayTitleFormat="abbreviation",this.showWeekdays=!0,this.dayTemplate=c["default"],this.setDayTemplate=function(e){t.userDayTemplate=e},this.dateFormat="D",this.monthTitleFormat="MMMM",this.showMonthTitles=!0}return o(e,[{key:"$get",value:function(){return this}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.inner.html",n='<time datetime="{{ day.date | date:\'yyyy-MM-dd\' }}" class=bc-calendar__day-time title="{{ day.date }}" data-ng-if=day.date> <span data-ng-bind="vm.formatDate(day.date, vm.dateFormat)"></span> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.bcCalendarService=function(){function e(){"ngInject";a(this,e),this.WEEK_LENGTH=7}return n(e,[{key:"dateIsBeforeToday",value:function(e){var t=moment(new Date).startOf("day").format();return moment(e).isBefore(t)}},{key:"isDayToday",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?moment(new Date).format():arguments[1];return moment(e).isSame(t)}},{key:"integerToArray",value:function(e){var t=void 0,a=[];for(t=0;t<e;t+=1)a.push(t);return a}},{key:"padDaysLeft",value:function(e,t){var a=[],n=this.integerToArray(t);for(var r in n){var o=parseInt(r,10)+1,i=moment(e).subtract(o,"days").toISOString();a.unshift({date:i})}return a}},{key:"padBlankTiles",value:function(e,t){var a=arguments.length<=2||void 0===arguments[2]?"left":arguments[2],n=void 0,r=[];for(n=0;n<t;n+=1)r.push({date:null});return"right"===a?e.concat(r):"left"===a?r.concat(e):void 0}},{key:"chunk",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?this.WEEK_LENGTH:arguments[1],a=[],n=0,r=e.length/parseInt(t,10);n<r;)a[n]=e.splice(0,t),n+=1;return a}},{key:"durationInDays",value:function(e,t){var a=moment(e).startOf("day"),n=moment(t).startOf("day").add(1,"days");return n.diff(a,"days")}},{key:"organizeWeeks",value:function(e){var t=moment(e[0].date).day(),a=moment(e[e.length-1].date).day(),n=6,r=0;return t>r&&(e=this.padBlankTiles(e,t,"left")),a<n&&(e=this.padBlankTiles(e,this.WEEK_LENGTH-(a+1),"right")),this.chunk(e)}},{key:"organizeMonths",value:function(e){var t=[],a=6,n=0,r=e,o=void 0,i=moment(r[0].date).date(),c=moment(r[0].date).daysInMonth();if(moment(r[0].date).date()>0){o=r.slice(0,c-(i-1));var l=this.padDaysLeft(o[0].date,i-1);r=l.concat(r)}for(;r.length>0;){i=moment(r[0].date).date(),c=moment(r[0].date).daysInMonth(),o=r.splice(0,c-(i-1));var d=moment(o[0].date).day();d>n&&(o=this.padBlankTiles(o,d,"left"));var s=moment(o[o.length-1].date).day();s<a&&(o=this.padBlankTiles(o,this.WEEK_LENGTH-(s+1),"right")),t.push(this.chunk(o))}return t}},{key:"buildDays",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?new Date:arguments[1],a=0,n=[],r=void 0;a<e;)r=moment(t).add(a,"days").toISOString(),n.push({date:r}),a+=1;return n}}]),e}()},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){"ngInject";function t(e,t,n,r){r.getTemplateUrl=function(){return a[r.nestingDepth]}}var a={year:d["default"],month:u["default"],week:y["default"],day:m["default"]},n={restrict:"E",replace:!0,scope:{},bindToController:{bcStartDate:"@?",bcEndDate:"@?",bcNestingDepth:"@?",bcDays:"@?",bcDayTitleFormat:"@?",bcMonthTitleFormat:"@?",bcDateSelected:"&",bcShowWeekdays:"=?",bcShowMonthTitles:"=?",bcDayTemplate:"@?",bcDateFormat:"@?"},link:t,templateUrl:c["default"],controller:o.CalendarController,controllerAs:"vm"};return n}r.$inject=["$compile"],Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarDirective=r;var o=a(5),i=a(6),c=n(i),l=a(7),d=n(l),s=a(8),u=n(s),h=a(9),y=n(h),f=a(10),m=n(f)},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.CalendarController=function(){function e(t,n,r){"ngInject";a(this,e),this.$templateCache=t,this.bcCalendarConfig=n,this.bcCalendarService=r,this._activate()}return e.$inject=["$templateCache","bcCalendarConfig","bcCalendarService"],n(e,[{key:"_activate",value:function(){if(this.today=moment(new Date).startOf("day"),this.startDate=this.bcStartDate||this.bcCalendarConfig.startDate,this.bcEndDate?this.days=this.bcCalendarService.durationInDays(this.startDate,this.bcEndDate):this.days=parseInt(this.bcDays||this.bcCalendarConfig.days,10),this.nestingDepth=this.bcNestingDepth||this.bcCalendarConfig.nestingDepth,this.weekdays=this.bcDayTitleFormat?this.bcCalendarConfig.weekdayStyle[this.bcDayTitleFormat]:this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.dayTitleFormat],this.monthTitleFormat=this.bcMonthTitleFormat||this.bcCalendarConfig.monthTitleFormat,this.showMonthTitles="boolean"==typeof this.bcShowMonthTitles?this.bcShowMonthTitles:this.bcCalendarConfig.showMonthTitles,this.selectedDate=null,this.showWeekdays="boolean"==typeof this.bcShowWeekdays?this.bcShowWeekdays:this.bcCalendarConfig.showWeekdays,this.bcDayTemplate){var e="userDayTemplate.html";this.$templateCache.put(e,this.bcDayTemplate),this.dayTemplate=e}else if(this.bcCalendarConfig.userDayTemplate){var t="userDayTemplate.html";this.$templateCache.put(t,this.bcCalendarConfig.userDayTemplate),this.dayTemplate=t}else this.dayTemplate=this.bcCalendarConfig.dayTemplate;this.dateFormat=this.bcDateFormat||this.bcCalendarConfig.dateFormat;var a=this.bcCalendarService.buildDays(this.days,this.startDate);this._buildCalendar(a,this.nestingDepth)}},{key:"isBeforeToday",value:function(e){return this.bcCalendarService.dateIsBeforeToday(e)}},{key:"isDayToday",value:function(e){return this.bcCalendarService.isDayToday(e,this.startDate)}},{key:"selectDate",value:function(e){this.selectedDate=e,e.date&&this.bcDateSelected&&this.bcDateSelected({date:e.date})}},{key:"formatDate",value:function(e,t){return!!e&&moment(e).format(t)}},{key:"_buildCalendar",value:function(e,t){"month"===t?this.bcCollection=this.bcCalendarService.organizeMonths(e):"week"===t?this.bcCollection=this.bcCalendarService.organizeWeeks(e):"day"===t&&(this.bcCollection=e)}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html",n='<section class=bc-calendar> <span class=bc-calendar__weekdays data-ng-if="vm.showWeekdays && vm.nestingDepth === \'week\'"> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in vm.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <div data-ng-include=vm.getTemplateUrl()></div> </section>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html",n='<div class=bc-calendar__year data-ng-repeat="year in vm.bcCollection track by $index"> <bc-month bc-collection=year bc-weeks-header=vm.weekdaysHeader></bc-month> </div>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html",n='<time class=bc-calendar__month datetime="{{ month[0][month[0].length - 1].date | date:\'yyyy-MM\' }}" data-ng-repeat="month in vm.bcCollection track by $index"> <span class=bc-calendar__month-title data-ng-bind="vm.formatDate(month[0][month[0].length - 1].date, vm.monthTitleFormat)" data-ng-if=vm.showMonthTitles></span> <span class=bc-calendar__weekdays data-ng-if=vm.showWeekdays> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in vm.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <bc-week bc-collection=month></bc-week> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html",n='<time class=bc-calendar__week datetime="{{ week[week.length - 1].date | date:\'yyyy-ww\' }}" data-ng-repeat="week in vm.bcCollection track by $index"> <bc-day bc-collection=week></bc-day> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html",n="<span class=bc-calendar__day data-ng-class=\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day.date),\n                   'bc-calendar__day--today': vm.isDayToday(day.date),\n                   'bc-calendar__day--even': $even,\n                   'bc-calendar__day--odd': $odd,\n                   'bc-calendar__day--pad': !day.date,\n                   'bc-calendar__day--valid': day.date,\n                   'bc-calendar__day--selected': day.date === vm.selectedDate.date }\" data-ng-click=vm.selectDate(day) data-ng-repeat=\"day in vm.bcCollection track by $index\" title=day.date> <ng-include src=vm.dayTemplate></ng-include> </span>";window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"=",bcWeekdaysHeader:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcMonthDirective=r;var o=a(8),i=n(o)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcWeekDirective=r;var o=a(9),i=n(o)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){"ngInject";var t={restrict:"E",replace:!0,scope:{},bindToController:{bcCollection:"="},templateUrl:i["default"],controller:function(){},controllerAs:"vm"};return t}r.$inject=["bcCalendarConfig"],Object.defineProperty(t,"__esModule",{value:!0}),t.bcDayDirective=r;var o=a(10),i=n(o)}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uPzVjYTYiLCJ3ZWJwYWNrOi8vL2FuZ3VsYXItanNvbi1jYWxlbmRhci5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDZjNWMxNjgwNjYwNWZhYjUwMjJlPzdmM2YiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzPzk1NTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzPzFmMzkqIiwid2VicGFjazovLy8uL3NyYy9jYWxlbmRhci5wcm92aWRlci5qcz80NmIwIiwid2VicGFjazovLy8uL3NyYy9jYWxlbmRhci5wcm92aWRlci5qcz9iMmY3KiIsIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGVzL2RheS5pbm5lci5odG1sP2VjNmYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGVuZGFyLnNlcnZpY2UuanM/MjYzOSIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsZW5kYXIuc2VydmljZS5qcz84NzI4KiIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsZW5kYXIuZGlyZWN0aXZlLmpzPzE0ZTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbGVuZGFyLmRpcmVjdGl2ZS5qcz9kNGFhKiIsIndlYnBhY2s6Ly8vLi9zcmMvY2FsZW5kYXIuY29udHJvbGxlci5qcz8zZWI4Iiwid2VicGFjazovLy8uL3NyYy9jYWxlbmRhci5jb250cm9sbGVyLmpzPzZiNTMqIiwid2VicGFjazovLy8uL3NyYy90ZW1wbGF0ZXMvY2FsZW5kYXIuaHRtbD8yMTQ0Iiwid2VicGFjazovLy8uL3NyYy90ZW1wbGF0ZXMveWVhci5odG1sPzU3NTkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RlbXBsYXRlcy9tb250aC5odG1sP2VmNjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RlbXBsYXRlcy93ZWVrLmh0bWw/NDgwNyIsIndlYnBhY2s6Ly8vLi9zcmMvdGVtcGxhdGVzL2RheS5odG1sPzkzMDYiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vbnRoLmRpcmVjdGl2ZS5qcz80ZDdkIiwid2VicGFjazovLy8uL3NyYy9tb250aC5kaXJlY3RpdmUuanM/MzY5YioiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlZWsuZGlyZWN0aXZlLmpzP2ViNWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlZWsuZGlyZWN0aXZlLmpzPzJkNDQqIiwid2VicGFjazovLy8uL3NyYy9kYXkuZGlyZWN0aXZlLmpzP2EzYzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RheS5kaXJlY3RpdmUuanM/ZGU2MCoiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaWQiLCJsb2FkZWQiLCJjYWxsIiwibSIsImMiLCJwIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl9jYWxlbmRhciIsIl9jYWxlbmRhcjIiLCJfY2FsZW5kYXIzIiwiX21vbnRoIiwiX3dlZWsiLCJfZGF5IiwiYW5ndWxhciIsInByb3ZpZGVyIiwiYmNDYWxlbmRhckNvbmZpZyIsInNlcnZpY2UiLCJiY0NhbGVuZGFyU2VydmljZSIsImRpcmVjdGl2ZSIsImJjQ2FsZW5kYXJEaXJlY3RpdmUiLCJiY01vbnRoRGlyZWN0aXZlIiwiYmNXZWVrRGlyZWN0aXZlIiwiYmNEYXlEaXJlY3RpdmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwidW5kZWZpbmVkIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfZGF5SW5uZXIiLCJfZGF5SW5uZXIyIiwiX3RoaXMiLCJzdGFydERhdGUiLCJtb21lbnQiLCJEYXRlIiwic3RhcnRPZiIsImZvcm1hdCIsIm5lc3RpbmdEZXB0aCIsImRheXMiLCJ3ZWVrZGF5U3R5bGUiLCJsZXR0ZXIiLCJhYmJyZXZpYXRpb24iLCJ3b3JkIiwiZGF5VGl0bGVGb3JtYXQiLCJzaG93V2Vla2RheXMiLCJkYXlUZW1wbGF0ZSIsInNldERheVRlbXBsYXRlIiwidGVtcGxhdGUiLCJ1c2VyRGF5VGVtcGxhdGUiLCJkYXRlRm9ybWF0IiwibW9udGhUaXRsZUZvcm1hdCIsInNob3dNb250aFRpdGxlcyIsInBhdGgiLCJodG1sIiwid2luZG93IiwicnVuIiwicHV0IiwiV0VFS19MRU5HVEgiLCJkYXRlIiwidG9kYXkiLCJpc0JlZm9yZSIsImRhdGUyIiwiYXJndW1lbnRzIiwiaXNTYW1lIiwiY291bnQiLCJwdXNoIiwicGFkIiwibWlzc2luZ0RheXMiLCJpbnRlZ2VyVG9BcnJheSIsImRheSIsInN1YnRyYWN0aW9uIiwicGFyc2VJbnQiLCJwcmV2aW91cyIsInN1YnRyYWN0IiwidG9JU09TdHJpbmciLCJ1bnNoaWZ0IiwiY29sbGVjdGlvbiIsImRpcmVjdGlvbiIsImNvbmNhdCIsImdyb3VwIiwiZ3JvdXBzaXplIiwic2V0cyIsImNodW5rcyIsInNwbGljZSIsInN0YXJ0IiwiZW5kIiwibmV3U3RhcnQiLCJuZXdFbmQiLCJhZGQiLCJkaWZmIiwiZmlyc3REYXkiLCJsYXN0RGF5IiwiU0FUVVJEQVkiLCJTVU5EQVkiLCJwYWRCbGFua1RpbGVzIiwiY2h1bmsiLCJhbGxEYXlzIiwiY2FsZW5kYXIiLCJtb250aCIsImRheU9mTW9udGgiLCJkYXlzSW5Nb250aCIsInNsaWNlIiwicGFkRGF5c0xlZnQiLCJsaW1pdCIsImNvdW50ZXIiLCIkY29tcGlsZSIsImxpbmtGdW5jdGlvbiIsIiRzY29wZSIsIiRlbGVtZW50IiwiJGF0dHJzIiwidm0iLCJnZXRUZW1wbGF0ZVVybCIsInRlbXBsYXRlcyIsInllYXIiLCJfeWVhcjIiLCJfbW9udGgyIiwid2VlayIsIl93ZWVrMiIsIl9kYXkyIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwic2NvcGUiLCJiaW5kVG9Db250cm9sbGVyIiwiYmNTdGFydERhdGUiLCJiY0VuZERhdGUiLCJiY05lc3RpbmdEZXB0aCIsImJjRGF5cyIsImJjRGF5VGl0bGVGb3JtYXQiLCJiY01vbnRoVGl0bGVGb3JtYXQiLCJiY0RhdGVTZWxlY3RlZCIsImJjU2hvd1dlZWtkYXlzIiwiYmNTaG93TW9udGhUaXRsZXMiLCJiY0RheVRlbXBsYXRlIiwiYmNEYXRlRm9ybWF0IiwibGluayIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIkNhbGVuZGFyQ29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsIiRpbmplY3QiLCJfeWVhciIsIiR0ZW1wbGF0ZUNhY2hlIiwiX2FjdGl2YXRlIiwiZHVyYXRpb25JbkRheXMiLCJ3ZWVrZGF5cyIsInNlbGVjdGVkRGF0ZSIsInRlbXBsYXRlTG9jYXRpb24iLCJfdGVtcGxhdGVMb2NhdGlvbiIsImJ1aWxkRGF5cyIsIl9idWlsZENhbGVuZGFyIiwiZGF0ZUlzQmVmb3JlVG9kYXkiLCJpc0RheVRvZGF5IiwiZGVwdGgiLCJiY0NvbGxlY3Rpb24iLCJvcmdhbml6ZU1vbnRocyIsIm9yZ2FuaXplV2Vla3MiLCJiY1dlZWtkYXlzSGVhZGVyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxJQUNBLGtCQUFBRyxnQkFBQUMsSUFDQUQsT0FBQSwyQkFBQUgsR0FDQSxnQkFBQUMsU0FDQUEsUUFBQSx5QkFBQUQsSUFFQUQsRUFBQSx5QkFBQUMsS0FDQ0ssS0FBQSxXQUNELE1DQWdCLFVBQVVDLEdDTjFCLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBUCxPQUdBLElBQUFD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dUJYIiwiZmlsZSI6ImFuZ3VsYXItanNvbi1jYWxlbmRhci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcImFuZ3VsYXItanNvbi1jYWxlbmRhclwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJhbmd1bGFyLWpzb24tY2FsZW5kYXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiYW5ndWxhci1qc29uLWNhbGVuZGFyXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uXG4gKiovIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJhbmd1bGFyLWpzb24tY2FsZW5kYXJcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYW5ndWxhci1qc29uLWNhbGVuZGFyXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFuZ3VsYXItanNvbi1jYWxlbmRhclwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2FsZW5kYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcblx0dmFyIF9jYWxlbmRhcjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9jYWxlbmRhcjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIF9tb250aCA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF93ZWVrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdFxuXHR2YXIgX2RheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gYW5ndWxhci5tb2R1bGUoJ2JjLkpzb25DYWxlbmRhcicsIFtdKS5wcm92aWRlcignYmNDYWxlbmRhckNvbmZpZycsIF9jYWxlbmRhci5iY0NhbGVuZGFyQ29uZmlnKS5zZXJ2aWNlKCdiY0NhbGVuZGFyU2VydmljZScsIF9jYWxlbmRhcjIuYmNDYWxlbmRhclNlcnZpY2UpLmRpcmVjdGl2ZSgnYmNDYWxlbmRhcicsIF9jYWxlbmRhcjMuYmNDYWxlbmRhckRpcmVjdGl2ZSkuZGlyZWN0aXZlKCdiY01vbnRoJywgX21vbnRoLmJjTW9udGhEaXJlY3RpdmUpLmRpcmVjdGl2ZSgnYmNXZWVrJywgX3dlZWsuYmNXZWVrRGlyZWN0aXZlKS5kaXJlY3RpdmUoJ2JjRGF5JywgX2RheS5iY0RheURpcmVjdGl2ZSk7XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmJjQ2FsZW5kYXJDb25maWcgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF9kYXlJbm5lciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2RheUlubmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RheUlubmVyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIGJjQ2FsZW5kYXJDb25maWcgPSBleHBvcnRzLmJjQ2FsZW5kYXJDb25maWcgPSBmdW5jdGlvbiAoKSB7XG5cdFxuXHQgICAgLy8gRGVmaW5lIGRlZmF1bHRzXG5cdCAgICBmdW5jdGlvbiBiY0NhbGVuZGFyQ29uZmlnKCkge1xuXHQgICAgICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgICAgIC8vIFRoZSBjYWxlbmRhciB3aWxsIGJlZ2luIHdpdGggdG9kYXlcblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGJjQ2FsZW5kYXJDb25maWcpO1xuXHRcblx0ICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG1vbWVudChuZXcgRGF0ZSgpKS5zdGFydE9mKCdkYXknKS5mb3JtYXQoKTtcblx0XG5cdCAgICAgICAgLy8gVGhlIGRlZmF1bHQgaW50ZXJ2YWwgdHlwZSBbZGF5fHdlZWt8bW9udGhdXG5cdCAgICAgICAgdGhpcy5uZXN0aW5nRGVwdGggPSAnbW9udGgnO1xuXHRcblx0ICAgICAgICAvLyBIb3cgbWFueSBkYXlzIHNob3VsZCBiZSBnZW5lcmF0ZWRcblx0ICAgICAgICB0aGlzLmRheXMgPSAzMDtcblx0XG5cdCAgICAgICAgLy8gRGVmaW5lIHRoZSBkaWZmZXJlbnQgcG9zc2libGUgcmVwcmVzZW50YXRpb25zIG9mIHRoZSB3ZWVrZGF5XG5cdCAgICAgICAgdGhpcy53ZWVrZGF5U3R5bGUgPSB7XG5cdCAgICAgICAgICAgIGxldHRlcjogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG5cdCAgICAgICAgICAgIGFiYnJldmlhdGlvbjogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1cicsICdGcmknLCAnU2F0J10sXG5cdCAgICAgICAgICAgIHdvcmQ6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCB3b3JkIHR5cGUgKE0gdnMgTW9uIHZzIE1vbmRheSlcblx0ICAgICAgICB0aGlzLmRheVRpdGxlRm9ybWF0ID0gJ2FiYnJldmlhdGlvbic7XG5cdFxuXHQgICAgICAgIC8vIFNob3VsZCB0aGUgY2FsZW5kYXIgc2hvdyB0aGUgd2Vla2RheSBuYW1lcyBhYm92ZSBlYWNoIGNvbHVtbj9cblx0ICAgICAgICB0aGlzLnNob3dXZWVrZGF5cyA9IHRydWU7XG5cdFxuXHQgICAgICAgIC8vIERlZmluZSB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBmb3IgYSBkYXlcblx0ICAgICAgICB0aGlzLmRheVRlbXBsYXRlID0gX2RheUlubmVyMi5kZWZhdWx0O1xuXHRcblx0ICAgICAgICAvLyBBbGxvdyB0aGUgdXNlciB0byBzZXQgYSBjdXN0b20gdGVtcGxhdGVcblx0ICAgICAgICB0aGlzLnNldERheVRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG5cdCAgICAgICAgICAgIF90aGlzLnVzZXJEYXlUZW1wbGF0ZSA9IHRlbXBsYXRlO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIC8vIERlZmluZSB0aGUgZGVmYXVsdCBmb3JtYXQgZm9yIGEgZGF5XG5cdCAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gJ0QnO1xuXHRcblx0ICAgICAgICAvLyBEZWZpbmUgdGhlIGRlZmF1bHQgZm9ybWF0IGZvciBhIG1vbnRoIHRpdGxlXG5cdCAgICAgICAgdGhpcy5tb250aFRpdGxlRm9ybWF0ID0gJ01NTU0nO1xuXHRcblx0ICAgICAgICAvLyBTaG91bGQgbW9udGggdGl0bGVzIGJlIHNob3duIGJ5IGRlZmF1bHQ/XG5cdCAgICAgICAgdGhpcy5zaG93TW9udGhUaXRsZXMgPSB0cnVlO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhiY0NhbGVuZGFyQ29uZmlnLCBbe1xuXHQgICAgICAgIGtleTogJyRnZXQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAkZ2V0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIGJjQ2FsZW5kYXJDb25maWc7XG5cdH0oKTtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBwYXRoID0gJy9Vc2Vycy9iYy9Db2RlL29wZW4tc291cmNlL2FuZ3VsYXItanNvbi1jYWxlbmRhci9zcmMvdGVtcGxhdGVzL2RheS5pbm5lci5odG1sJztcblx0dmFyIGh0bWwgPSBcIjx0aW1lIGRhdGV0aW1lPVxcXCJ7eyBkYXkuZGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnIH19XFxcIiBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5LXRpbWUgdGl0bGU9XFxcInt7IGRheS5kYXRlIH19XFxcIiBkYXRhLW5nLWlmPWRheS5kYXRlPiA8c3BhbiBkYXRhLW5nLWJpbmQ9XFxcInZtLmZvcm1hdERhdGUoZGF5LmRhdGUsIHZtLmRhdGVGb3JtYXQpXFxcIj48L3NwYW4+IDwvdGltZT5cIjtcblx0d2luZG93LmFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oYykgeyBjLnB1dChwYXRoLCBodG1sKSB9XSk7XG5cdG1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdHZhciBiY0NhbGVuZGFyU2VydmljZSA9IGV4cG9ydHMuYmNDYWxlbmRhclNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBiY0NhbGVuZGFyU2VydmljZSgpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgYmNDYWxlbmRhclNlcnZpY2UpO1xuXHRcblx0ICAgICAgICB0aGlzLldFRUtfTEVOR1RIID0gNztcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIENoZWNrIHRvIHNlZSBpZiB0aGUgZGF5IGlzIHByaW9yIHRvIHRoZSBjdXJyZW50IGRhdGVcblx0ICAgICAqIFRoaXMgaXMgdXNlZCB0byBkaXNhYmxlIHRoZSB1bnNlbGVjdGFibGUgZGF5c1xuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlXG5cdCAgICAgKiBAcmV0dXJuIHtCb29sfSBpc0JlZm9yZVxuXHQgICAgICovXG5cdFxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhiY0NhbGVuZGFyU2VydmljZSwgW3tcblx0ICAgICAgICBrZXk6ICdkYXRlSXNCZWZvcmVUb2RheScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGVJc0JlZm9yZVRvZGF5KGRhdGUpIHtcblx0ICAgICAgICAgICAgdmFyIHRvZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLmZvcm1hdCgpO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5pc0JlZm9yZSh0b2RheSk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGRheSBtYXRjaGVzIHRoZSBjdXJyZW50IGRhdGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGUyXG5cdCAgICAgICAgICogQHJldHVybiB7Qm9vbH0gaXNUb2RheVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdpc0RheVRvZGF5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNEYXlUb2RheShkYXRlKSB7XG5cdCAgICAgICAgICAgIHZhciBkYXRlMiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IG1vbWVudChuZXcgRGF0ZSgpKS5mb3JtYXQoKSA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuaXNTYW1lKGRhdGUyKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFR1cm4gYSBpbnRlZ2VyIChlLmcuICc2JykgaW50byBhbiBhcnJheTogJ1sxLDIsMyw0LDUsNl0nXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNvdW50XG5cdCAgICAgICAgICogQHJldHVybiB7QXJyYXl9IGRheXNcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnaW50ZWdlclRvQXJyYXknLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlZ2VyVG9BcnJheShjb3VudCkge1xuXHQgICAgICAgICAgICB2YXIgaSA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgdmFyIGRheXMgPSBbXTtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICBkYXlzLnB1c2goaSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBkYXlzO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUGFkIHRoZSBiZWdpbm5pbmcgb2YgYSB3ZWVrXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnREYXRlIC0gZGF0ZSB0byB0byB3b3JrIGJhY2sgZnJvbVxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvdW50IC0gaG93IG1hbnkgZGF5cyB0byBwYWRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gcGFkXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3BhZERheXNMZWZ0Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFkRGF5c0xlZnQoc3RhcnREYXRlLCBjb3VudCkge1xuXHQgICAgICAgICAgICB2YXIgcGFkID0gW107XG5cdCAgICAgICAgICAgIHZhciBtaXNzaW5nRGF5cyA9IHRoaXMuaW50ZWdlclRvQXJyYXkoY291bnQpO1xuXHRcblx0ICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIG1pc3NpbmcgZGF5c1xuXHQgICAgICAgICAgICBmb3IgKHZhciBkYXkgaW4gbWlzc2luZ0RheXMpIHtcblx0ICAgICAgICAgICAgICAgIC8vIEhvdyBtYW55IGRheXMgdG8gZ28gYmFja1xuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnRyYWN0aW9uID0gcGFyc2VJbnQoZGF5LCAxMCkgKyAxO1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhhdCBkYXlcblx0ICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IG1vbWVudChzdGFydERhdGUpLnN1YnRyYWN0KHN1YnRyYWN0aW9uLCAnZGF5cycpLnRvSVNPU3RyaW5nKCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gQWRkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG5cdCAgICAgICAgICAgICAgICBwYWQudW5zaGlmdCh7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0ZTogcHJldmlvdXNcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gcGFkO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUGFkIGEgY29sbGVjdGlvbiB3aXRoIGJsYW5rIHRpbGVzXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2xsZWN0aW9uXG5cdCAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBjb3VudFxuXHQgICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBwYWRkZWRDb2xsZWN0aW9uXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3BhZEJsYW5rVGlsZXMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWRCbGFua1RpbGVzKGNvbGxlY3Rpb24sIGNvdW50KSB7XG5cdCAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyAnbGVmdCcgOiBhcmd1bWVudHNbMl07XG5cdFxuXHQgICAgICAgICAgICB2YXIgaSA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgdmFyIGRheXMgPSBbXTtcblx0XG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBhcnJheVxuXHQgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuXHQgICAgICAgICAgICAgICAgZGF5cy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICBkYXRlOiBudWxsXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gSWYgZGlyZWN0aW9uIGlzICdyaWdodCdcblx0ICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuXHQgICAgICAgICAgICAgICAgLy8gcGFkIHRoZSBlbmRcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbmNhdChkYXlzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuXHQgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHBhZCB0aGUgYmVnaW5uaW5nXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZGF5cy5jb25jYXQoY29sbGVjdGlvbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFNwbGl0IGFuIGFycmF5IGludG8gY2h1bmtzIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgdGhlc2UgY2h1bmtzXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBncm91cFxuXHQgICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JvdXBzaXplIC0gQ2h1bmsgc2l6ZS4gRGVmYXVsdHMgdG8gNyAob25lIHdlZWspLlxuXHQgICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjaHVua3Ncblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY2h1bmsnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaHVuayhncm91cCkge1xuXHQgICAgICAgICAgICB2YXIgZ3JvdXBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdGhpcy5XRUVLX0xFTkdUSCA6IGFyZ3VtZW50c1sxXTtcblx0XG5cdCAgICAgICAgICAgIHZhciBzZXRzID0gW107XG5cdCAgICAgICAgICAgIHZhciBpID0gMDtcblx0ICAgICAgICAgICAgdmFyIGNodW5rcyA9IGdyb3VwLmxlbmd0aCAvIHBhcnNlSW50KGdyb3Vwc2l6ZSwgMTApO1xuXHRcblx0ICAgICAgICAgICAgd2hpbGUgKGkgPCBjaHVua3MpIHtcblx0ICAgICAgICAgICAgICAgIHNldHNbaV0gPSBncm91cC5zcGxpY2UoMCwgZ3JvdXBzaXplKTtcblx0ICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIHNldHM7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBHZXQgdGhlIGR1cmF0aW9uIGluIGRheXMgYmV0d2VlbiB0d28gZGF0ZXMgSU5DTFVESU5HIGJvdGggZGF0ZXNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGFydFxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbmRcblx0ICAgICAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBkYXlzXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2R1cmF0aW9uSW5EYXlzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZHVyYXRpb25JbkRheXMoc3RhcnQsIGVuZCkge1xuXHQgICAgICAgICAgICB2YXIgbmV3U3RhcnQgPSBtb21lbnQoc3RhcnQpLnN0YXJ0T2YoJ2RheScpO1xuXHQgICAgICAgICAgICAvLyBBZGQgYSBkYXkgc28gdGhlIGVuZCBkYXRlIGlzIGluY2x1ZGVkIGluIHRoZSBjYWxjdWxhdGlvblxuXHQgICAgICAgICAgICB2YXIgbmV3RW5kID0gbW9tZW50KGVuZCkuc3RhcnRPZignZGF5JykuYWRkKDEsICdkYXlzJyk7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gbmV3RW5kLmRpZmYobmV3U3RhcnQsICdkYXlzJyk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBPcmdhbml6ZSBhIGNvbGxlY3Rpb24gb2YgZGF5cyBpbnRvIHN1YiBjb2xsZWN0aW9ucyBvZiB3ZWVrc1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gZGF5cyAtIGFycmF5IG9mIGRheXNcblx0ICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gY29sbGVjdGlvblxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdvcmdhbml6ZVdlZWtzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb3JnYW5pemVXZWVrcyhkYXlzKSB7XG5cdCAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgZGF5IG9mIHRoZSB3ZWVrIHRoYXQgdGhlIGNhbGVuZGFyIHN0YXJ0cyBhbmQgZW5kcyBvblxuXHQgICAgICAgICAgICB2YXIgZmlyc3REYXkgPSBtb21lbnQoZGF5c1swXS5kYXRlKS5kYXkoKTtcblx0ICAgICAgICAgICAgdmFyIGxhc3REYXkgPSBtb21lbnQoZGF5c1tkYXlzLmxlbmd0aCAtIDFdLmRhdGUpLmRheSgpO1xuXHQgICAgICAgICAgICB2YXIgU0FUVVJEQVkgPSA2O1xuXHQgICAgICAgICAgICB2YXIgU1VOREFZID0gMDtcblx0XG5cdCAgICAgICAgICAgIC8vIElmIHRoZSBmaXJzdCBkYXkgaXMgYWZ0ZXIgU3VuZGF5XG5cdCAgICAgICAgICAgIGlmIChmaXJzdERheSA+IFNVTkRBWSkge1xuXHQgICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhlIGZpcnN0IGRheSBpcyBsaW5lZCB1cCBpbiB0aGUgY29ycmVjdCB3ZWVrZGF5IGNvbHVtblxuXHQgICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMucGFkQmxhbmtUaWxlcyhkYXlzLCBmaXJzdERheSwgJ2xlZnQnKTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gSWYgdGhlIGxhc3QgZGF5IGlzIGJlZm9yZSBTYXR1cmRheVxuXHQgICAgICAgICAgICBpZiAobGFzdERheSA8IFNBVFVSREFZKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBQYWQgd2l0aCBibGFuayB0aWxlcyBzbyB0aGF0IHRoZSBsYXN0IHdlZWsncyBkYXlzIGFyZSBpbiB0aGUgY29ycmVjdCB3ZWVrZGF5IGNvbHVtblxuXHQgICAgICAgICAgICAgICAgZGF5cyA9IHRoaXMucGFkQmxhbmtUaWxlcyhkYXlzLCB0aGlzLldFRUtfTEVOR1RIIC0gKGxhc3REYXkgKyAxKSwgJ3JpZ2h0Jyk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNodW5rKGRheXMpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogT3JnYW5pemUgYnkgbW9udGhcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGFsbERheXMgLSBBbiBhcnJheSBvZiBhbGwgZGF5c1xuXHQgICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjb2xsZWN0aW9uIC0gZGF5cyBvcmdhbml6ZWQgaW50byB3ZWVrcyBhbmQgbW9udGhzXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ29yZ2FuaXplTW9udGhzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gb3JnYW5pemVNb250aHMoYWxsRGF5cykge1xuXHQgICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBbXTtcblx0ICAgICAgICAgICAgdmFyIFNBVFVSREFZID0gNjtcblx0ICAgICAgICAgICAgdmFyIFNVTkRBWSA9IDA7XG5cdCAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gYWxsRGF5cztcblx0ICAgICAgICAgICAgdmFyIG1vbnRoID0gdm9pZCAwO1xuXHQgICAgICAgICAgICB2YXIgZGF5T2ZNb250aCA9IG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRhdGUoKTtcblx0ICAgICAgICAgICAgdmFyIGRheXNJbk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF5c0luTW9udGgoKTtcblx0XG5cdCAgICAgICAgICAgIC8vIFBhZCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBtb250aCB3aXRoIGFueSBtaXNzaW5nIGRheXNcblx0ICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGRheSBpcyBub3QgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGhcblx0ICAgICAgICAgICAgaWYgKG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRhdGUoKSA+IDApIHtcblx0ICAgICAgICAgICAgICAgIC8vIFB1bGwgdGhpcyBtb250aCdzIGRheXMgZnJvbSB0aGUgY29sbGVjdGlvblxuXHQgICAgICAgICAgICAgICAgbW9udGggPSBjb2xsZWN0aW9uLnNsaWNlKDAsIGRheXNJbk1vbnRoIC0gKGRheU9mTW9udGggLSAxKSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gRmlsbCB0aGUgbWlzc2luZyBkYXlzIGZyb20gdGhlIG1vbnRoXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkID0gdGhpcy5wYWREYXlzTGVmdChtb250aFswXS5kYXRlLCBkYXlPZk1vbnRoIC0gMSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gQ29tYmluZSB3aXRoIHRoZSBleGlzdGluZyBhcnJheVxuXHQgICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IHBhZC5jb25jYXQoY29sbGVjdGlvbik7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIC8vIFNwbGl0IGludG8gbW9udGhzXG5cdCAgICAgICAgICAgIC8vIEFzIGxvbmcgYXMgdGhlcmUgYXJlIGRheXMgbGVmdCBpbiB0aGUgY29sbGVjdGlvblxuXHQgICAgICAgICAgICB3aGlsZSAoY29sbGVjdGlvbi5sZW5ndGggPiAwKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIGZvciB0aGUgZmlyc3QgZGF0ZSBvZiB0aGUgY29sbGVjdGlvbiBlZy4gJzI0J1xuXHQgICAgICAgICAgICAgICAgZGF5T2ZNb250aCA9IG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRhdGUoKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgaG93IG1hbnkgZGF5cyB0aGVyZSBhcmUgdGhpcyBtb250aCAodG90YWwpXG5cdCAgICAgICAgICAgICAgICBkYXlzSW5Nb250aCA9IG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRheXNJbk1vbnRoKCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gUHVsbCB0aGlzIG1vbnRoJ3MgZGF5cyBmcm9tIHRoZSBjb2xsZWN0aW9uXG5cdCAgICAgICAgICAgICAgICBtb250aCA9IGNvbGxlY3Rpb24uc3BsaWNlKDAsIGRheXNJbk1vbnRoIC0gKGRheU9mTW9udGggLSAxKSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgd2Vla2RheXMgYXJlIHByaW9yIHRvIHRoZSBmaXJzdCBkYXkgb2YgdGhpcyBtb250aD9cblx0ICAgICAgICAgICAgICAgIHZhciBmaXJzdERheSA9IG1vbWVudChtb250aFswXS5kYXRlKS5kYXkoKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmlyc3QgZGF5IGlzIGFmdGVyIFN1bmRheVxuXHQgICAgICAgICAgICAgICAgaWYgKGZpcnN0RGF5ID4gU1VOREFZKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhhdCB0aGUgZmlyc3QgZGF5IGlzIGxpbmVkIHVwIGluIHRoZSBjb3JyZWN0IGNvbHVtblxuXHQgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdGhpcy5wYWRCbGFua1RpbGVzKG1vbnRoLCBmaXJzdERheSwgJ2xlZnQnKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICAvLyBIb3cgbWFueSB3ZWVrZGF5cyBhcmUgYWZ0ZXIgdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aD9cblx0ICAgICAgICAgICAgICAgIC8vIChyZW1lbWJlcjogd2Vla3MgYXJlIHplcm8tYmFzZWQpXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG1vbWVudChtb250aFttb250aC5sZW5ndGggLSAxXS5kYXRlKS5kYXkoKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBJZiBibGFuayB0aWxlcyBhcmUgbmVlZGVkIGZvciB0aGUgbGFzdCB3ZWVrXG5cdCAgICAgICAgICAgICAgICBpZiAobGFzdERheSA8IFNBVFVSREFZKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhhdCB0aGUgZmlyc3QgZGF5IGlzIGxpbmVkIHVwIGluIHRoZSBjb3JyZWN0IGNvbHVtblxuXHQgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdGhpcy5wYWRCbGFua1RpbGVzKG1vbnRoLCB0aGlzLldFRUtfTEVOR1RIIC0gKGxhc3REYXkgKyAxKSwgJ3JpZ2h0Jyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gT3JnYW5pemUgaW50byB3ZWVrcyBhbmQgYWRkIHRvIHRoZSBjYWxlbmRhciBhcnJheVxuXHQgICAgICAgICAgICAgICAgY2FsZW5kYXIucHVzaCh0aGlzLmNodW5rKG1vbnRoKSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHJldHVybiBjYWxlbmRhcjtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJ1aWxkIGFuIGFycmF5IG9mIGRheXNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbGltaXQgLSBob3cgbWFueSBkYXlzIHRvIGNyZWF0ZVxuXHQgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGFydCAtIHRoZSBzdGFydGluZyBkYXRlXG5cdCAgICAgICAgICogQHJldHVybiB7QXJyYXl9IGRheXNcblx0ICAgICAgICAgKi9cblx0XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnYnVpbGREYXlzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGREYXlzKGxpbWl0KSB7XG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IG5ldyBEYXRlKCkgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IDA7XG5cdCAgICAgICAgICAgIHZhciBkYXlzID0gW107XG5cdCAgICAgICAgICAgIHZhciBkYXkgPSB2b2lkIDA7XG5cdFxuXHQgICAgICAgICAgICB3aGlsZSAoY291bnRlciA8IGxpbWl0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGRheVxuXHQgICAgICAgICAgICAgICAgZGF5ID0gbW9tZW50KHN0YXJ0KS5hZGQoY291bnRlciwgJ2RheXMnKS50b0lTT1N0cmluZygpO1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgYXJyYXlcblx0ICAgICAgICAgICAgICAgIGRheXMucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF5XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBJbmNyZW1lbnQgdGhlIGNvdW50ZXJcblx0ICAgICAgICAgICAgICAgIGNvdW50ZXIgPSBjb3VudGVyICsgMTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIGRheXM7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBiY0NhbGVuZGFyU2VydmljZTtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0YmNDYWxlbmRhckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJGNvbXBpbGVcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuYmNDYWxlbmRhckRpcmVjdGl2ZSA9IGJjQ2FsZW5kYXJEaXJlY3RpdmU7XG5cdFxuXHR2YXIgX2NhbGVuZGFyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblx0XG5cdHZhciBfY2FsZW5kYXIyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdHZhciBfY2FsZW5kYXIzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsZW5kYXIyKTtcblx0XG5cdHZhciBfeWVhciA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX3llYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfeWVhcik7XG5cdFxuXHR2YXIgX21vbnRoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBfbW9udGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9udGgpO1xuXHRcblx0dmFyIF93ZWVrID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0XG5cdHZhciBfd2VlazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWVrKTtcblx0XG5cdHZhciBfZGF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdFxuXHR2YXIgX2RheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYXkpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIGJjQ2FsZW5kYXJEaXJlY3RpdmUoJGNvbXBpbGUpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgLy8gRGVmaW5lIHBvc3NpYmxlIHRlbXBsYXRlc1xuXHRcblx0ICAgIHZhciB0ZW1wbGF0ZXMgPSB7XG5cdCAgICAgICAgeWVhcjogX3llYXIyLmRlZmF1bHQsXG5cdCAgICAgICAgbW9udGg6IF9tb250aDIuZGVmYXVsdCxcblx0ICAgICAgICB3ZWVrOiBfd2VlazIuZGVmYXVsdCxcblx0ICAgICAgICBkYXk6IF9kYXkyLmRlZmF1bHRcblx0ICAgIH07XG5cdFxuXHQgICAgdmFyIGRpcmVjdGl2ZSA9IHtcblx0ICAgICAgICByZXN0cmljdDogJ0UnLFxuXHQgICAgICAgIHJlcGxhY2U6IHRydWUsXG5cdCAgICAgICAgc2NvcGU6IHt9LFxuXHQgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcblx0ICAgICAgICAgICAgYmNTdGFydERhdGU6ICdAPycsIC8vIGRhdGUgLSBkZWZhdWx0IHRvIHRvZGF5XG5cdCAgICAgICAgICAgIGJjRW5kRGF0ZTogJ0A/JywgLy8gZGF0ZSAtIGlmIG5vdCBwcmVzZW50LCB1c2UgY3JlYXRlIHVzaW5nIGJjRGF5c1xuXHQgICAgICAgICAgICBiY05lc3RpbmdEZXB0aDogJ0A/JywgLy8gc3RyaW5nIFttb250aHx3ZWVrfGRheV0gLSBkZWZhdWx0czogbW9udGhcblx0ICAgICAgICAgICAgYmNEYXlzOiAnQD8nLCAvLyBpbnRlZ2VyIC0gZGVmYXVsdCB0byAzMCAodXNlZCB0byBjcmVhdGUgYmNFbmREYXRlKVxuXHQgICAgICAgICAgICBiY0RheVRpdGxlRm9ybWF0OiAnQD8nLCAvLyBzdHJpbmcgW3dvcmR8YWJicmV2aWF0aW9ufGxldHRlcl0gLSBkZWZhdWx0OiBhYmJyZXZpYXRpb25cblx0ICAgICAgICAgICAgYmNNb250aFRpdGxlRm9ybWF0OiAnQD8nLCAvLyBzdHJpbmcgLSBhbnkgdmFsaWQgTW9tZW50IGRhdGUgZm9ybWF0IC0gZGVmYXVsdDogTU1NTVxuXHQgICAgICAgICAgICBiY0RhdGVTZWxlY3RlZDogJyYnLCAvLyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgZGF0ZSBpcyBzZWxlY3RlZCAodGFwL2NsaWNrKVxuXHQgICAgICAgICAgICBiY1Nob3dXZWVrZGF5czogJz0/JywgLy8gZGV0ZXJtaW5lIGlmIHRoZSB3ZWVrZGF5cyBoZWFkZXIgc2hvdWxkIGJlIGNyZWF0ZWRcblx0ICAgICAgICAgICAgYmNTaG93TW9udGhUaXRsZXM6ICc9PycsIC8vIGRldGVybWluZSBpZiB0aGUgbW9udGggdGl0bGVzIHNob3VsZCBiZSB2aXNpYmxlXG5cdCAgICAgICAgICAgIGJjRGF5VGVtcGxhdGU6ICdAPycsIC8vIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCAnZGF5JyB0ZW1wbGF0ZVxuXHQgICAgICAgICAgICBiY0RhdGVGb3JtYXQ6ICdAPycgfSxcblx0ICAgICAgICBsaW5rOiBsaW5rRnVuY3Rpb24sXG5cdCAgICAgICAgdGVtcGxhdGVVcmw6IF9jYWxlbmRhcjMuZGVmYXVsdCxcblx0ICAgICAgICBjb250cm9sbGVyOiBfY2FsZW5kYXIuQ2FsZW5kYXJDb250cm9sbGVyLFxuXHQgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gZGlyZWN0aXZlO1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogTGlua1xuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBsaW5rRnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCB2bSkge1xuXHRcblx0ICAgICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgdGVtcGxhdGUgYmFzZWQgb24gdGhlIGRlc2lyZWQgbmVzdGluZyBkZXB0aFxuXHQgICAgICAgIHZtLmdldFRlbXBsYXRlVXJsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVzW3ZtLm5lc3RpbmdEZXB0aF07XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0fVxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0dmFyIENhbGVuZGFyQ29udHJvbGxlciA9IGV4cG9ydHMuQ2FsZW5kYXJDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgQ2FsZW5kYXJDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkdGVtcGxhdGVDYWNoZVwiLCBcImJjQ2FsZW5kYXJDb25maWdcIiwgXCJiY0NhbGVuZGFyU2VydmljZVwiXTtcblx0ICAgIGZ1bmN0aW9uIENhbGVuZGFyQ29udHJvbGxlcigkdGVtcGxhdGVDYWNoZSwgYmNDYWxlbmRhckNvbmZpZywgYmNDYWxlbmRhclNlcnZpY2UpIHtcblx0ICAgICAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FsZW5kYXJDb250cm9sbGVyKTtcblx0XG5cdCAgICAgICAgdGhpcy4kdGVtcGxhdGVDYWNoZSA9ICR0ZW1wbGF0ZUNhY2hlO1xuXHQgICAgICAgIHRoaXMuYmNDYWxlbmRhckNvbmZpZyA9IGJjQ2FsZW5kYXJDb25maWc7XG5cdCAgICAgICAgdGhpcy5iY0NhbGVuZGFyU2VydmljZSA9IGJjQ2FsZW5kYXJTZXJ2aWNlO1xuXHRcblx0ICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhDYWxlbmRhckNvbnRyb2xsZXIsIFt7XG5cdCAgICAgICAga2V5OiAnX2FjdGl2YXRlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2FjdGl2YXRlKCkge1xuXHQgICAgICAgICAgICAvLyBEZWZpbmUgdG9kYXkncyBkYXRlXG5cdCAgICAgICAgICAgIHRoaXMudG9kYXkgPSBtb21lbnQobmV3IERhdGUoKSkuc3RhcnRPZignZGF5Jyk7XG5cdFxuXHQgICAgICAgICAgICAvLyBEZWZpbmUgdGhlIHN0YXJ0IGRhdGUgZm9yIHRoZSBjYWxlbmRhclxuXHQgICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMuYmNTdGFydERhdGUgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLnN0YXJ0RGF0ZTtcblx0XG5cdCAgICAgICAgICAgIC8vIElmIHRoZSBlbmQgZGF0ZSB3YXMgZGVmaW5lZFxuXHQgICAgICAgICAgICBpZiAodGhpcy5iY0VuZERhdGUpIHtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBEZWZpbmUgaG93IG1hbnkgZGF5cyBhcmUgbmVlZGVkIHVzaW5nIHRoZSBlbmQgZGF0ZVxuXHQgICAgICAgICAgICAgICAgdGhpcy5kYXlzID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5kdXJhdGlvbkluRGF5cyh0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5iY0VuZERhdGUpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIERlZmluZSBob3cgbWFueSBkYXlzIGFyZSBuZWVkZWQgZnJvbSB0aGUgY291bnQgcGFzc2VkIGluIG9yIHRoZSBjb25maWdcblx0ICAgICAgICAgICAgICAgIHRoaXMuZGF5cyA9IHBhcnNlSW50KHRoaXMuYmNEYXlzIHx8IHRoaXMuYmNDYWxlbmRhckNvbmZpZy5kYXlzLCAxMCk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIC8vIERlZmluZSBob3cgZGVlcCB0byBvcmdhbml6ZSB0aGUgY2FsZW5kYXJcblx0ICAgICAgICAgICAgdGhpcy5uZXN0aW5nRGVwdGggPSB0aGlzLmJjTmVzdGluZ0RlcHRoIHx8IHRoaXMuYmNDYWxlbmRhckNvbmZpZy5uZXN0aW5nRGVwdGg7XG5cdFxuXHQgICAgICAgICAgICAvLyBEZWZpbmUgdGhlIHdlZWtkYXkgaGVhZGVycyBmb3JtYXRcblx0ICAgICAgICAgICAgdGhpcy53ZWVrZGF5cyA9IHRoaXMuYmNEYXlUaXRsZUZvcm1hdCA/IHRoaXMuYmNDYWxlbmRhckNvbmZpZy53ZWVrZGF5U3R5bGVbdGhpcy5iY0RheVRpdGxlRm9ybWF0XSA6IHRoaXMuYmNDYWxlbmRhckNvbmZpZy53ZWVrZGF5U3R5bGVbdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRheVRpdGxlRm9ybWF0XTtcblx0XG5cdCAgICAgICAgICAgIC8vIERlZmluZSB0aGUgZm9ybWF0IGZvciB0aGUgbW9udGggdGl0bGVcblx0ICAgICAgICAgICAgdGhpcy5tb250aFRpdGxlRm9ybWF0ID0gdGhpcy5iY01vbnRoVGl0bGVGb3JtYXQgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLm1vbnRoVGl0bGVGb3JtYXQ7XG5cdFxuXHQgICAgICAgICAgICAvLyBEZWZpbmUgaWYgbW9udGggdGl0bGVzIHNob3VsZCBiZSB2aXNpYmxlXG5cdCAgICAgICAgICAgIHRoaXMuc2hvd01vbnRoVGl0bGVzID0gdHlwZW9mIHRoaXMuYmNTaG93TW9udGhUaXRsZXMgPT09ICdib29sZWFuJyA/IHRoaXMuYmNTaG93TW9udGhUaXRsZXMgOiB0aGlzLmJjQ2FsZW5kYXJDb25maWcuc2hvd01vbnRoVGl0bGVzO1xuXHRcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbGx5IG5vIGRhdGUgaXMgc2VsZWN0ZWRcblx0ICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBudWxsO1xuXHRcblx0ICAgICAgICAgICAgLy8gU2V0IHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBjYWxlbmRhciB3ZWVrZGF5cyBoZWFkZXJzXG5cdCAgICAgICAgICAgIHRoaXMuc2hvd1dlZWtkYXlzID0gdHlwZW9mIHRoaXMuYmNTaG93V2Vla2RheXMgPT09ICdib29sZWFuJyA/IHRoaXMuYmNTaG93V2Vla2RheXMgOiB0aGlzLmJjQ2FsZW5kYXJDb25maWcuc2hvd1dlZWtkYXlzO1xuXHRcblx0ICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSB0ZW1wbGF0ZSBmb3IgYW4gaW5kaXZpZHVhbCBkYXlcblx0ICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGVmaW5lZCBhIHRlbXBsYXRlIG9uIHRoZSBkaXJlY3RpdmVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuYmNEYXlUZW1wbGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGVmaW5lZCBhIHRlbXBsYXRlIGluIHRoZSBwcm92aWRlclxuXHQgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlTG9jYXRpb24gPSAndXNlckRheVRlbXBsYXRlLmh0bWwnO1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIFB1dCB0aGUgdXNlciB0ZW1wbGF0ZSBpbnRvIHRoZSBjYWNoZVxuXHQgICAgICAgICAgICAgICAgdGhpcy4kdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVMb2NhdGlvbiwgdGhpcy5iY0RheVRlbXBsYXRlKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBFeHBvc2UgdGhlIGxvY2F0aW9uIHRvIHRoZSBkaXJlY3RpdmVcblx0ICAgICAgICAgICAgICAgIHRoaXMuZGF5VGVtcGxhdGUgPSB0ZW1wbGF0ZUxvY2F0aW9uO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmNDYWxlbmRhckNvbmZpZy51c2VyRGF5VGVtcGxhdGUpIHtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkZWZpbmVkIGEgdGVtcGxhdGUgaW4gdGhlIHByb3ZpZGVyXG5cdCAgICAgICAgICAgICAgICB2YXIgX3RlbXBsYXRlTG9jYXRpb24gPSAndXNlckRheVRlbXBsYXRlLmh0bWwnO1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIFB1dCB0aGUgdXNlciB0ZW1wbGF0ZSBpbnRvIHRoZSBjYWNoZVxuXHQgICAgICAgICAgICAgICAgdGhpcy4kdGVtcGxhdGVDYWNoZS5wdXQoX3RlbXBsYXRlTG9jYXRpb24sIHRoaXMuYmNDYWxlbmRhckNvbmZpZy51c2VyRGF5VGVtcGxhdGUpO1xuXHRcblx0ICAgICAgICAgICAgICAgIC8vIEV4cG9zZSB0aGUgbG9jYXRpb24gdG8gdGhlIGRpcmVjdGl2ZVxuXHQgICAgICAgICAgICAgICAgdGhpcy5kYXlUZW1wbGF0ZSA9IF90ZW1wbGF0ZUxvY2F0aW9uO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gbm8gdGVtcGxhdGUgZnJvbSB0aGUgdXNlclxuXHRcblx0ICAgICAgICAgICAgICAgIC8vIEV4cG9zZSB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBsb2NhdGlvbiB0byB0aGUgZGlyZWN0aXZlXG5cdCAgICAgICAgICAgICAgICB0aGlzLmRheVRlbXBsYXRlID0gdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRheVRlbXBsYXRlO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAvLyBEZWZpbmUgdGhlIGRhdGUgZm9ybWF0IGZvciB0aGUgaW5kaXZpZHVhbCBkYXlcblx0ICAgICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5iY0RhdGVGb3JtYXQgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRhdGVGb3JtYXQ7XG5cdFxuXHQgICAgICAgICAgICAvLyBCdWlsZCBhcnJheSBvZiBkYXlzXG5cdCAgICAgICAgICAgIHZhciBkYXlzID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5idWlsZERheXModGhpcy5kYXlzLCB0aGlzLnN0YXJ0RGF0ZSk7XG5cdFxuXHQgICAgICAgICAgICAvLyBCdWlsZCB0aGUgY2FsZW5kYXIgSlNPTiBhbmQgZXhwb3NlIHRvIHRoZSBET01cblx0ICAgICAgICAgICAgdGhpcy5fYnVpbGRDYWxlbmRhcihkYXlzLCB0aGlzLm5lc3RpbmdEZXB0aCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGRheSBpcyBwcmlvciB0byB0aGUgY3VycmVudCBkYXRlXG5cdCAgICAgICAgICogVGhpcyBpcyB1c2VkIHRvIGRpc2FibGUgdGhlIHVuc2VsZWN0YWJsZSBkYXlzXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0RhdGV9IGRhdGVcblx0ICAgICAgICAgKiBAcmV0dXJuIHtCb29sfVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdpc0JlZm9yZVRvZGF5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNCZWZvcmVUb2RheShkYXRlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmJjQ2FsZW5kYXJTZXJ2aWNlLmRhdGVJc0JlZm9yZVRvZGF5KGRhdGUpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBkYXkgbWF0Y2hlcyB0aGUgY3VycmVudCBkYXRlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0RhdGV9IGRhdGVcblx0ICAgICAgICAgKiBAcmV0dXJuIHtCb29sfVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdpc0RheVRvZGF5Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNEYXlUb2RheShkYXRlKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmJjQ2FsZW5kYXJTZXJ2aWNlLmlzRGF5VG9kYXkoZGF0ZSwgdGhpcy5zdGFydERhdGUpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2VsZWN0IGEgZGF0ZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRheVxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdzZWxlY3REYXRlJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0RGF0ZShkYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2V0IHRoZSBzZWxlY3RlZCBkYXlcblx0ICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXk7XG5cdFxuXHQgICAgICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIHBhc3NlZCBtZXRob2QgaWYgaXQgZXhpc3RzIGFuZCBhIHZhbGlkIGRhdGUgd2FzIGNob3NlblxuXHQgICAgICAgICAgICBpZiAoZGF5LmRhdGUgJiYgdGhpcy5iY0RhdGVTZWxlY3RlZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5iY0RhdGVTZWxlY3RlZCh7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF5LmRhdGVcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGb3JtYXQgYSBkYXRlIHVzaW5nIG1vbWVudFxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGVcblx0ICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0XG5cdCAgICAgICAgICogQHJldHVybiB7U3RyaW5nfSBmb3JtYXR0ZWREYXRlXG5cdCAgICAgICAgICovXG5cdFxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2Zvcm1hdERhdGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkge1xuXHQgICAgICAgICAgICBpZiAoIWRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5mb3JtYXQoZm9ybWF0KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJ1aWxkIHRoZSBjYWxlbmRhciBKU09OXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXlzXG5cdCAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRlcHRoXG5cdCAgICAgICAgICogQHJldHVybiB7RWxlbWVudH0gZWxlbWVudFxuXHQgICAgICAgICAqL1xuXHRcblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdfYnVpbGRDYWxlbmRhcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9idWlsZENhbGVuZGFyKGRheXMsIGRlcHRoKSB7XG5cdFxuXHQgICAgICAgICAgICAvLyBDYWxsIHRoZSBjb3JyZWN0IG9yZ2FuaXphdGlvbiBtZXRob2QgYmFzZWQgb24gdGhlIG5lc3RpbmcgZGVwdGhcblx0ICAgICAgICAgICAgaWYgKGRlcHRoID09PSAnbW9udGgnKSB7XG5cdFxuXHQgICAgICAgICAgICAgICAgdGhpcy5iY0NvbGxlY3Rpb24gPSB0aGlzLmJjQ2FsZW5kYXJTZXJ2aWNlLm9yZ2FuaXplTW9udGhzKGRheXMpO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09PSAnd2VlaycpIHtcblx0XG5cdCAgICAgICAgICAgICAgICB0aGlzLmJjQ29sbGVjdGlvbiA9IHRoaXMuYmNDYWxlbmRhclNlcnZpY2Uub3JnYW5pemVXZWVrcyhkYXlzKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PT0gJ2RheScpIHtcblx0XG5cdCAgICAgICAgICAgICAgICB0aGlzLmJjQ29sbGVjdGlvbiA9IGRheXM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIENhbGVuZGFyQ29udHJvbGxlcjtcblx0fSgpO1xuXG4vKioqLyB9LFxuLyogNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIHBhdGggPSAnL1VzZXJzL2JjL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1qc29uLWNhbGVuZGFyL3NyYy90ZW1wbGF0ZXMvY2FsZW5kYXIuaHRtbCc7XG5cdHZhciBodG1sID0gXCI8c2VjdGlvbiBjbGFzcz1iYy1jYWxlbmRhcj4gPHNwYW4gY2xhc3M9YmMtY2FsZW5kYXJfX3dlZWtkYXlzIGRhdGEtbmctaWY9XFxcInZtLnNob3dXZWVrZGF5cyAmJiB2bS5uZXN0aW5nRGVwdGggPT09ICd3ZWVrJ1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJiYy1jYWxlbmRhcl9fZGF5IGJjLWNhbGVuZGFyX19kYXktLXdlZWtkYXlzXFxcIiBkYXRhLW5nLXJlcGVhdD1cXFwiZGF5IGluIHZtLndlZWtkYXlzIHRyYWNrIGJ5ICRpbmRleFxcXCI+IDxzdHJvbmcgY2xhc3M9YmMtY2FsZW5kYXJfX2RheS10aXRsZT4ge3sgZGF5IH19IDwvc3Ryb25nPiA8L3NwYW4+IDwvc3Bhbj4gPGRpdiBkYXRhLW5nLWluY2x1ZGU9dm0uZ2V0VGVtcGxhdGVVcmwoKT48L2Rpdj4gPC9zZWN0aW9uPlwiO1xuXHR3aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIHBhdGggPSAnL1VzZXJzL2JjL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1qc29uLWNhbGVuZGFyL3NyYy90ZW1wbGF0ZXMveWVhci5odG1sJztcblx0dmFyIGh0bWwgPSBcIjxkaXYgY2xhc3M9YmMtY2FsZW5kYXJfX3llYXIgZGF0YS1uZy1yZXBlYXQ9XFxcInllYXIgaW4gdm0uYmNDb2xsZWN0aW9uIHRyYWNrIGJ5ICRpbmRleFxcXCI+IDxiYy1tb250aCBiYy1jb2xsZWN0aW9uPXllYXIgYmMtd2Vla3MtaGVhZGVyPXZtLndlZWtkYXlzSGVhZGVyPjwvYmMtbW9udGg+IDwvZGl2PlwiO1xuXHR3aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIHBhdGggPSAnL1VzZXJzL2JjL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1qc29uLWNhbGVuZGFyL3NyYy90ZW1wbGF0ZXMvbW9udGguaHRtbCc7XG5cdHZhciBodG1sID0gXCI8dGltZSBjbGFzcz1iYy1jYWxlbmRhcl9fbW9udGggZGF0ZXRpbWU9XFxcInt7IG1vbnRoWzBdW21vbnRoWzBdLmxlbmd0aCAtIDFdLmRhdGUgfCBkYXRlOid5eXl5LU1NJyB9fVxcXCIgZGF0YS1uZy1yZXBlYXQ9XFxcIm1vbnRoIGluIHZtLmJjQ29sbGVjdGlvbiB0cmFjayBieSAkaW5kZXhcXFwiPiA8c3BhbiBjbGFzcz1iYy1jYWxlbmRhcl9fbW9udGgtdGl0bGUgZGF0YS1uZy1iaW5kPVxcXCJ2bS5mb3JtYXREYXRlKG1vbnRoWzBdW21vbnRoWzBdLmxlbmd0aCAtIDFdLmRhdGUsIHZtLm1vbnRoVGl0bGVGb3JtYXQpXFxcIiBkYXRhLW5nLWlmPXZtLnNob3dNb250aFRpdGxlcz48L3NwYW4+IDxzcGFuIGNsYXNzPWJjLWNhbGVuZGFyX193ZWVrZGF5cyBkYXRhLW5nLWlmPXZtLnNob3dXZWVrZGF5cz4gPHNwYW4gY2xhc3M9XFxcImJjLWNhbGVuZGFyX19kYXkgYmMtY2FsZW5kYXJfX2RheS0td2Vla2RheXNcXFwiIGRhdGEtbmctcmVwZWF0PVxcXCJkYXkgaW4gdm0ud2Vla2RheXMgdHJhY2sgYnkgJGluZGV4XFxcIj4gPHN0cm9uZyBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5LXRpdGxlPiB7eyBkYXkgfX0gPC9zdHJvbmc+IDwvc3Bhbj4gPC9zcGFuPiA8YmMtd2VlayBiYy1jb2xsZWN0aW9uPW1vbnRoPjwvYmMtd2Vlaz4gPC90aW1lPlwiO1xuXHR3aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBwYXRoO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyIHBhdGggPSAnL1VzZXJzL2JjL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1qc29uLWNhbGVuZGFyL3NyYy90ZW1wbGF0ZXMvd2Vlay5odG1sJztcblx0dmFyIGh0bWwgPSBcIjx0aW1lIGNsYXNzPWJjLWNhbGVuZGFyX193ZWVrIGRhdGV0aW1lPVxcXCJ7eyB3ZWVrW3dlZWsubGVuZ3RoIC0gMV0uZGF0ZSB8IGRhdGU6J3l5eXktd3cnIH19XFxcIiBkYXRhLW5nLXJlcGVhdD1cXFwid2VlayBpbiB2bS5iY0NvbGxlY3Rpb24gdHJhY2sgYnkgJGluZGV4XFxcIj4gPGJjLWRheSBiYy1jb2xsZWN0aW9uPXdlZWs+PC9iYy1kYXk+IDwvdGltZT5cIjtcblx0d2luZG93LmFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oYykgeyBjLnB1dChwYXRoLCBodG1sKSB9XSk7XG5cdG1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuLyoqKi8gfSxcbi8qIDEwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgcGF0aCA9ICcvVXNlcnMvYmMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWpzb24tY2FsZW5kYXIvc3JjL3RlbXBsYXRlcy9kYXkuaHRtbCc7XG5cdHZhciBodG1sID0gXCI8c3BhbiBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5IGRhdGEtbmctY2xhc3M9XFxcInsgJ2JjLWNhbGVuZGFyX19kYXktLWRpc2FibGVkJzogdm0uaXNCZWZvcmVUb2RheShkYXkuZGF0ZSksXFxuICAgICAgICAgICAgICAgICAgICdiYy1jYWxlbmRhcl9fZGF5LS10b2RheSc6IHZtLmlzRGF5VG9kYXkoZGF5LmRhdGUpLFxcbiAgICAgICAgICAgICAgICAgICAnYmMtY2FsZW5kYXJfX2RheS0tZXZlbic6ICRldmVuLFxcbiAgICAgICAgICAgICAgICAgICAnYmMtY2FsZW5kYXJfX2RheS0tb2RkJzogJG9kZCxcXG4gICAgICAgICAgICAgICAgICAgJ2JjLWNhbGVuZGFyX19kYXktLXBhZCc6ICFkYXkuZGF0ZSxcXG4gICAgICAgICAgICAgICAgICAgJ2JjLWNhbGVuZGFyX19kYXktLXZhbGlkJzogZGF5LmRhdGUsXFxuICAgICAgICAgICAgICAgICAgICdiYy1jYWxlbmRhcl9fZGF5LS1zZWxlY3RlZCc6IGRheS5kYXRlID09PSB2bS5zZWxlY3RlZERhdGUuZGF0ZSB9XFxcIiBkYXRhLW5nLWNsaWNrPXZtLnNlbGVjdERhdGUoZGF5KSBkYXRhLW5nLXJlcGVhdD1cXFwiZGF5IGluIHZtLmJjQ29sbGVjdGlvbiB0cmFjayBieSAkaW5kZXhcXFwiIHRpdGxlPWRheS5kYXRlPiA8bmctaW5jbHVkZSBzcmM9dm0uZGF5VGVtcGxhdGU+PC9uZy1pbmNsdWRlPiA8L3NwYW4+XCI7XG5cdHdpbmRvdy5hbmd1bGFyLm1vZHVsZSgnbmcnKS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKGMpIHsgYy5wdXQocGF0aCwgaHRtbCkgfV0pO1xuXHRtb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG5cbi8qKiovIH0sXG4vKiAxMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5iY01vbnRoRGlyZWN0aXZlID0gYmNNb250aERpcmVjdGl2ZTtcblx0XG5cdHZhciBfbW9udGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0dmFyIF9tb250aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb250aCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gYmNNb250aERpcmVjdGl2ZSgpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgdmFyIGRpcmVjdGl2ZSA9IHtcblx0ICAgICAgICByZXN0cmljdDogJ0UnLFxuXHQgICAgICAgIHJlcGxhY2U6IHRydWUsXG5cdCAgICAgICAgc2NvcGU6IHt9LFxuXHQgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcblx0ICAgICAgICAgICAgYmNDb2xsZWN0aW9uOiAnPScsXG5cdCAgICAgICAgICAgIGJjV2Vla2RheXNIZWFkZXI6ICc9J1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgdGVtcGxhdGVVcmw6IF9tb250aDIuZGVmYXVsdCxcblx0ICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiBjb250cm9sbGVyKCkge30sXG5cdCAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBkaXJlY3RpdmU7XG5cdH1cblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmJjV2Vla0RpcmVjdGl2ZSA9IGJjV2Vla0RpcmVjdGl2ZTtcblx0XG5cdHZhciBfd2VlayA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdFxuXHR2YXIgX3dlZWsyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2Vlayk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gYmNXZWVrRGlyZWN0aXZlKCkge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICB2YXIgZGlyZWN0aXZlID0ge1xuXHQgICAgICAgIHJlc3RyaWN0OiAnRScsXG5cdCAgICAgICAgcmVwbGFjZTogdHJ1ZSxcblx0ICAgICAgICBzY29wZToge30sXG5cdCAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuXHQgICAgICAgICAgICBiY0NvbGxlY3Rpb246ICc9J1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgdGVtcGxhdGVVcmw6IF93ZWVrMi5kZWZhdWx0LFxuXHQgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uIGNvbnRyb2xsZXIoKSB7fSxcblx0ICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIGRpcmVjdGl2ZTtcblx0fVxuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGJjRGF5RGlyZWN0aXZlLiRpbmplY3QgPSBbXCJiY0NhbGVuZGFyQ29uZmlnXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmJjRGF5RGlyZWN0aXZlID0gYmNEYXlEaXJlY3RpdmU7XG5cdFxuXHR2YXIgX2RheSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0dmFyIF9kYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGF5KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBiY0RheURpcmVjdGl2ZShiY0NhbGVuZGFyQ29uZmlnKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgIHZhciBkaXJlY3RpdmUgPSB7XG5cdCAgICAgICAgcmVzdHJpY3Q6ICdFJyxcblx0ICAgICAgICByZXBsYWNlOiB0cnVlLFxuXHQgICAgICAgIHNjb3BlOiB7fSxcblx0ICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG5cdCAgICAgICAgICAgIGJjQ29sbGVjdGlvbjogJz0nXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB0ZW1wbGF0ZVVybDogX2RheTIuZGVmYXVsdCxcblx0ICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiBjb250cm9sbGVyKCkge30sXG5cdCAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiBkaXJlY3RpdmU7XG5cdH1cblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGFuZ3VsYXItanNvbi1jYWxlbmRhci5taW4uanNcbiAqKi8iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDZjNWMxNjgwNjYwNWZhYjUwMjJlXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2FsZW5kYXIgPSByZXF1aXJlKCcuL2NhbGVuZGFyLnByb3ZpZGVyJyk7XG5cbnZhciBfY2FsZW5kYXIyID0gcmVxdWlyZSgnLi9jYWxlbmRhci5zZXJ2aWNlJyk7XG5cbnZhciBfY2FsZW5kYXIzID0gcmVxdWlyZSgnLi9jYWxlbmRhci5kaXJlY3RpdmUnKTtcblxudmFyIF9tb250aCA9IHJlcXVpcmUoJy4vbW9udGguZGlyZWN0aXZlJyk7XG5cbnZhciBfd2VlayA9IHJlcXVpcmUoJy4vd2Vlay5kaXJlY3RpdmUnKTtcblxudmFyIF9kYXkgPSByZXF1aXJlKCcuL2RheS5kaXJlY3RpdmUnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYW5ndWxhci5tb2R1bGUoJ2JjLkpzb25DYWxlbmRhcicsIFtdKS5wcm92aWRlcignYmNDYWxlbmRhckNvbmZpZycsIF9jYWxlbmRhci5iY0NhbGVuZGFyQ29uZmlnKS5zZXJ2aWNlKCdiY0NhbGVuZGFyU2VydmljZScsIF9jYWxlbmRhcjIuYmNDYWxlbmRhclNlcnZpY2UpLmRpcmVjdGl2ZSgnYmNDYWxlbmRhcicsIF9jYWxlbmRhcjMuYmNDYWxlbmRhckRpcmVjdGl2ZSkuZGlyZWN0aXZlKCdiY01vbnRoJywgX21vbnRoLmJjTW9udGhEaXJlY3RpdmUpLmRpcmVjdGl2ZSgnYmNXZWVrJywgX3dlZWsuYmNXZWVrRGlyZWN0aXZlKS5kaXJlY3RpdmUoJ2JjRGF5JywgX2RheS5iY0RheURpcmVjdGl2ZSk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvaW5kZXguanNcbiAqKi8iLCJpbXBvcnQgeyBiY0NhbGVuZGFyQ29uZmlnIH0gZnJvbSAnLi9jYWxlbmRhci5wcm92aWRlcic7XG5pbXBvcnQgeyBiY0NhbGVuZGFyU2VydmljZSB9IGZyb20gJy4vY2FsZW5kYXIuc2VydmljZSc7XG5pbXBvcnQgeyBiY0NhbGVuZGFyRGlyZWN0aXZlIH0gZnJvbSAnLi9jYWxlbmRhci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgYmNNb250aERpcmVjdGl2ZSB9IGZyb20gJy4vbW9udGguZGlyZWN0aXZlJztcbmltcG9ydCB7IGJjV2Vla0RpcmVjdGl2ZSB9IGZyb20gJy4vd2Vlay5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgYmNEYXlEaXJlY3RpdmUgfSBmcm9tICcuL2RheS5kaXJlY3RpdmUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgnYmMuSnNvbkNhbGVuZGFyJywgW10pXG4gICAgLnByb3ZpZGVyKCdiY0NhbGVuZGFyQ29uZmlnJywgYmNDYWxlbmRhckNvbmZpZylcbiAgICAuc2VydmljZSgnYmNDYWxlbmRhclNlcnZpY2UnLCBiY0NhbGVuZGFyU2VydmljZSlcbiAgICAuZGlyZWN0aXZlKCdiY0NhbGVuZGFyJywgYmNDYWxlbmRhckRpcmVjdGl2ZSlcbiAgICAuZGlyZWN0aXZlKCdiY01vbnRoJywgYmNNb250aERpcmVjdGl2ZSlcbiAgICAuZGlyZWN0aXZlKCdiY1dlZWsnLCBiY1dlZWtEaXJlY3RpdmUpXG4gICAgLmRpcmVjdGl2ZSgnYmNEYXknLCBiY0RheURpcmVjdGl2ZSlcbjtcblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvaW5kZXguanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYmNDYWxlbmRhckNvbmZpZyA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9kYXlJbm5lciA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2RheS5pbm5lci5odG1sJyk7XG5cbnZhciBfZGF5SW5uZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGF5SW5uZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgYmNDYWxlbmRhckNvbmZpZyA9IGV4cG9ydHMuYmNDYWxlbmRhckNvbmZpZyA9IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIERlZmluZSBkZWZhdWx0c1xuICAgIGZ1bmN0aW9uIGJjQ2FsZW5kYXJDb25maWcoKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgLy8gVGhlIGNhbGVuZGFyIHdpbGwgYmVnaW4gd2l0aCB0b2RheVxuXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGJjQ2FsZW5kYXJDb25maWcpO1xuXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLmZvcm1hdCgpO1xuXG4gICAgICAgIC8vIFRoZSBkZWZhdWx0IGludGVydmFsIHR5cGUgW2RheXx3ZWVrfG1vbnRoXVxuICAgICAgICB0aGlzLm5lc3RpbmdEZXB0aCA9ICdtb250aCc7XG5cbiAgICAgICAgLy8gSG93IG1hbnkgZGF5cyBzaG91bGQgYmUgZ2VuZXJhdGVkXG4gICAgICAgIHRoaXMuZGF5cyA9IDMwO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgZGlmZmVyZW50IHBvc3NpYmxlIHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgd2Vla2RheVxuICAgICAgICB0aGlzLndlZWtkYXlTdHlsZSA9IHtcbiAgICAgICAgICAgIGxldHRlcjogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gICAgICAgICAgICBhYmJyZXZpYXRpb246IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodXInLCAnRnJpJywgJ1NhdCddLFxuICAgICAgICAgICAgd29yZDogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHdvcmQgdHlwZSAoTSB2cyBNb24gdnMgTW9uZGF5KVxuICAgICAgICB0aGlzLmRheVRpdGxlRm9ybWF0ID0gJ2FiYnJldmlhdGlvbic7XG5cbiAgICAgICAgLy8gU2hvdWxkIHRoZSBjYWxlbmRhciBzaG93IHRoZSB3ZWVrZGF5IG5hbWVzIGFib3ZlIGVhY2ggY29sdW1uP1xuICAgICAgICB0aGlzLnNob3dXZWVrZGF5cyA9IHRydWU7XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBkZWZhdWx0IHRlbXBsYXRlIGZvciBhIGRheVxuICAgICAgICB0aGlzLmRheVRlbXBsYXRlID0gX2RheUlubmVyMi5kZWZhdWx0O1xuXG4gICAgICAgIC8vIEFsbG93IHRoZSB1c2VyIHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZVxuICAgICAgICB0aGlzLnNldERheVRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICBfdGhpcy51c2VyRGF5VGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGRlZmF1bHQgZm9ybWF0IGZvciBhIGRheVxuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSAnRCc7XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBkZWZhdWx0IGZvcm1hdCBmb3IgYSBtb250aCB0aXRsZVxuICAgICAgICB0aGlzLm1vbnRoVGl0bGVGb3JtYXQgPSAnTU1NTSc7XG5cbiAgICAgICAgLy8gU2hvdWxkIG1vbnRoIHRpdGxlcyBiZSBzaG93biBieSBkZWZhdWx0P1xuICAgICAgICB0aGlzLnNob3dNb250aFRpdGxlcyA9IHRydWU7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKGJjQ2FsZW5kYXJDb25maWcsIFt7XG4gICAgICAgIGtleTogJyRnZXQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gJGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIGJjQ2FsZW5kYXJDb25maWc7XG59KCk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY2FsZW5kYXIucHJvdmlkZXIuanNcbiAqKi8iLCJpbXBvcnQgZGF5VGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZXMvZGF5LmlubmVyLmh0bWwnO1xuXG5leHBvcnQgY2xhc3MgYmNDYWxlbmRhckNvbmZpZyB7XG5cbiAgICAvLyBEZWZpbmUgZGVmYXVsdHNcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICAvLyBUaGUgY2FsZW5kYXIgd2lsbCBiZWdpbiB3aXRoIHRvZGF5XG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLmZvcm1hdCgpO1xuXG4gICAgICAgIC8vIFRoZSBkZWZhdWx0IGludGVydmFsIHR5cGUgW2RheXx3ZWVrfG1vbnRoXVxuICAgICAgICB0aGlzLm5lc3RpbmdEZXB0aCA9ICdtb250aCc7XG5cbiAgICAgICAgLy8gSG93IG1hbnkgZGF5cyBzaG91bGQgYmUgZ2VuZXJhdGVkXG4gICAgICAgIHRoaXMuZGF5cyA9IDMwO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgZGlmZmVyZW50IHBvc3NpYmxlIHJlcHJlc2VudGF0aW9ucyBvZiB0aGUgd2Vla2RheVxuICAgICAgICB0aGlzLndlZWtkYXlTdHlsZSA9IHtcbiAgICAgICAgICAgIGxldHRlcjogW1xuICAgICAgICAgICAgICAgICdTJyxcbiAgICAgICAgICAgICAgICAnTScsXG4gICAgICAgICAgICAgICAgJ1QnLFxuICAgICAgICAgICAgICAgICdXJyxcbiAgICAgICAgICAgICAgICAnVCcsXG4gICAgICAgICAgICAgICAgJ0YnLFxuICAgICAgICAgICAgICAgICdTJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBhYmJyZXZpYXRpb246IFtcbiAgICAgICAgICAgICAgICAnU3VuJyxcbiAgICAgICAgICAgICAgICAnTW9uJyxcbiAgICAgICAgICAgICAgICAnVHVlJyxcbiAgICAgICAgICAgICAgICAnV2VkJyxcbiAgICAgICAgICAgICAgICAnVGh1cicsXG4gICAgICAgICAgICAgICAgJ0ZyaScsXG4gICAgICAgICAgICAgICAgJ1NhdCcsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgd29yZDogW1xuICAgICAgICAgICAgICAgICdTdW5kYXknLFxuICAgICAgICAgICAgICAgICdNb25kYXknLFxuICAgICAgICAgICAgICAgICdUdWVzZGF5JyxcbiAgICAgICAgICAgICAgICAnV2VkbmVzZGF5JyxcbiAgICAgICAgICAgICAgICAnVGh1cnNkYXknLFxuICAgICAgICAgICAgICAgICdGcmlkYXknLFxuICAgICAgICAgICAgICAgICdTYXR1cmRheScsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCB3b3JkIHR5cGUgKE0gdnMgTW9uIHZzIE1vbmRheSlcbiAgICAgICAgdGhpcy5kYXlUaXRsZUZvcm1hdCA9ICdhYmJyZXZpYXRpb24nO1xuXG4gICAgICAgIC8vIFNob3VsZCB0aGUgY2FsZW5kYXIgc2hvdyB0aGUgd2Vla2RheSBuYW1lcyBhYm92ZSBlYWNoIGNvbHVtbj9cbiAgICAgICAgdGhpcy5zaG93V2Vla2RheXMgPSB0cnVlO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBmb3IgYSBkYXlcbiAgICAgICAgdGhpcy5kYXlUZW1wbGF0ZSA9IGRheVRlbXBsYXRlO1xuXG4gICAgICAgIC8vIEFsbG93IHRoZSB1c2VyIHRvIHNldCBhIGN1c3RvbSB0ZW1wbGF0ZVxuICAgICAgICB0aGlzLnNldERheVRlbXBsYXRlID0gKHRlbXBsYXRlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZXJEYXlUZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBkZWZhdWx0IGZvcm1hdCBmb3IgYSBkYXlcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gJ0QnO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgZGVmYXVsdCBmb3JtYXQgZm9yIGEgbW9udGggdGl0bGVcbiAgICAgICAgdGhpcy5tb250aFRpdGxlRm9ybWF0ID0gJ01NTU0nXG5cbiAgICAgICAgLy8gU2hvdWxkIG1vbnRoIHRpdGxlcyBiZSBzaG93biBieSBkZWZhdWx0P1xuICAgICAgICB0aGlzLnNob3dNb250aFRpdGxlcyA9IHRydWU7XG5cbiAgICB9XG5cblxuXG5cbiAgICAkZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9jYWxlbmRhci5wcm92aWRlci5qc1xuICoqLyIsInZhciBwYXRoID0gJy9Vc2Vycy9iYy9Db2RlL29wZW4tc291cmNlL2FuZ3VsYXItanNvbi1jYWxlbmRhci9zcmMvdGVtcGxhdGVzL2RheS5pbm5lci5odG1sJztcbnZhciBodG1sID0gXCI8dGltZSBkYXRldGltZT1cXFwie3sgZGF5LmRhdGUgfCBkYXRlOid5eXl5LU1NLWRkJyB9fVxcXCIgY2xhc3M9YmMtY2FsZW5kYXJfX2RheS10aW1lIHRpdGxlPVxcXCJ7eyBkYXkuZGF0ZSB9fVxcXCIgZGF0YS1uZy1pZj1kYXkuZGF0ZT4gPHNwYW4gZGF0YS1uZy1iaW5kPVxcXCJ2bS5mb3JtYXREYXRlKGRheS5kYXRlLCB2bS5kYXRlRm9ybWF0KVxcXCI+PC9zcGFuPiA8L3RpbWU+XCI7XG53aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy9kYXkuaW5uZXIuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMCAxXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBiY0NhbGVuZGFyU2VydmljZSA9IGV4cG9ydHMuYmNDYWxlbmRhclNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gYmNDYWxlbmRhclNlcnZpY2UoKSB7XG4gICAgICAgICduZ0luamVjdCc7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIGJjQ2FsZW5kYXJTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLldFRUtfTEVOR1RIID0gNztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGRheSBpcyBwcmlvciB0byB0aGUgY3VycmVudCBkYXRlXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIGRpc2FibGUgdGhlIHVuc2VsZWN0YWJsZSBkYXlzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2x9IGlzQmVmb3JlXG4gICAgICovXG5cblxuICAgIF9jcmVhdGVDbGFzcyhiY0NhbGVuZGFyU2VydmljZSwgW3tcbiAgICAgICAga2V5OiAnZGF0ZUlzQmVmb3JlVG9kYXknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGF0ZUlzQmVmb3JlVG9kYXkoZGF0ZSkge1xuICAgICAgICAgICAgdmFyIHRvZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLmZvcm1hdCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGRhdGUpLmlzQmVmb3JlKHRvZGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGRheSBtYXRjaGVzIHRoZSBjdXJyZW50IGRhdGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGVcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGUyXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2x9IGlzVG9kYXlcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2lzRGF5VG9kYXknLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaXNEYXlUb2RheShkYXRlKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZTIgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBtb21lbnQobmV3IERhdGUoKSkuZm9ybWF0KCkgOiBhcmd1bWVudHNbMV07XG5cbiAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuaXNTYW1lKGRhdGUyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUdXJuIGEgaW50ZWdlciAoZS5nLiAnNicpIGludG8gYW4gYXJyYXk6ICdbMSwyLDMsNCw1LDZdJ1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNvdW50XG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBkYXlzXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpbnRlZ2VyVG9BcnJheScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnRlZ2VyVG9BcnJheShjb3VudCkge1xuICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgZGF5cyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRheXMucHVzaChpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRheXM7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUGFkIHRoZSBiZWdpbm5pbmcgb2YgYSB3ZWVrXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGFydERhdGUgLSBkYXRlIHRvIHRvIHdvcmsgYmFjayBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvdW50IC0gaG93IG1hbnkgZGF5cyB0byBwYWRcbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IHBhZFxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncGFkRGF5c0xlZnQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFkRGF5c0xlZnQoc3RhcnREYXRlLCBjb3VudCkge1xuICAgICAgICAgICAgdmFyIHBhZCA9IFtdO1xuICAgICAgICAgICAgdmFyIG1pc3NpbmdEYXlzID0gdGhpcy5pbnRlZ2VyVG9BcnJheShjb3VudCk7XG5cbiAgICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBtaXNzaW5nIGRheXNcbiAgICAgICAgICAgIGZvciAodmFyIGRheSBpbiBtaXNzaW5nRGF5cykge1xuICAgICAgICAgICAgICAgIC8vIEhvdyBtYW55IGRheXMgdG8gZ28gYmFja1xuICAgICAgICAgICAgICAgIHZhciBzdWJ0cmFjdGlvbiA9IHBhcnNlSW50KGRheSwgMTApICsgMTtcblxuICAgICAgICAgICAgICAgIC8vIEZpbmQgdGhhdCBkYXlcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXMgPSBtb21lbnQoc3RhcnREYXRlKS5zdWJ0cmFjdChzdWJ0cmFjdGlvbiwgJ2RheXMnKS50b0lTT1N0cmluZygpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG4gICAgICAgICAgICAgICAgcGFkLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiBwcmV2aW91c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFkO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBhZCBhIGNvbGxlY3Rpb24gd2l0aCBibGFuayB0aWxlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2xsZWN0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gY291bnRcbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IHBhZGRlZENvbGxlY3Rpb25cbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3BhZEJsYW5rVGlsZXMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGFkQmxhbmtUaWxlcyhjb2xsZWN0aW9uLCBjb3VudCkge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/ICdsZWZ0JyA6IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgZGF5cyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYXJyYXlcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZGF5cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBkaXJlY3Rpb24gaXMgJ3JpZ2h0J1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIC8vIHBhZCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uY29uY2F0KGRheXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBwYWQgdGhlIGJlZ2lubmluZ1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXlzLmNvbmNhdChjb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGxpdCBhbiBhcnJheSBpbnRvIGNodW5rcyBhbmQgcmV0dXJuIGFuIGFycmF5IG9mIHRoZXNlIGNodW5rc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBncm91cFxuICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGdyb3Vwc2l6ZSAtIENodW5rIHNpemUuIERlZmF1bHRzIHRvIDcgKG9uZSB3ZWVrKS5cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IGNodW5rc1xuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2h1bmsnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2h1bmsoZ3JvdXApIHtcbiAgICAgICAgICAgIHZhciBncm91cHNpemUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyB0aGlzLldFRUtfTEVOR1RIIDogYXJndW1lbnRzWzFdO1xuXG4gICAgICAgICAgICB2YXIgc2V0cyA9IFtdO1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIGNodW5rcyA9IGdyb3VwLmxlbmd0aCAvIHBhcnNlSW50KGdyb3Vwc2l6ZSwgMTApO1xuXG4gICAgICAgICAgICB3aGlsZSAoaSA8IGNodW5rcykge1xuICAgICAgICAgICAgICAgIHNldHNbaV0gPSBncm91cC5zcGxpY2UoMCwgZ3JvdXBzaXplKTtcbiAgICAgICAgICAgICAgICBpID0gaSArIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZXRzO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgZHVyYXRpb24gaW4gZGF5cyBiZXR3ZWVuIHR3byBkYXRlcyBJTkNMVURJTkcgYm90aCBkYXRlc1xuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnRcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGVuZFxuICAgICAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBkYXlzXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkdXJhdGlvbkluRGF5cycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkdXJhdGlvbkluRGF5cyhzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgbmV3U3RhcnQgPSBtb21lbnQoc3RhcnQpLnN0YXJ0T2YoJ2RheScpO1xuICAgICAgICAgICAgLy8gQWRkIGEgZGF5IHNvIHRoZSBlbmQgZGF0ZSBpcyBpbmNsdWRlZCBpbiB0aGUgY2FsY3VsYXRpb25cbiAgICAgICAgICAgIHZhciBuZXdFbmQgPSBtb21lbnQoZW5kKS5zdGFydE9mKCdkYXknKS5hZGQoMSwgJ2RheXMnKTtcblxuICAgICAgICAgICAgcmV0dXJuIG5ld0VuZC5kaWZmKG5ld1N0YXJ0LCAnZGF5cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9yZ2FuaXplIGEgY29sbGVjdGlvbiBvZiBkYXlzIGludG8gc3ViIGNvbGxlY3Rpb25zIG9mIHdlZWtzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGRheXMgLSBhcnJheSBvZiBkYXlzXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjb2xsZWN0aW9uXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvcmdhbml6ZVdlZWtzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9yZ2FuaXplV2Vla3MoZGF5cykge1xuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBkYXkgb2YgdGhlIHdlZWsgdGhhdCB0aGUgY2FsZW5kYXIgc3RhcnRzIGFuZCBlbmRzIG9uXG4gICAgICAgICAgICB2YXIgZmlyc3REYXkgPSBtb21lbnQoZGF5c1swXS5kYXRlKS5kYXkoKTtcbiAgICAgICAgICAgIHZhciBsYXN0RGF5ID0gbW9tZW50KGRheXNbZGF5cy5sZW5ndGggLSAxXS5kYXRlKS5kYXkoKTtcbiAgICAgICAgICAgIHZhciBTQVRVUkRBWSA9IDY7XG4gICAgICAgICAgICB2YXIgU1VOREFZID0gMDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGRheSBpcyBhZnRlciBTdW5kYXlcbiAgICAgICAgICAgIGlmIChmaXJzdERheSA+IFNVTkRBWSkge1xuICAgICAgICAgICAgICAgIC8vIFBhZCB3aXRoIGJsYW5rIHRpbGVzIHNvIHRoZSBmaXJzdCBkYXkgaXMgbGluZWQgdXAgaW4gdGhlIGNvcnJlY3Qgd2Vla2RheSBjb2x1bW5cbiAgICAgICAgICAgICAgICBkYXlzID0gdGhpcy5wYWRCbGFua1RpbGVzKGRheXMsIGZpcnN0RGF5LCAnbGVmdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbGFzdCBkYXkgaXMgYmVmb3JlIFNhdHVyZGF5XG4gICAgICAgICAgICBpZiAobGFzdERheSA8IFNBVFVSREFZKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhhdCB0aGUgbGFzdCB3ZWVrJ3MgZGF5cyBhcmUgaW4gdGhlIGNvcnJlY3Qgd2Vla2RheSBjb2x1bW5cbiAgICAgICAgICAgICAgICBkYXlzID0gdGhpcy5wYWRCbGFua1RpbGVzKGRheXMsIHRoaXMuV0VFS19MRU5HVEggLSAobGFzdERheSArIDEpLCAncmlnaHQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2h1bmsoZGF5cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogT3JnYW5pemUgYnkgbW9udGhcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gYWxsRGF5cyAtIEFuIGFycmF5IG9mIGFsbCBkYXlzXG4gICAgICAgICAqIEByZXR1cm4ge0FycmF5fSBjb2xsZWN0aW9uIC0gZGF5cyBvcmdhbml6ZWQgaW50byB3ZWVrcyBhbmQgbW9udGhzXG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvcmdhbml6ZU1vbnRocycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvcmdhbml6ZU1vbnRocyhhbGxEYXlzKSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBbXTtcbiAgICAgICAgICAgIHZhciBTQVRVUkRBWSA9IDY7XG4gICAgICAgICAgICB2YXIgU1VOREFZID0gMDtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gYWxsRGF5cztcbiAgICAgICAgICAgIHZhciBtb250aCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBkYXlPZk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF0ZSgpO1xuICAgICAgICAgICAgdmFyIGRheXNJbk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF5c0luTW9udGgoKTtcblxuICAgICAgICAgICAgLy8gUGFkIHRoZSBiZWdpbm5pbmcgb2YgdGhlIG1vbnRoIHdpdGggYW55IG1pc3NpbmcgZGF5c1xuICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGRheSBpcyBub3QgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGhcbiAgICAgICAgICAgIGlmIChtb21lbnQoY29sbGVjdGlvblswXS5kYXRlKS5kYXRlKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVsbCB0aGlzIG1vbnRoJ3MgZGF5cyBmcm9tIHRoZSBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgbW9udGggPSBjb2xsZWN0aW9uLnNsaWNlKDAsIGRheXNJbk1vbnRoIC0gKGRheU9mTW9udGggLSAxKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaWxsIHRoZSBtaXNzaW5nIGRheXMgZnJvbSB0aGUgbW9udGhcbiAgICAgICAgICAgICAgICB2YXIgcGFkID0gdGhpcy5wYWREYXlzTGVmdChtb250aFswXS5kYXRlLCBkYXlPZk1vbnRoIC0gMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBDb21iaW5lIHdpdGggdGhlIGV4aXN0aW5nIGFycmF5XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IHBhZC5jb25jYXQoY29sbGVjdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNwbGl0IGludG8gbW9udGhzXG4gICAgICAgICAgICAvLyBBcyBsb25nIGFzIHRoZXJlIGFyZSBkYXlzIGxlZnQgaW4gdGhlIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIHdoaWxlIChjb2xsZWN0aW9uLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgZGF5IG9mIHRoZSBtb250aCBmb3IgdGhlIGZpcnN0IGRhdGUgb2YgdGhlIGNvbGxlY3Rpb24gZWcuICcyNCdcbiAgICAgICAgICAgICAgICBkYXlPZk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBtYW55IGRheXMgdGhlcmUgYXJlIHRoaXMgbW9udGggKHRvdGFsKVxuICAgICAgICAgICAgICAgIGRheXNJbk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF5c0luTW9udGgoKTtcblxuICAgICAgICAgICAgICAgIC8vIFB1bGwgdGhpcyBtb250aCdzIGRheXMgZnJvbSB0aGUgY29sbGVjdGlvblxuICAgICAgICAgICAgICAgIG1vbnRoID0gY29sbGVjdGlvbi5zcGxpY2UoMCwgZGF5c0luTW9udGggLSAoZGF5T2ZNb250aCAtIDEpKTtcblxuICAgICAgICAgICAgICAgIC8vIEhvdyBtYW55IHdlZWtkYXlzIGFyZSBwcmlvciB0byB0aGUgZmlyc3QgZGF5IG9mIHRoaXMgbW9udGg/XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0RGF5ID0gbW9tZW50KG1vbnRoWzBdLmRhdGUpLmRheSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGRheSBpcyBhZnRlciBTdW5kYXlcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3REYXkgPiBTVU5EQVkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhhdCB0aGUgZmlyc3QgZGF5IGlzIGxpbmVkIHVwIGluIHRoZSBjb3JyZWN0IGNvbHVtblxuICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMucGFkQmxhbmtUaWxlcyhtb250aCwgZmlyc3REYXksICdsZWZ0Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSG93IG1hbnkgd2Vla2RheXMgYXJlIGFmdGVyIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGg/XG4gICAgICAgICAgICAgICAgLy8gKHJlbWVtYmVyOiB3ZWVrcyBhcmUgemVyby1iYXNlZClcbiAgICAgICAgICAgICAgICB2YXIgbGFzdERheSA9IG1vbWVudChtb250aFttb250aC5sZW5ndGggLSAxXS5kYXRlKS5kYXkoKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIGJsYW5rIHRpbGVzIGFyZSBuZWVkZWQgZm9yIHRoZSBsYXN0IHdlZWtcbiAgICAgICAgICAgICAgICBpZiAobGFzdERheSA8IFNBVFVSREFZKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhZCB3aXRoIGJsYW5rIHRpbGVzIHNvIHRoYXQgdGhlIGZpcnN0IGRheSBpcyBsaW5lZCB1cCBpbiB0aGUgY29ycmVjdCBjb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgbW9udGggPSB0aGlzLnBhZEJsYW5rVGlsZXMobW9udGgsIHRoaXMuV0VFS19MRU5HVEggLSAobGFzdERheSArIDEpLCAncmlnaHQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBPcmdhbml6ZSBpbnRvIHdlZWtzIGFuZCBhZGQgdG8gdGhlIGNhbGVuZGFyIGFycmF5XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIucHVzaCh0aGlzLmNodW5rKG1vbnRoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYWxlbmRhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZCBhbiBhcnJheSBvZiBkYXlzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gbGltaXQgLSBob3cgbWFueSBkYXlzIHRvIGNyZWF0ZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RhcnQgLSB0aGUgc3RhcnRpbmcgZGF0ZVxuICAgICAgICAgKiBAcmV0dXJuIHtBcnJheX0gZGF5c1xuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnYnVpbGREYXlzJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkRGF5cyhsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gbmV3IERhdGUoKSA6IGFyZ3VtZW50c1sxXTtcblxuICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgdmFyIGRheXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBkYXkgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgIHdoaWxlIChjb3VudGVyIDwgbGltaXQpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGRheVxuICAgICAgICAgICAgICAgIGRheSA9IG1vbWVudChzdGFydCkuYWRkKGNvdW50ZXIsICdkYXlzJykudG9JU09TdHJpbmcoKTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgYXJyYXlcbiAgICAgICAgICAgICAgICBkYXlzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEluY3JlbWVudCB0aGUgY291bnRlclxuICAgICAgICAgICAgICAgIGNvdW50ZXIgPSBjb3VudGVyICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGRheXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gYmNDYWxlbmRhclNlcnZpY2U7XG59KCk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY2FsZW5kYXIuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBjbGFzcyBiY0NhbGVuZGFyU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICApIHtcbiAgICAgICAgJ25nSW5qZWN0JztcblxuICAgICAgICB0aGlzLldFRUtfTEVOR1RIID0gNztcblxuICAgIH1cblxuXG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiB0aGUgZGF5IGlzIHByaW9yIHRvIHRoZSBjdXJyZW50IGRhdGVcbiAgICAgKiBUaGlzIGlzIHVzZWQgdG8gZGlzYWJsZSB0aGUgdW5zZWxlY3RhYmxlIGRheXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlXG4gICAgICogQHJldHVybiB7Qm9vbH0gaXNCZWZvcmVcbiAgICAgKi9cbiAgICBkYXRlSXNCZWZvcmVUb2RheShkYXRlKSB7XG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpLmZvcm1hdCgpO1xuXG4gICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuaXNCZWZvcmUodG9kYXkpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBkYXkgbWF0Y2hlcyB0aGUgY3VycmVudCBkYXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlMlxuICAgICAqIEByZXR1cm4ge0Jvb2x9IGlzVG9kYXlcbiAgICAgKi9cbiAgICBpc0RheVRvZGF5KGRhdGUsIGRhdGUyID0gbW9tZW50KG5ldyBEYXRlKCkpLmZvcm1hdCgpKSB7XG4gICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuaXNTYW1lKGRhdGUyKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFR1cm4gYSBpbnRlZ2VyIChlLmcuICc2JykgaW50byBhbiBhcnJheTogJ1sxLDIsMyw0LDUsNl0nXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGNvdW50XG4gICAgICogQHJldHVybiB7QXJyYXl9IGRheXNcbiAgICAgKi9cbiAgICBpbnRlZ2VyVG9BcnJheShjb3VudCkge1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgY29uc3QgZGF5cyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBkYXlzLnB1c2goaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF5cztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFBhZCB0aGUgYmVnaW5uaW5nIG9mIGEgd2Vla1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXJ0RGF0ZSAtIGRhdGUgdG8gdG8gd29yayBiYWNrIGZyb21cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb3VudCAtIGhvdyBtYW55IGRheXMgdG8gcGFkXG4gICAgICogQHJldHVybiB7QXJyYXl9IHBhZFxuICAgICAqL1xuICAgIHBhZERheXNMZWZ0KHN0YXJ0RGF0ZSwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFkID0gW107XG4gICAgICAgIGNvbnN0IG1pc3NpbmdEYXlzID0gdGhpcy5pbnRlZ2VyVG9BcnJheShjb3VudCk7XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIG1pc3NpbmcgZGF5c1xuICAgICAgICBmb3IgKGNvbnN0IGRheSBpbiBtaXNzaW5nRGF5cykge1xuICAgICAgICAgICAgLy8gSG93IG1hbnkgZGF5cyB0byBnbyBiYWNrXG4gICAgICAgICAgICBjb25zdCBzdWJ0cmFjdGlvbiA9IHBhcnNlSW50KGRheSwgMTApICsgMTtcblxuICAgICAgICAgICAgLy8gRmluZCB0aGF0IGRheVxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBtb21lbnQoc3RhcnREYXRlKS5zdWJ0cmFjdCgoc3VidHJhY3Rpb24pLCAnZGF5cycpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICAgICAgICAgICAgcGFkLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIGRhdGU6IHByZXZpb3VzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFkO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUGFkIGEgY29sbGVjdGlvbiB3aXRoIGJsYW5rIHRpbGVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBjb3VudFxuICAgICAqIEByZXR1cm4ge0FycmF5fSBwYWRkZWRDb2xsZWN0aW9uXG4gICAgICovXG4gICAgcGFkQmxhbmtUaWxlcyhjb2xsZWN0aW9uLCBjb3VudCwgZGlyZWN0aW9uID0gJ2xlZnQnKSB7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBkYXlzID0gW107XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBkYXlzLnB1c2goe1xuICAgICAgICAgICAgICAgIGRhdGU6IG51bGwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGRpcmVjdGlvbiBpcyAncmlnaHQnXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIC8vIHBhZCB0aGUgZW5kXG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5jb25jYXQoZGF5cyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBwYWQgdGhlIGJlZ2lubmluZ1xuICAgICAgICAgICAgcmV0dXJuIGRheXMuY29uY2F0KGNvbGxlY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNwbGl0IGFuIGFycmF5IGludG8gY2h1bmtzIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgdGhlc2UgY2h1bmtzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBncm91cFxuICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gZ3JvdXBzaXplIC0gQ2h1bmsgc2l6ZS4gRGVmYXVsdHMgdG8gNyAob25lIHdlZWspLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSBjaHVua3NcbiAgICAgKi9cbiAgICBjaHVuayhncm91cCwgZ3JvdXBzaXplID0gdGhpcy5XRUVLX0xFTkdUSCkge1xuICAgICAgICBjb25zdCBzZXRzID0gW107XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgY29uc3QgY2h1bmtzID0gZ3JvdXAubGVuZ3RoIC8gcGFyc2VJbnQoZ3JvdXBzaXplLCAxMCk7XG5cbiAgICAgICAgd2hpbGUoaSA8IGNodW5rcykge1xuICAgICAgICAgICAgc2V0c1tpXSA9IGdyb3VwLnNwbGljZSgwLCBncm91cHNpemUpO1xuICAgICAgICAgICAgaSA9IGkgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNldHM7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGR1cmF0aW9uIGluIGRheXMgYmV0d2VlbiB0d28gZGF0ZXMgSU5DTFVESU5HIGJvdGggZGF0ZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdGFydFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlbmRcbiAgICAgKiBAcmV0dXJuIHtJbnRlZ2VyfSBkYXlzXG4gICAgICovXG4gICAgZHVyYXRpb25JbkRheXMoc3RhcnQsIGVuZCkge1xuICAgICAgICBjb25zdCBuZXdTdGFydCA9IG1vbWVudChzdGFydCkuc3RhcnRPZignZGF5Jyk7XG4gICAgICAgIC8vIEFkZCBhIGRheSBzbyB0aGUgZW5kIGRhdGUgaXMgaW5jbHVkZWQgaW4gdGhlIGNhbGN1bGF0aW9uXG4gICAgICAgIGNvbnN0IG5ld0VuZCA9IG1vbWVudChlbmQpLnN0YXJ0T2YoJ2RheScpLmFkZCgxLCAnZGF5cycpO1xuXG4gICAgICAgIHJldHVybiBuZXdFbmQuZGlmZihuZXdTdGFydCwgICdkYXlzJyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBPcmdhbml6ZSBhIGNvbGxlY3Rpb24gb2YgZGF5cyBpbnRvIHN1YiBjb2xsZWN0aW9ucyBvZiB3ZWVrc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF5cyAtIGFycmF5IG9mIGRheXNcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gY29sbGVjdGlvblxuICAgICAqL1xuICAgIG9yZ2FuaXplV2Vla3MoZGF5cykge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRheSBvZiB0aGUgd2VlayB0aGF0IHRoZSBjYWxlbmRhciBzdGFydHMgYW5kIGVuZHMgb25cbiAgICAgICAgY29uc3QgZmlyc3REYXkgPSBtb21lbnQoZGF5c1swXS5kYXRlKS5kYXkoKTtcbiAgICAgICAgY29uc3QgbGFzdERheSA9IG1vbWVudChkYXlzW2RheXMubGVuZ3RoIC0gMV0uZGF0ZSkuZGF5KCk7XG4gICAgICAgIGNvbnN0IFNBVFVSREFZID0gNjtcbiAgICAgICAgY29uc3QgU1VOREFZID0gMDtcblxuICAgICAgICAvLyBJZiB0aGUgZmlyc3QgZGF5IGlzIGFmdGVyIFN1bmRheVxuICAgICAgICBpZiAoZmlyc3REYXkgPiBTVU5EQVkpIHtcbiAgICAgICAgICAgIC8vIFBhZCB3aXRoIGJsYW5rIHRpbGVzIHNvIHRoZSBmaXJzdCBkYXkgaXMgbGluZWQgdXAgaW4gdGhlIGNvcnJlY3Qgd2Vla2RheSBjb2x1bW5cbiAgICAgICAgICAgIGRheXMgPSB0aGlzLnBhZEJsYW5rVGlsZXMoZGF5cywgZmlyc3REYXksICdsZWZ0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgbGFzdCBkYXkgaXMgYmVmb3JlIFNhdHVyZGF5XG4gICAgICAgIGlmIChsYXN0RGF5IDwgU0FUVVJEQVkpIHtcbiAgICAgICAgICAgIC8vIFBhZCB3aXRoIGJsYW5rIHRpbGVzIHNvIHRoYXQgdGhlIGxhc3Qgd2VlaydzIGRheXMgYXJlIGluIHRoZSBjb3JyZWN0IHdlZWtkYXkgY29sdW1uXG4gICAgICAgICAgICBkYXlzID0gdGhpcy5wYWRCbGFua1RpbGVzKGRheXMsdGhpcy5XRUVLX0xFTkdUSCAtIChsYXN0RGF5ICsgMSksICdyaWdodCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2h1bmsoZGF5cyk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBPcmdhbml6ZSBieSBtb250aFxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWxsRGF5cyAtIEFuIGFycmF5IG9mIGFsbCBkYXlzXG4gICAgICogQHJldHVybiB7QXJyYXl9IGNvbGxlY3Rpb24gLSBkYXlzIG9yZ2FuaXplZCBpbnRvIHdlZWtzIGFuZCBtb250aHNcbiAgICAgKi9cbiAgICBvcmdhbml6ZU1vbnRocyhhbGxEYXlzKSB7XG4gICAgICAgIGNvbnN0IGNhbGVuZGFyID0gW107XG4gICAgICAgIGNvbnN0IFNBVFVSREFZID0gNjtcbiAgICAgICAgY29uc3QgU1VOREFZID0gMDtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBhbGxEYXlzO1xuICAgICAgICBsZXQgbW9udGg7XG4gICAgICAgIGxldCBkYXlPZk1vbnRoID0gbW9tZW50KGNvbGxlY3Rpb25bMF0uZGF0ZSkuZGF0ZSgpO1xuICAgICAgICBsZXQgZGF5c0luTW9udGggPSBtb21lbnQoY29sbGVjdGlvblswXS5kYXRlKS5kYXlzSW5Nb250aCgpO1xuXG4gICAgICAgIC8vIFBhZCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBtb250aCB3aXRoIGFueSBtaXNzaW5nIGRheXNcbiAgICAgICAgLy8gSWYgdGhlIGZpcnN0IGRheSBpcyBub3QgdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGhcbiAgICAgICAgaWYgKG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRhdGUoKSA+IDApIHtcbiAgICAgICAgICAgIC8vIFB1bGwgdGhpcyBtb250aCdzIGRheXMgZnJvbSB0aGUgY29sbGVjdGlvblxuICAgICAgICAgICAgbW9udGggPSBjb2xsZWN0aW9uLnNsaWNlKDAsIChkYXlzSW5Nb250aCAtIChkYXlPZk1vbnRoIC0gMSkpKTtcblxuICAgICAgICAgICAgLy8gRmlsbCB0aGUgbWlzc2luZyBkYXlzIGZyb20gdGhlIG1vbnRoXG4gICAgICAgICAgICBjb25zdCBwYWQgPSB0aGlzLnBhZERheXNMZWZ0KG1vbnRoWzBdLmRhdGUsIChkYXlPZk1vbnRoIC0gMSkpO1xuXG4gICAgICAgICAgICAvLyBDb21iaW5lIHdpdGggdGhlIGV4aXN0aW5nIGFycmF5XG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gcGFkLmNvbmNhdChjb2xsZWN0aW9uKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gU3BsaXQgaW50byBtb250aHNcbiAgICAgICAgLy8gQXMgbG9uZyBhcyB0aGVyZSBhcmUgZGF5cyBsZWZ0IGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICAgIHdoaWxlIChjb2xsZWN0aW9uLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoIGZvciB0aGUgZmlyc3QgZGF0ZSBvZiB0aGUgY29sbGVjdGlvbiBlZy4gJzI0J1xuICAgICAgICAgICAgZGF5T2ZNb250aCA9IG1vbWVudChjb2xsZWN0aW9uWzBdLmRhdGUpLmRhdGUoKTtcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGhvdyBtYW55IGRheXMgdGhlcmUgYXJlIHRoaXMgbW9udGggKHRvdGFsKVxuICAgICAgICAgICAgZGF5c0luTW9udGggPSBtb21lbnQoY29sbGVjdGlvblswXS5kYXRlKS5kYXlzSW5Nb250aCgpO1xuXG4gICAgICAgICAgICAvLyBQdWxsIHRoaXMgbW9udGgncyBkYXlzIGZyb20gdGhlIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIG1vbnRoID0gY29sbGVjdGlvbi5zcGxpY2UoMCwgKGRheXNJbk1vbnRoIC0gKGRheU9mTW9udGggLSAxKSkpO1xuXG4gICAgICAgICAgICAvLyBIb3cgbWFueSB3ZWVrZGF5cyBhcmUgcHJpb3IgdG8gdGhlIGZpcnN0IGRheSBvZiB0aGlzIG1vbnRoP1xuICAgICAgICAgICAgY29uc3QgZmlyc3REYXkgPSBtb21lbnQobW9udGhbMF0uZGF0ZSkuZGF5KCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBmaXJzdCBkYXkgaXMgYWZ0ZXIgU3VuZGF5XG4gICAgICAgICAgICBpZiAoZmlyc3REYXkgPiBTVU5EQVkpIHtcbiAgICAgICAgICAgICAgICAvLyBQYWQgd2l0aCBibGFuayB0aWxlcyBzbyB0aGF0IHRoZSBmaXJzdCBkYXkgaXMgbGluZWQgdXAgaW4gdGhlIGNvcnJlY3QgY29sdW1uXG4gICAgICAgICAgICAgICAgbW9udGggPSB0aGlzLnBhZEJsYW5rVGlsZXMobW9udGgsIGZpcnN0RGF5LCAnbGVmdCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIb3cgbWFueSB3ZWVrZGF5cyBhcmUgYWZ0ZXIgdGhlIGxhc3QgZGF5IG9mIHRoZSBtb250aD9cbiAgICAgICAgICAgIC8vIChyZW1lbWJlcjogd2Vla3MgYXJlIHplcm8tYmFzZWQpXG4gICAgICAgICAgICBjb25zdCBsYXN0RGF5ID0gbW9tZW50KG1vbnRoW21vbnRoLmxlbmd0aCAtIDFdLmRhdGUpLmRheSgpO1xuXG4gICAgICAgICAgICAvLyBJZiBibGFuayB0aWxlcyBhcmUgbmVlZGVkIGZvciB0aGUgbGFzdCB3ZWVrXG4gICAgICAgICAgICBpZiAobGFzdERheSA8IFNBVFVSREFZKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFkIHdpdGggYmxhbmsgdGlsZXMgc28gdGhhdCB0aGUgZmlyc3QgZGF5IGlzIGxpbmVkIHVwIGluIHRoZSBjb3JyZWN0IGNvbHVtblxuICAgICAgICAgICAgICAgIG1vbnRoID0gdGhpcy5wYWRCbGFua1RpbGVzKG1vbnRoLCB0aGlzLldFRUtfTEVOR1RIIC0gKGxhc3REYXkgKyAxKSwgJ3JpZ2h0Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE9yZ2FuaXplIGludG8gd2Vla3MgYW5kIGFkZCB0byB0aGUgY2FsZW5kYXIgYXJyYXlcbiAgICAgICAgICAgIGNhbGVuZGFyLnB1c2godGhpcy5jaHVuayhtb250aCkpO1xuXG4gICAgICAgIH1cblxuXG4gICAgICAgIHJldHVybiBjYWxlbmRhcjtcblxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgYW4gYXJyYXkgb2YgZGF5c1xuICAgICAqXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBsaW1pdCAtIGhvdyBtYW55IGRheXMgdG8gY3JlYXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXJ0IC0gdGhlIHN0YXJ0aW5nIGRhdGVcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gZGF5c1xuICAgICAqL1xuICAgIGJ1aWxkRGF5cyhsaW1pdCwgc3RhcnQgPSBuZXcgRGF0ZSgpKSB7XG4gICAgICAgIGxldCBjb3VudGVyID0gMDtcbiAgICAgICAgY29uc3QgZGF5cyA9IFtdO1xuICAgICAgICBsZXQgZGF5O1xuXG4gICAgICAgIHdoaWxlIChjb3VudGVyIDwgbGltaXQpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgZGF5XG4gICAgICAgICAgICBkYXkgPSBtb21lbnQoc3RhcnQpLmFkZChjb3VudGVyLCAnZGF5cycpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byB0aGUgYXJyYXlcbiAgICAgICAgICAgIGRheXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZGF0ZTogZGF5LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEluY3JlbWVudCB0aGUgY291bnRlclxuICAgICAgICAgICAgY291bnRlciA9IGNvdW50ZXIgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRheXM7XG4gICAgfVxuXG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvY2FsZW5kYXIuc2VydmljZS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5iY0NhbGVuZGFyRGlyZWN0aXZlID0gYmNDYWxlbmRhckRpcmVjdGl2ZTtcblxudmFyIF9jYWxlbmRhciA9IHJlcXVpcmUoJy4vY2FsZW5kYXIuY29udHJvbGxlcicpO1xuXG52YXIgX2NhbGVuZGFyMiA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL2NhbGVuZGFyLmh0bWwnKTtcblxudmFyIF9jYWxlbmRhcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxlbmRhcjIpO1xuXG52YXIgX3llYXIgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy95ZWFyLmh0bWwnKTtcblxudmFyIF95ZWFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3llYXIpO1xuXG52YXIgX21vbnRoID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvbW9udGguaHRtbCcpO1xuXG52YXIgX21vbnRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbnRoKTtcblxudmFyIF93ZWVrID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvd2Vlay5odG1sJyk7XG5cbnZhciBfd2VlazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWVrKTtcblxudmFyIF9kYXkgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9kYXkuaHRtbCcpO1xuXG52YXIgX2RheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBiY0NhbGVuZGFyRGlyZWN0aXZlKCRjb21waWxlKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIC8vIERlZmluZSBwb3NzaWJsZSB0ZW1wbGF0ZXNcblxuICAgIHZhciB0ZW1wbGF0ZXMgPSB7XG4gICAgICAgIHllYXI6IF95ZWFyMi5kZWZhdWx0LFxuICAgICAgICBtb250aDogX21vbnRoMi5kZWZhdWx0LFxuICAgICAgICB3ZWVrOiBfd2VlazIuZGVmYXVsdCxcbiAgICAgICAgZGF5OiBfZGF5Mi5kZWZhdWx0XG4gICAgfTtcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNTdGFydERhdGU6ICdAPycsIC8vIGRhdGUgLSBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgICAgICBiY0VuZERhdGU6ICdAPycsIC8vIGRhdGUgLSBpZiBub3QgcHJlc2VudCwgdXNlIGNyZWF0ZSB1c2luZyBiY0RheXNcbiAgICAgICAgICAgIGJjTmVzdGluZ0RlcHRoOiAnQD8nLCAvLyBzdHJpbmcgW21vbnRofHdlZWt8ZGF5XSAtIGRlZmF1bHRzOiBtb250aFxuICAgICAgICAgICAgYmNEYXlzOiAnQD8nLCAvLyBpbnRlZ2VyIC0gZGVmYXVsdCB0byAzMCAodXNlZCB0byBjcmVhdGUgYmNFbmREYXRlKVxuICAgICAgICAgICAgYmNEYXlUaXRsZUZvcm1hdDogJ0A/JywgLy8gc3RyaW5nIFt3b3JkfGFiYnJldmlhdGlvbnxsZXR0ZXJdIC0gZGVmYXVsdDogYWJicmV2aWF0aW9uXG4gICAgICAgICAgICBiY01vbnRoVGl0bGVGb3JtYXQ6ICdAPycsIC8vIHN0cmluZyAtIGFueSB2YWxpZCBNb21lbnQgZGF0ZSBmb3JtYXQgLSBkZWZhdWx0OiBNTU1NXG4gICAgICAgICAgICBiY0RhdGVTZWxlY3RlZDogJyYnLCAvLyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgZGF0ZSBpcyBzZWxlY3RlZCAodGFwL2NsaWNrKVxuICAgICAgICAgICAgYmNTaG93V2Vla2RheXM6ICc9PycsIC8vIGRldGVybWluZSBpZiB0aGUgd2Vla2RheXMgaGVhZGVyIHNob3VsZCBiZSBjcmVhdGVkXG4gICAgICAgICAgICBiY1Nob3dNb250aFRpdGxlczogJz0/JywgLy8gZGV0ZXJtaW5lIGlmIHRoZSBtb250aCB0aXRsZXMgc2hvdWxkIGJlIHZpc2libGVcbiAgICAgICAgICAgIGJjRGF5VGVtcGxhdGU6ICdAPycsIC8vIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCAnZGF5JyB0ZW1wbGF0ZVxuICAgICAgICAgICAgYmNEYXRlRm9ybWF0OiAnQD8nIH0sXG4gICAgICAgIGxpbms6IGxpbmtGdW5jdGlvbixcbiAgICAgICAgdGVtcGxhdGVVcmw6IF9jYWxlbmRhcjMuZGVmYXVsdCxcbiAgICAgICAgY29udHJvbGxlcjogX2NhbGVuZGFyLkNhbGVuZGFyQ29udHJvbGxlcixcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbiAgICAvKipcbiAgICAgKiBMaW5rXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlua0Z1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgdm0pIHtcblxuICAgICAgICAvLyBTZXQgdGhlIGNvcnJlY3QgdGVtcGxhdGUgYmFzZWQgb24gdGhlIGRlc2lyZWQgbmVzdGluZyBkZXB0aFxuICAgICAgICB2bS5nZXRUZW1wbGF0ZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZXNbdm0ubmVzdGluZ0RlcHRoXTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY2FsZW5kYXIuZGlyZWN0aXZlLmpzXG4gKiovIiwiaW1wb3J0IHsgQ2FsZW5kYXJDb250cm9sbGVyIH0gZnJvbSAnLi9jYWxlbmRhci5jb250cm9sbGVyJztcbmltcG9ydCBjYWxlbmRhclRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGVzL2NhbGVuZGFyLmh0bWwnO1xuaW1wb3J0IHllYXJUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlcy95ZWFyLmh0bWwnO1xuaW1wb3J0IG1vbnRoVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZXMvbW9udGguaHRtbCc7XG5pbXBvcnQgd2Vla1RlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGVzL3dlZWsuaHRtbCc7XG5pbXBvcnQgZGF5VGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZXMvZGF5Lmh0bWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYmNDYWxlbmRhckRpcmVjdGl2ZShcbiAgICAkY29tcGlsZVxuKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIC8vIERlZmluZSBwb3NzaWJsZSB0ZW1wbGF0ZXNcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB7XG4gICAgICAgIHllYXI6IHllYXJUZW1wbGF0ZSxcbiAgICAgICAgbW9udGg6IG1vbnRoVGVtcGxhdGUsXG4gICAgICAgIHdlZWs6IHdlZWtUZW1wbGF0ZSxcbiAgICAgICAgZGF5OiBkYXlUZW1wbGF0ZSxcbiAgICB9O1xuXG4gICAgY29uc3QgZGlyZWN0aXZlID0ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzY29wZToge30sXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgIGJjU3RhcnREYXRlOiAnQD8nLCAgICAgICAvLyBkYXRlIC0gZGVmYXVsdCB0byB0b2RheVxuICAgICAgICAgICAgYmNFbmREYXRlOiAnQD8nLCAgICAgICAgIC8vIGRhdGUgLSBpZiBub3QgcHJlc2VudCwgdXNlIGNyZWF0ZSB1c2luZyBiY0RheXNcbiAgICAgICAgICAgIGJjTmVzdGluZ0RlcHRoOiAnQD8nLCAgICAvLyBzdHJpbmcgW21vbnRofHdlZWt8ZGF5XSAtIGRlZmF1bHRzOiBtb250aFxuICAgICAgICAgICAgYmNEYXlzOiAnQD8nLCAgICAgICAgICAgIC8vIGludGVnZXIgLSBkZWZhdWx0IHRvIDMwICh1c2VkIHRvIGNyZWF0ZSBiY0VuZERhdGUpXG4gICAgICAgICAgICBiY0RheVRpdGxlRm9ybWF0OiAnQD8nLCAvLyBzdHJpbmcgW3dvcmR8YWJicmV2aWF0aW9ufGxldHRlcl0gLSBkZWZhdWx0OiBhYmJyZXZpYXRpb25cbiAgICAgICAgICAgIGJjTW9udGhUaXRsZUZvcm1hdDogJ0A/JywvLyBzdHJpbmcgLSBhbnkgdmFsaWQgTW9tZW50IGRhdGUgZm9ybWF0IC0gZGVmYXVsdDogTU1NTVxuICAgICAgICAgICAgYmNEYXRlU2VsZWN0ZWQ6ICcmJywgICAgIC8vIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkYXRlIGlzIHNlbGVjdGVkICh0YXAvY2xpY2spXG4gICAgICAgICAgICBiY1Nob3dXZWVrZGF5czogJz0/JywgICAgLy8gZGV0ZXJtaW5lIGlmIHRoZSB3ZWVrZGF5cyBoZWFkZXIgc2hvdWxkIGJlIGNyZWF0ZWRcbiAgICAgICAgICAgIGJjU2hvd01vbnRoVGl0bGVzOiAnPT8nLCAvLyBkZXRlcm1pbmUgaWYgdGhlIG1vbnRoIHRpdGxlcyBzaG91bGQgYmUgdmlzaWJsZVxuICAgICAgICAgICAgYmNEYXlUZW1wbGF0ZTogJ0A/JywgICAgIC8vIG92ZXJ3cml0ZSB0aGUgZGVmYXVsdCAnZGF5JyB0ZW1wbGF0ZVxuICAgICAgICAgICAgYmNEYXRlRm9ybWF0OiAnQD8nLCAgICAgIC8vIGRlZmluZSBhIGN1c3RvbSBkYXRlIGZvcm1hdCBmb3IgdGhlIGRheVxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBsaW5rRnVuY3Rpb24sXG4gICAgICAgIHRlbXBsYXRlVXJsOiBjYWxlbmRhclRlbXBsYXRlLFxuICAgICAgICBjb250cm9sbGVyOiBDYWxlbmRhckNvbnRyb2xsZXIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxuXG5cblxuICAgIC8qKlxuICAgICAqIExpbmtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaW5rRnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCB2bSkge1xuXG4gICAgICAgIC8vIFNldCB0aGUgY29ycmVjdCB0ZW1wbGF0ZSBiYXNlZCBvbiB0aGUgZGVzaXJlZCBuZXN0aW5nIGRlcHRoXG4gICAgICAgIHZtLmdldFRlbXBsYXRlVXJsID0gKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlc1t2bS5uZXN0aW5nRGVwdGhdO1xuICAgICAgICB9O1xuXG4gICAgfVxuXG5cblxufVxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vfi9lc2xpbnQtbG9hZGVyIS4vc3JjL2NhbGVuZGFyLmRpcmVjdGl2ZS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQ2FsZW5kYXJDb250cm9sbGVyID0gZXhwb3J0cy5DYWxlbmRhckNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FsZW5kYXJDb250cm9sbGVyKCR0ZW1wbGF0ZUNhY2hlLCBiY0NhbGVuZGFyQ29uZmlnLCBiY0NhbGVuZGFyU2VydmljZSkge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYWxlbmRhckNvbnRyb2xsZXIpO1xuXG4gICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUgPSAkdGVtcGxhdGVDYWNoZTtcbiAgICAgICAgdGhpcy5iY0NhbGVuZGFyQ29uZmlnID0gYmNDYWxlbmRhckNvbmZpZztcbiAgICAgICAgdGhpcy5iY0NhbGVuZGFyU2VydmljZSA9IGJjQ2FsZW5kYXJTZXJ2aWNlO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENhbGVuZGFyQ29udHJvbGxlciwgW3tcbiAgICAgICAga2V5OiAnX2FjdGl2YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hY3RpdmF0ZSgpIHtcbiAgICAgICAgICAgIC8vIERlZmluZSB0b2RheSdzIGRhdGVcbiAgICAgICAgICAgIHRoaXMudG9kYXkgPSBtb21lbnQobmV3IERhdGUoKSkuc3RhcnRPZignZGF5Jyk7XG5cbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgc3RhcnQgZGF0ZSBmb3IgdGhlIGNhbGVuZGFyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IHRoaXMuYmNTdGFydERhdGUgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLnN0YXJ0RGF0ZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGVuZCBkYXRlIHdhcyBkZWZpbmVkXG4gICAgICAgICAgICBpZiAodGhpcy5iY0VuZERhdGUpIHtcblxuICAgICAgICAgICAgICAgIC8vIERlZmluZSBob3cgbWFueSBkYXlzIGFyZSBuZWVkZWQgdXNpbmcgdGhlIGVuZCBkYXRlXG4gICAgICAgICAgICAgICAgdGhpcy5kYXlzID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5kdXJhdGlvbkluRGF5cyh0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5iY0VuZERhdGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIC8vIERlZmluZSBob3cgbWFueSBkYXlzIGFyZSBuZWVkZWQgZnJvbSB0aGUgY291bnQgcGFzc2VkIGluIG9yIHRoZSBjb25maWdcbiAgICAgICAgICAgICAgICB0aGlzLmRheXMgPSBwYXJzZUludCh0aGlzLmJjRGF5cyB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcuZGF5cywgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZpbmUgaG93IGRlZXAgdG8gb3JnYW5pemUgdGhlIGNhbGVuZGFyXG4gICAgICAgICAgICB0aGlzLm5lc3RpbmdEZXB0aCA9IHRoaXMuYmNOZXN0aW5nRGVwdGggfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLm5lc3RpbmdEZXB0aDtcblxuICAgICAgICAgICAgLy8gRGVmaW5lIHRoZSB3ZWVrZGF5IGhlYWRlcnMgZm9ybWF0XG4gICAgICAgICAgICB0aGlzLndlZWtkYXlzID0gdGhpcy5iY0RheVRpdGxlRm9ybWF0ID8gdGhpcy5iY0NhbGVuZGFyQ29uZmlnLndlZWtkYXlTdHlsZVt0aGlzLmJjRGF5VGl0bGVGb3JtYXRdIDogdGhpcy5iY0NhbGVuZGFyQ29uZmlnLndlZWtkYXlTdHlsZVt0aGlzLmJjQ2FsZW5kYXJDb25maWcuZGF5VGl0bGVGb3JtYXRdO1xuXG4gICAgICAgICAgICAvLyBEZWZpbmUgdGhlIGZvcm1hdCBmb3IgdGhlIG1vbnRoIHRpdGxlXG4gICAgICAgICAgICB0aGlzLm1vbnRoVGl0bGVGb3JtYXQgPSB0aGlzLmJjTW9udGhUaXRsZUZvcm1hdCB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcubW9udGhUaXRsZUZvcm1hdDtcblxuICAgICAgICAgICAgLy8gRGVmaW5lIGlmIG1vbnRoIHRpdGxlcyBzaG91bGQgYmUgdmlzaWJsZVxuICAgICAgICAgICAgdGhpcy5zaG93TW9udGhUaXRsZXMgPSB0eXBlb2YgdGhpcy5iY1Nob3dNb250aFRpdGxlcyA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5iY1Nob3dNb250aFRpdGxlcyA6IHRoaXMuYmNDYWxlbmRhckNvbmZpZy5zaG93TW9udGhUaXRsZXM7XG5cbiAgICAgICAgICAgIC8vIEluaXRpYWxseSBubyBkYXRlIGlzIHNlbGVjdGVkXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY2FsZW5kYXIgd2Vla2RheXMgaGVhZGVyc1xuICAgICAgICAgICAgdGhpcy5zaG93V2Vla2RheXMgPSB0eXBlb2YgdGhpcy5iY1Nob3dXZWVrZGF5cyA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5iY1Nob3dXZWVrZGF5cyA6IHRoaXMuYmNDYWxlbmRhckNvbmZpZy5zaG93V2Vla2RheXM7XG5cbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgdGVtcGxhdGUgZm9yIGFuIGluZGl2aWR1YWwgZGF5XG4gICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBkZWZpbmVkIGEgdGVtcGxhdGUgb24gdGhlIGRpcmVjdGl2ZVxuICAgICAgICAgICAgaWYgKHRoaXMuYmNEYXlUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGRlZmluZWQgYSB0ZW1wbGF0ZSBpbiB0aGUgcHJvdmlkZXJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVMb2NhdGlvbiA9ICd1c2VyRGF5VGVtcGxhdGUuaHRtbCc7XG5cbiAgICAgICAgICAgICAgICAvLyBQdXQgdGhlIHVzZXIgdGVtcGxhdGUgaW50byB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICB0aGlzLiR0ZW1wbGF0ZUNhY2hlLnB1dCh0ZW1wbGF0ZUxvY2F0aW9uLCB0aGlzLmJjRGF5VGVtcGxhdGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBsb2NhdGlvbiB0byB0aGUgZGlyZWN0aXZlXG4gICAgICAgICAgICAgICAgdGhpcy5kYXlUZW1wbGF0ZSA9IHRlbXBsYXRlTG9jYXRpb247XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmNDYWxlbmRhckNvbmZpZy51c2VyRGF5VGVtcGxhdGUpIHtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGRlZmluZWQgYSB0ZW1wbGF0ZSBpbiB0aGUgcHJvdmlkZXJcbiAgICAgICAgICAgICAgICB2YXIgX3RlbXBsYXRlTG9jYXRpb24gPSAndXNlckRheVRlbXBsYXRlLmh0bWwnO1xuXG4gICAgICAgICAgICAgICAgLy8gUHV0IHRoZSB1c2VyIHRlbXBsYXRlIGludG8gdGhlIGNhY2hlXG4gICAgICAgICAgICAgICAgdGhpcy4kdGVtcGxhdGVDYWNoZS5wdXQoX3RlbXBsYXRlTG9jYXRpb24sIHRoaXMuYmNDYWxlbmRhckNvbmZpZy51c2VyRGF5VGVtcGxhdGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gRXhwb3NlIHRoZSBsb2NhdGlvbiB0byB0aGUgZGlyZWN0aXZlXG4gICAgICAgICAgICAgICAgdGhpcy5kYXlUZW1wbGF0ZSA9IF90ZW1wbGF0ZUxvY2F0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBubyB0ZW1wbGF0ZSBmcm9tIHRoZSB1c2VyXG5cbiAgICAgICAgICAgICAgICAvLyBFeHBvc2UgdGhlIGRlZmF1bHQgdGVtcGxhdGUgbG9jYXRpb24gdG8gdGhlIGRpcmVjdGl2ZVxuICAgICAgICAgICAgICAgIHRoaXMuZGF5VGVtcGxhdGUgPSB0aGlzLmJjQ2FsZW5kYXJDb25maWcuZGF5VGVtcGxhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgZGF0ZSBmb3JtYXQgZm9yIHRoZSBpbmRpdmlkdWFsIGRheVxuICAgICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5iY0RhdGVGb3JtYXQgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRhdGVGb3JtYXQ7XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIGFycmF5IG9mIGRheXNcbiAgICAgICAgICAgIHZhciBkYXlzID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5idWlsZERheXModGhpcy5kYXlzLCB0aGlzLnN0YXJ0RGF0ZSk7XG5cbiAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBjYWxlbmRhciBKU09OIGFuZCBleHBvc2UgdG8gdGhlIERPTVxuICAgICAgICAgICAgdGhpcy5fYnVpbGRDYWxlbmRhcihkYXlzLCB0aGlzLm5lc3RpbmdEZXB0aCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBkYXkgaXMgcHJpb3IgdG8gdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgICAgKiBUaGlzIGlzIHVzZWQgdG8gZGlzYWJsZSB0aGUgdW5zZWxlY3RhYmxlIGRheXNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtEYXRlfSBkYXRlXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2x9XG4gICAgICAgICAqL1xuXG4gICAgfSwge1xuICAgICAgICBrZXk6ICdpc0JlZm9yZVRvZGF5JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzQmVmb3JlVG9kYXkoZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmNDYWxlbmRhclNlcnZpY2UuZGF0ZUlzQmVmb3JlVG9kYXkoZGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgdG8gc2VlIGlmIHRoZSBkYXkgbWF0Y2hlcyB0aGUgY3VycmVudCBkYXRlXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RGF0ZX0gZGF0ZVxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sfVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnaXNEYXlUb2RheScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc0RheVRvZGF5KGRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJjQ2FsZW5kYXJTZXJ2aWNlLmlzRGF5VG9kYXkoZGF0ZSwgdGhpcy5zdGFydERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbGVjdCBhIGRhdGVcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGRheVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc2VsZWN0RGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZWxlY3REYXRlKGRheSkge1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBzZWxlY3RlZCBkYXlcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRlID0gZGF5O1xuXG4gICAgICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIHBhc3NlZCBtZXRob2QgaWYgaXQgZXhpc3RzIGFuZCBhIHZhbGlkIGRhdGUgd2FzIGNob3NlblxuICAgICAgICAgICAgaWYgKGRheS5kYXRlICYmIHRoaXMuYmNEYXRlU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJjRGF0ZVNlbGVjdGVkKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF5LmRhdGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3JtYXQgYSBkYXRlIHVzaW5nIG1vbWVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0XG4gICAgICAgICAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkRGF0ZVxuICAgICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZm9ybWF0RGF0ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbW9tZW50KGRhdGUpLmZvcm1hdChmb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkIHRoZSBjYWxlbmRhciBKU09OXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGRheXNcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGRlcHRoXG4gICAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgICAgICovXG5cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ19idWlsZENhbGVuZGFyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9idWlsZENhbGVuZGFyKGRheXMsIGRlcHRoKSB7XG5cbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGNvcnJlY3Qgb3JnYW5pemF0aW9uIG1ldGhvZCBiYXNlZCBvbiB0aGUgbmVzdGluZyBkZXB0aFxuICAgICAgICAgICAgaWYgKGRlcHRoID09PSAnbW9udGgnKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJjQ29sbGVjdGlvbiA9IHRoaXMuYmNDYWxlbmRhclNlcnZpY2Uub3JnYW5pemVNb250aHMoZGF5cyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09PSAnd2VlaycpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuYmNDb2xsZWN0aW9uID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5vcmdhbml6ZVdlZWtzKGRheXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PT0gJ2RheScpIHtcblxuICAgICAgICAgICAgICAgIHRoaXMuYmNDb2xsZWN0aW9uID0gZGF5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDYWxlbmRhckNvbnRyb2xsZXI7XG59KCk7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvY2FsZW5kYXIuY29udHJvbGxlci5qc1xuICoqLyIsImV4cG9ydCBjbGFzcyBDYWxlbmRhckNvbnRyb2xsZXIge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgICR0ZW1wbGF0ZUNhY2hlLFxuICAgICAgICBiY0NhbGVuZGFyQ29uZmlnLCBiY0NhbGVuZGFyU2VydmljZVxuICAgICkge1xuICAgICAgICAnbmdJbmplY3QnO1xuXG4gICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUgPSAkdGVtcGxhdGVDYWNoZTtcbiAgICAgICAgdGhpcy5iY0NhbGVuZGFyQ29uZmlnID0gYmNDYWxlbmRhckNvbmZpZztcbiAgICAgICAgdGhpcy5iY0NhbGVuZGFyU2VydmljZSA9IGJjQ2FsZW5kYXJTZXJ2aWNlO1xuXG5cbiAgICAgICAgdGhpcy5fYWN0aXZhdGUoKTtcblxuICAgIH1cblxuXG5cblxuICAgIF9hY3RpdmF0ZSgpIHtcbiAgICAgICAgLy8gRGVmaW5lIHRvZGF5J3MgZGF0ZVxuICAgICAgICB0aGlzLnRvZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN0YXJ0T2YoJ2RheScpO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgc3RhcnQgZGF0ZSBmb3IgdGhlIGNhbGVuZGFyXG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gdGhpcy5iY1N0YXJ0RGF0ZSB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcuc3RhcnREYXRlO1xuXG4gICAgICAgIC8vIElmIHRoZSBlbmQgZGF0ZSB3YXMgZGVmaW5lZFxuICAgICAgICBpZiAodGhpcy5iY0VuZERhdGUpIHtcblxuICAgICAgICAgICAgLy8gRGVmaW5lIGhvdyBtYW55IGRheXMgYXJlIG5lZWRlZCB1c2luZyB0aGUgZW5kIGRhdGVcbiAgICAgICAgICAgIHRoaXMuZGF5cyA9IHRoaXMuYmNDYWxlbmRhclNlcnZpY2UuZHVyYXRpb25JbkRheXModGhpcy5zdGFydERhdGUsIHRoaXMuYmNFbmREYXRlKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBEZWZpbmUgaG93IG1hbnkgZGF5cyBhcmUgbmVlZGVkIGZyb20gdGhlIGNvdW50IHBhc3NlZCBpbiBvciB0aGUgY29uZmlnXG4gICAgICAgICAgICB0aGlzLmRheXMgPSBwYXJzZUludCh0aGlzLmJjRGF5cyB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcuZGF5cywgMTApO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZpbmUgaG93IGRlZXAgdG8gb3JnYW5pemUgdGhlIGNhbGVuZGFyXG4gICAgICAgIHRoaXMubmVzdGluZ0RlcHRoID0gdGhpcy5iY05lc3RpbmdEZXB0aCB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcubmVzdGluZ0RlcHRoO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgd2Vla2RheSBoZWFkZXJzIGZvcm1hdFxuICAgICAgICB0aGlzLndlZWtkYXlzID0gdGhpcy5iY0RheVRpdGxlRm9ybWF0ID9cbiAgICAgICAgICAgIHRoaXMuYmNDYWxlbmRhckNvbmZpZy53ZWVrZGF5U3R5bGVbdGhpcy5iY0RheVRpdGxlRm9ybWF0XSA6XG4gICAgICAgICAgICB0aGlzLmJjQ2FsZW5kYXJDb25maWcud2Vla2RheVN0eWxlW3RoaXMuYmNDYWxlbmRhckNvbmZpZy5kYXlUaXRsZUZvcm1hdF07XG5cbiAgICAgICAgLy8gRGVmaW5lIHRoZSBmb3JtYXQgZm9yIHRoZSBtb250aCB0aXRsZVxuICAgICAgICB0aGlzLm1vbnRoVGl0bGVGb3JtYXQgPSB0aGlzLmJjTW9udGhUaXRsZUZvcm1hdCB8fCB0aGlzLmJjQ2FsZW5kYXJDb25maWcubW9udGhUaXRsZUZvcm1hdDtcblxuICAgICAgICAvLyBEZWZpbmUgaWYgbW9udGggdGl0bGVzIHNob3VsZCBiZSB2aXNpYmxlXG4gICAgICAgIHRoaXMuc2hvd01vbnRoVGl0bGVzID0gdHlwZW9mKHRoaXMuYmNTaG93TW9udGhUaXRsZXMpID09PSAnYm9vbGVhbicgP1xuICAgICAgICAgICAgdGhpcy5iY1Nob3dNb250aFRpdGxlcyA6IHRoaXMuYmNDYWxlbmRhckNvbmZpZy5zaG93TW9udGhUaXRsZXM7XG5cbiAgICAgICAgLy8gSW5pdGlhbGx5IG5vIGRhdGUgaXMgc2VsZWN0ZWRcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBudWxsO1xuXG4gICAgICAgIC8vIFNldCB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgY2FsZW5kYXIgd2Vla2RheXMgaGVhZGVyc1xuICAgICAgICB0aGlzLnNob3dXZWVrZGF5cyA9IHR5cGVvZih0aGlzLmJjU2hvd1dlZWtkYXlzKSA9PT0gJ2Jvb2xlYW4nID9cbiAgICAgICAgICAgIHRoaXMuYmNTaG93V2Vla2RheXMgOiB0aGlzLmJjQ2FsZW5kYXJDb25maWcuc2hvd1dlZWtkYXlzO1xuXG4gICAgICAgIC8vIERlZmluZSB0aGUgdGVtcGxhdGUgZm9yIGFuIGluZGl2aWR1YWwgZGF5XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRlZmluZWQgYSB0ZW1wbGF0ZSBvbiB0aGUgZGlyZWN0aXZlXG4gICAgICAgIGlmICh0aGlzLmJjRGF5VGVtcGxhdGUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGRlZmluZWQgYSB0ZW1wbGF0ZSBpbiB0aGUgcHJvdmlkZXJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlTG9jYXRpb24gPSAndXNlckRheVRlbXBsYXRlLmh0bWwnO1xuXG4gICAgICAgICAgICAvLyBQdXQgdGhlIHVzZXIgdGVtcGxhdGUgaW50byB0aGUgY2FjaGVcbiAgICAgICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlTG9jYXRpb24sIHRoaXMuYmNEYXlUZW1wbGF0ZSk7XG5cbiAgICAgICAgICAgIC8vIEV4cG9zZSB0aGUgbG9jYXRpb24gdG8gdGhlIGRpcmVjdGl2ZVxuICAgICAgICAgICAgdGhpcy5kYXlUZW1wbGF0ZSA9IHRlbXBsYXRlTG9jYXRpb247XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmJjQ2FsZW5kYXJDb25maWcudXNlckRheVRlbXBsYXRlKSB7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyIGRlZmluZWQgYSB0ZW1wbGF0ZSBpbiB0aGUgcHJvdmlkZXJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlTG9jYXRpb24gPSAndXNlckRheVRlbXBsYXRlLmh0bWwnO1xuXG4gICAgICAgICAgICAvLyBQdXQgdGhlIHVzZXIgdGVtcGxhdGUgaW50byB0aGUgY2FjaGVcbiAgICAgICAgICAgIHRoaXMuJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlTG9jYXRpb24sIHRoaXMuYmNDYWxlbmRhckNvbmZpZy51c2VyRGF5VGVtcGxhdGUpO1xuXG4gICAgICAgICAgICAvLyBFeHBvc2UgdGhlIGxvY2F0aW9uIHRvIHRoZSBkaXJlY3RpdmVcbiAgICAgICAgICAgIHRoaXMuZGF5VGVtcGxhdGUgPSB0ZW1wbGF0ZUxvY2F0aW9uO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBubyB0ZW1wbGF0ZSBmcm9tIHRoZSB1c2VyXG5cbiAgICAgICAgICAgIC8vIEV4cG9zZSB0aGUgZGVmYXVsdCB0ZW1wbGF0ZSBsb2NhdGlvbiB0byB0aGUgZGlyZWN0aXZlXG4gICAgICAgICAgICB0aGlzLmRheVRlbXBsYXRlID0gdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRheVRlbXBsYXRlO1xuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZpbmUgdGhlIGRhdGUgZm9ybWF0IGZvciB0aGUgaW5kaXZpZHVhbCBkYXlcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5iY0RhdGVGb3JtYXQgfHwgdGhpcy5iY0NhbGVuZGFyQ29uZmlnLmRhdGVGb3JtYXQ7XG5cbiAgICAgICAgLy8gQnVpbGQgYXJyYXkgb2YgZGF5c1xuICAgICAgICBjb25zdCBkYXlzID0gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5idWlsZERheXModGhpcy5kYXlzLCB0aGlzLnN0YXJ0RGF0ZSk7XG5cbiAgICAgICAgLy8gQnVpbGQgdGhlIGNhbGVuZGFyIEpTT04gYW5kIGV4cG9zZSB0byB0aGUgRE9NXG4gICAgICAgIHRoaXMuX2J1aWxkQ2FsZW5kYXIoZGF5cywgdGhpcy5uZXN0aW5nRGVwdGgpO1xuXG4gICAgfVxuXG5cblxuXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0byBzZWUgaWYgdGhlIGRheSBpcyBwcmlvciB0byB0aGUgY3VycmVudCBkYXRlXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIGRpc2FibGUgdGhlIHVuc2VsZWN0YWJsZSBkYXlzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RhdGV9IGRhdGVcbiAgICAgKiBAcmV0dXJuIHtCb29sfVxuICAgICAqL1xuICAgIGlzQmVmb3JlVG9kYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5iY0NhbGVuZGFyU2VydmljZS5kYXRlSXNCZWZvcmVUb2RheShkYXRlKTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHRvIHNlZSBpZiB0aGUgZGF5IG1hdGNoZXMgdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtEYXRlfSBkYXRlXG4gICAgICogQHJldHVybiB7Qm9vbH1cbiAgICAgKi9cbiAgICBpc0RheVRvZGF5KGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmNDYWxlbmRhclNlcnZpY2UuaXNEYXlUb2RheShkYXRlLCB0aGlzLnN0YXJ0RGF0ZSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSBkYXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF5XG4gICAgICovXG4gICAgc2VsZWN0RGF0ZShkYXkpIHtcbiAgICAgICAgLy8gU2V0IHRoZSBzZWxlY3RlZCBkYXlcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXk7XG5cbiAgICAgICAgLy8gT25seSBjYWxsIHRoZSBwYXNzZWQgbWV0aG9kIGlmIGl0IGV4aXN0cyBhbmQgYSB2YWxpZCBkYXRlIHdhcyBjaG9zZW5cbiAgICAgICAgaWYgKGRheS5kYXRlICYmIHRoaXMuYmNEYXRlU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmNEYXRlU2VsZWN0ZWQoe1xuICAgICAgICAgICAgICAgIGRhdGU6IGRheS5kYXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCBhIGRhdGUgdXNpbmcgbW9tZW50XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGZvcm1hdHRlZERhdGVcbiAgICAgKi9cbiAgICBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb21lbnQoZGF0ZSkuZm9ybWF0KGZvcm1hdCk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCB0aGUgY2FsZW5kYXIgSlNPTlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF5c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkZXB0aFxuICAgICAqIEByZXR1cm4ge0VsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBfYnVpbGRDYWxlbmRhcihkYXlzLCBkZXB0aCkge1xuXG4gICAgICAgIC8vIENhbGwgdGhlIGNvcnJlY3Qgb3JnYW5pemF0aW9uIG1ldGhvZCBiYXNlZCBvbiB0aGUgbmVzdGluZyBkZXB0aFxuICAgICAgICBpZiAoZGVwdGggPT09ICdtb250aCcpIHtcblxuICAgICAgICAgICAgdGhpcy5iY0NvbGxlY3Rpb24gPSB0aGlzLmJjQ2FsZW5kYXJTZXJ2aWNlLm9yZ2FuaXplTW9udGhzKGRheXMpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT09ICd3ZWVrJykge1xuXG4gICAgICAgICAgICB0aGlzLmJjQ29sbGVjdGlvbiA9IHRoaXMuYmNDYWxlbmRhclNlcnZpY2Uub3JnYW5pemVXZWVrcyhkYXlzKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09PSAnZGF5Jykge1xuXG4gICAgICAgICAgICB0aGlzLmJjQ29sbGVjdGlvbiA9IGRheXM7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvY2FsZW5kYXIuY29udHJvbGxlci5qc1xuICoqLyIsInZhciBwYXRoID0gJy9Vc2Vycy9iYy9Db2RlL29wZW4tc291cmNlL2FuZ3VsYXItanNvbi1jYWxlbmRhci9zcmMvdGVtcGxhdGVzL2NhbGVuZGFyLmh0bWwnO1xudmFyIGh0bWwgPSBcIjxzZWN0aW9uIGNsYXNzPWJjLWNhbGVuZGFyPiA8c3BhbiBjbGFzcz1iYy1jYWxlbmRhcl9fd2Vla2RheXMgZGF0YS1uZy1pZj1cXFwidm0uc2hvd1dlZWtkYXlzICYmIHZtLm5lc3RpbmdEZXB0aCA9PT0gJ3dlZWsnXFxcIj4gPHNwYW4gY2xhc3M9XFxcImJjLWNhbGVuZGFyX19kYXkgYmMtY2FsZW5kYXJfX2RheS0td2Vla2RheXNcXFwiIGRhdGEtbmctcmVwZWF0PVxcXCJkYXkgaW4gdm0ud2Vla2RheXMgdHJhY2sgYnkgJGluZGV4XFxcIj4gPHN0cm9uZyBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5LXRpdGxlPiB7eyBkYXkgfX0gPC9zdHJvbmc+IDwvc3Bhbj4gPC9zcGFuPiA8ZGl2IGRhdGEtbmctaW5jbHVkZT12bS5nZXRUZW1wbGF0ZVVybCgpPjwvZGl2PiA8L3NlY3Rpb24+XCI7XG53aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy9jYWxlbmRhci5odG1sXG4gKiogbW9kdWxlIGlkID0gNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwIDFcbiAqKi8iLCJ2YXIgcGF0aCA9ICcvVXNlcnMvYmMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWpzb24tY2FsZW5kYXIvc3JjL3RlbXBsYXRlcy95ZWFyLmh0bWwnO1xudmFyIGh0bWwgPSBcIjxkaXYgY2xhc3M9YmMtY2FsZW5kYXJfX3llYXIgZGF0YS1uZy1yZXBlYXQ9XFxcInllYXIgaW4gdm0uYmNDb2xsZWN0aW9uIHRyYWNrIGJ5ICRpbmRleFxcXCI+IDxiYy1tb250aCBiYy1jb2xsZWN0aW9uPXllYXIgYmMtd2Vla3MtaGVhZGVyPXZtLndlZWtkYXlzSGVhZGVyPjwvYmMtbW9udGg+IDwvZGl2PlwiO1xud2luZG93LmFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oYykgeyBjLnB1dChwYXRoLCBodG1sKSB9XSk7XG5tb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy90ZW1wbGF0ZXMveWVhci5odG1sXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwIDFcbiAqKi8iLCJ2YXIgcGF0aCA9ICcvVXNlcnMvYmMvQ29kZS9vcGVuLXNvdXJjZS9hbmd1bGFyLWpzb24tY2FsZW5kYXIvc3JjL3RlbXBsYXRlcy9tb250aC5odG1sJztcbnZhciBodG1sID0gXCI8dGltZSBjbGFzcz1iYy1jYWxlbmRhcl9fbW9udGggZGF0ZXRpbWU9XFxcInt7IG1vbnRoWzBdW21vbnRoWzBdLmxlbmd0aCAtIDFdLmRhdGUgfCBkYXRlOid5eXl5LU1NJyB9fVxcXCIgZGF0YS1uZy1yZXBlYXQ9XFxcIm1vbnRoIGluIHZtLmJjQ29sbGVjdGlvbiB0cmFjayBieSAkaW5kZXhcXFwiPiA8c3BhbiBjbGFzcz1iYy1jYWxlbmRhcl9fbW9udGgtdGl0bGUgZGF0YS1uZy1iaW5kPVxcXCJ2bS5mb3JtYXREYXRlKG1vbnRoWzBdW21vbnRoWzBdLmxlbmd0aCAtIDFdLmRhdGUsIHZtLm1vbnRoVGl0bGVGb3JtYXQpXFxcIiBkYXRhLW5nLWlmPXZtLnNob3dNb250aFRpdGxlcz48L3NwYW4+IDxzcGFuIGNsYXNzPWJjLWNhbGVuZGFyX193ZWVrZGF5cyBkYXRhLW5nLWlmPXZtLnNob3dXZWVrZGF5cz4gPHNwYW4gY2xhc3M9XFxcImJjLWNhbGVuZGFyX19kYXkgYmMtY2FsZW5kYXJfX2RheS0td2Vla2RheXNcXFwiIGRhdGEtbmctcmVwZWF0PVxcXCJkYXkgaW4gdm0ud2Vla2RheXMgdHJhY2sgYnkgJGluZGV4XFxcIj4gPHN0cm9uZyBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5LXRpdGxlPiB7eyBkYXkgfX0gPC9zdHJvbmc+IDwvc3Bhbj4gPC9zcGFuPiA8YmMtd2VlayBiYy1jb2xsZWN0aW9uPW1vbnRoPjwvYmMtd2Vlaz4gPC90aW1lPlwiO1xud2luZG93LmFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oYykgeyBjLnB1dChwYXRoLCBodG1sKSB9XSk7XG5tb2R1bGUuZXhwb3J0cyA9IHBhdGg7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy90ZW1wbGF0ZXMvbW9udGguaHRtbFxuICoqIG1vZHVsZSBpZCA9IDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMCAxXG4gKiovIiwidmFyIHBhdGggPSAnL1VzZXJzL2JjL0NvZGUvb3Blbi1zb3VyY2UvYW5ndWxhci1qc29uLWNhbGVuZGFyL3NyYy90ZW1wbGF0ZXMvd2Vlay5odG1sJztcbnZhciBodG1sID0gXCI8dGltZSBjbGFzcz1iYy1jYWxlbmRhcl9fd2VlayBkYXRldGltZT1cXFwie3sgd2Vla1t3ZWVrLmxlbmd0aCAtIDFdLmRhdGUgfCBkYXRlOid5eXl5LXd3JyB9fVxcXCIgZGF0YS1uZy1yZXBlYXQ9XFxcIndlZWsgaW4gdm0uYmNDb2xsZWN0aW9uIHRyYWNrIGJ5ICRpbmRleFxcXCI+IDxiYy1kYXkgYmMtY29sbGVjdGlvbj13ZWVrPjwvYmMtZGF5PiA8L3RpbWU+XCI7XG53aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy93ZWVrLmh0bWxcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDAgMVxuICoqLyIsInZhciBwYXRoID0gJy9Vc2Vycy9iYy9Db2RlL29wZW4tc291cmNlL2FuZ3VsYXItanNvbi1jYWxlbmRhci9zcmMvdGVtcGxhdGVzL2RheS5odG1sJztcbnZhciBodG1sID0gXCI8c3BhbiBjbGFzcz1iYy1jYWxlbmRhcl9fZGF5IGRhdGEtbmctY2xhc3M9XFxcInsgJ2JjLWNhbGVuZGFyX19kYXktLWRpc2FibGVkJzogdm0uaXNCZWZvcmVUb2RheShkYXkuZGF0ZSksXFxuICAgICAgICAgICAgICAgICAgICdiYy1jYWxlbmRhcl9fZGF5LS10b2RheSc6IHZtLmlzRGF5VG9kYXkoZGF5LmRhdGUpLFxcbiAgICAgICAgICAgICAgICAgICAnYmMtY2FsZW5kYXJfX2RheS0tZXZlbic6ICRldmVuLFxcbiAgICAgICAgICAgICAgICAgICAnYmMtY2FsZW5kYXJfX2RheS0tb2RkJzogJG9kZCxcXG4gICAgICAgICAgICAgICAgICAgJ2JjLWNhbGVuZGFyX19kYXktLXBhZCc6ICFkYXkuZGF0ZSxcXG4gICAgICAgICAgICAgICAgICAgJ2JjLWNhbGVuZGFyX19kYXktLXZhbGlkJzogZGF5LmRhdGUsXFxuICAgICAgICAgICAgICAgICAgICdiYy1jYWxlbmRhcl9fZGF5LS1zZWxlY3RlZCc6IGRheS5kYXRlID09PSB2bS5zZWxlY3RlZERhdGUuZGF0ZSB9XFxcIiBkYXRhLW5nLWNsaWNrPXZtLnNlbGVjdERhdGUoZGF5KSBkYXRhLW5nLXJlcGVhdD1cXFwiZGF5IGluIHZtLmJjQ29sbGVjdGlvbiB0cmFjayBieSAkaW5kZXhcXFwiIHRpdGxlPWRheS5kYXRlPiA8bmctaW5jbHVkZSBzcmM9dm0uZGF5VGVtcGxhdGU+PC9uZy1pbmNsdWRlPiA8L3NwYW4+XCI7XG53aW5kb3cuYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbihjKSB7IGMucHV0KHBhdGgsIGh0bWwpIH1dKTtcbm1vZHVsZS5leHBvcnRzID0gcGF0aDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL3RlbXBsYXRlcy9kYXkuaHRtbFxuICoqIG1vZHVsZSBpZCA9IDEwXG4gKiogbW9kdWxlIGNodW5rcyA9IDAgMVxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5iY01vbnRoRGlyZWN0aXZlID0gYmNNb250aERpcmVjdGl2ZTtcblxudmFyIF9tb250aCA9IHJlcXVpcmUoJy4vdGVtcGxhdGVzL21vbnRoLmh0bWwnKTtcblxudmFyIF9tb250aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb250aCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGJjTW9udGhEaXJlY3RpdmUoKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNDb2xsZWN0aW9uOiAnPScsXG4gICAgICAgICAgICBiY1dlZWtkYXlzSGVhZGVyOiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IF9tb250aDIuZGVmYXVsdCxcbiAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigpIHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9tb250aC5kaXJlY3RpdmUuanNcbiAqKi8iLCJpbXBvcnQgbW9udGhUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlcy9tb250aC5odG1sJztcblxuZXhwb3J0IGZ1bmN0aW9uIGJjTW9udGhEaXJlY3RpdmUoXG4pIHtcbiAgICAnbmdJbmplY3QnO1xuXG4gICAgY29uc3QgZGlyZWN0aXZlID0ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzY29wZToge30sXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgIGJjQ29sbGVjdGlvbjogJz0nLFxuICAgICAgICAgICAgYmNXZWVrZGF5c0hlYWRlcjogJz0nLFxuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZVVybDogbW9udGhUZW1wbGF0ZSxcbiAgICAgICAgY29udHJvbGxlcjogKCkgPT4ge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxufVxuXG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvbW9udGguZGlyZWN0aXZlLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJjV2Vla0RpcmVjdGl2ZSA9IGJjV2Vla0RpcmVjdGl2ZTtcblxudmFyIF93ZWVrID0gcmVxdWlyZSgnLi90ZW1wbGF0ZXMvd2Vlay5odG1sJyk7XG5cbnZhciBfd2VlazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWVrKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gYmNXZWVrRGlyZWN0aXZlKCkge1xuICAgICduZ0luamVjdCc7XG5cbiAgICB2YXIgZGlyZWN0aXZlID0ge1xuICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzY29wZToge30sXG4gICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHtcbiAgICAgICAgICAgIGJjQ29sbGVjdGlvbjogJz0nXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiBfd2VlazIuZGVmYXVsdCxcbiAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigpIHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy93ZWVrLmRpcmVjdGl2ZS5qc1xuICoqLyIsImltcG9ydCB3ZWVrVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZXMvd2Vlay5odG1sJztcblxuZXhwb3J0IGZ1bmN0aW9uIGJjV2Vla0RpcmVjdGl2ZShcbikge1xuICAgICduZ0luamVjdCc7XG5cbiAgICBjb25zdCBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNDb2xsZWN0aW9uOiAnPScsXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlVXJsOiB3ZWVrVGVtcGxhdGUsXG4gICAgICAgIGNvbnRyb2xsZXI6ICgpID0+IHt9LFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9+L2VzbGludC1sb2FkZXIhLi9zcmMvd2Vlay5kaXJlY3RpdmUuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYmNEYXlEaXJlY3RpdmUgPSBiY0RheURpcmVjdGl2ZTtcblxudmFyIF9kYXkgPSByZXF1aXJlKCcuL3RlbXBsYXRlcy9kYXkuaHRtbCcpO1xuXG52YXIgX2RheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kYXkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBiY0RheURpcmVjdGl2ZShiY0NhbGVuZGFyQ29uZmlnKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIHZhciBkaXJlY3RpdmUgPSB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjoge1xuICAgICAgICAgICAgYmNDb2xsZWN0aW9uOiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IF9kYXkyLmRlZmF1bHQsXG4gICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uIGNvbnRyb2xsZXIoKSB7fSxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfTtcblxuICAgIHJldHVybiBkaXJlY3RpdmU7XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZGF5LmRpcmVjdGl2ZS5qc1xuICoqLyIsImltcG9ydCBkYXlXcmFwcGVyVGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZXMvZGF5Lmh0bWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gYmNEYXlEaXJlY3RpdmUoXG4gICAgYmNDYWxlbmRhckNvbmZpZ1xuKSB7XG4gICAgJ25nSW5qZWN0JztcblxuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHtcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc2NvcGU6IHt9LFxuICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB7XG4gICAgICAgICAgICBiY0NvbGxlY3Rpb246ICc9JyxcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IGRheVdyYXBwZXJUZW1wbGF0ZSxcbiAgICAgICAgY29udHJvbGxlcjogKCkgPT4ge30sXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcblxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL34vZXNsaW50LWxvYWRlciEuL3NyYy9kYXkuZGlyZWN0aXZlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==