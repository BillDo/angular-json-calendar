!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("angular-json-calendar",[],t):"object"==typeof exports?exports["angular-json-calendar"]=t():e["angular-json-calendar"]=t()}(this,function(){return function(e){function t(n){if(a[n])return a[n].exports;var r=a[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var a={};return t.m=e,t.c=a,t.p="",t(0)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=a(1),r=a(3),c=a(4),o=a(11),i=a(12),l=a(13),s=a(14);t["default"]=angular.module("bc.JsonCalendar",[]).provider("bcCalendarConfig",n.bcCalendarConfig).service("bcCalendarService",r.bcCalendarService).directive("bcCalendar",c.bcCalendarDirective).directive("bcYear",o.bcYearDirective).directive("bcMonth",i.bcMonthDirective).directive("bcWeek",l.bcWeekDirective).directive("bcDay",s.bcDayDirective)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarConfig=void 0;var c=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}(),o=a(2),i=n(o);t.bcCalendarConfig=function(){function e(){"ngInject";var t=this;r(this,e),this.startDate=moment(new Date).startOf("day").format(),this.nestingDepth="month",this.days=30,this.weekdayStyle={letter:["S","M","T","W","T","F","S"],abbreviation:["Sun","Mon","Tue","Wed","Thur","Fri","Sat"],word:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},this.dayTitleFormat="abbreviation",this.showWeekdays=!0,this.dayTemplate=i["default"],this.setDayTemplate=function(e){t.userDayTemplate=e},this.dateFormat="D",this.monthTitleFormat="MMMM",this.showMonthTitles=!0}return c(e,[{key:"$get",value:function(){return this}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.inner.html",n='<time datetime="{{ day.date | date:\'yyyy-MM-dd\' }}" class=bc-calendar__day-time title="{{ day.date }}" data-ng-if=day.date> <span data-ng-bind="$ctrl.formatDate(day.date, $ctrl.dateFormat)"></span> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.bcCalendarService=function(){function e(){"ngInject";a(this,e),this.WEEK_LENGTH=7,this.dayTemplate}return n(e,[{key:"dateIsBeforeToday",value:function(e){var t=moment(new Date).startOf("day").format();return moment(e).isBefore(t)}},{key:"isDayToday",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?moment(new Date).format():arguments[1];return moment(e).isSame(t)}},{key:"integerToArray",value:function(e){var t=void 0,a=[];for(t=0;t<e;t+=1)a.push(t);return a}},{key:"padDaysLeft",value:function(e,t){var a=[],n=this.integerToArray(t);for(var r in n){var c=parseInt(r,10)+1,o=moment(e).subtract(c,"days").toISOString();a.unshift({date:o})}return a}},{key:"padBlankTiles",value:function(e,t){var a=arguments.length<=2||void 0===arguments[2]?"left":arguments[2],n=void 0,r=[];for(n=0;n<t;n+=1)r.push({date:null});return"right"===a?e.concat(r):"left"===a?r.concat(e):void 0}},{key:"chunk",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?this.WEEK_LENGTH:arguments[1],a=[],n=0,r=e.length/parseInt(t,10);n<r;)a[n]=e.splice(0,t),n+=1;return a}},{key:"durationInDays",value:function(e,t){var a=moment(e).startOf("day"),n=moment(t).startOf("day").add(1,"days");return n.diff(a,"days")}},{key:"organizeWeeks",value:function(e){var t=moment(e[0].date).day(),a=moment(e[e.length-1].date).day(),n=6,r=0;return t>r&&(e=this.padBlankTiles(e,t,"left")),a<n&&(e=this.padBlankTiles(e,this.WEEK_LENGTH-(a+1),"right")),this.chunk(e)}},{key:"organizeMonths",value:function(e){var t=[],a=6,n=0,r=e,c=void 0,o=moment(r[0].date).date(),i=moment(r[0].date).daysInMonth();if(moment(r[0].date).date()>0){c=r.slice(0,i-(o-1));var l=this.padDaysLeft(c[0].date,o-1);r=l.concat(r)}for(;r.length>0;){o=moment(r[0].date).date(),i=moment(r[0].date).daysInMonth(),c=r.splice(0,i-(o-1));var s=moment(c[0].date).day();s>n&&(c=this.padBlankTiles(c,s,"left"));var d=moment(c[c.length-1].date).day();d<a&&(c=this.padBlankTiles(c,this.WEEK_LENGTH-(d+1),"right")),t.push(this.chunk(c))}return t}},{key:"buildDays",value:function(e){for(var t=arguments.length<=1||void 0===arguments[1]?new Date:arguments[1],a=0,n=[],r=void 0;a<e;)r=moment(t).add(a,"days").toISOString(),n.push({date:r}),a+=1;return n}},{key:"storeDayTemplate",value:function(e){this.dayTemplate=e}},{key:"getDayTemplate",value:function(){return this.dayTemplate}}]),e}()},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";function e(e,a,n,r){r.getTemplateUrl=function(){return t[r.nestingDepth]}}var t={year:s["default"],month:u["default"],week:h["default"],day:f["default"]},a={restrict:"E",scope:{},bindToController:{bcStartDate:"@?",bcEndDate:"@?",bcNestingDepth:"@?",bcDays:"@?",bcDayTitleFormat:"@?",bcMonthTitleFormat:"@?",bcDateSelected:"&",bcShowWeekdays:"=?",bcShowMonthTitles:"=?",bcDayTemplate:"@?",bcDateFormat:"@?"},link:e,templateUrl:i["default"],controller:c.CalendarController,controllerAs:"$ctrl"};return a}Object.defineProperty(t,"__esModule",{value:!0}),t.bcCalendarDirective=r;var c=a(5),o=a(6),i=n(o),l=a(7),s=n(l),d=a(8),u=n(d),y=a(9),h=n(y),b=a(10),f=n(b)},function(e,t){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,a,n){return a&&e(t.prototype,a),n&&e(t,n),t}}();t.CalendarController=function(){function e(t,n,r){"ngInject";a(this,e),this.$templateCache=t,this.bcCalendarConfig=n,this.bcCalendarService=r,this._activate()}return e.$inject=["$templateCache","bcCalendarConfig","bcCalendarService"],n(e,[{key:"_activate",value:function(){if(this.today=moment(new Date).startOf("day"),this.startDate=this.bcStartDate||this.bcCalendarConfig.startDate,this.bcEndDate?this.days=this.bcCalendarService.durationInDays(this.startDate,this.bcEndDate):this.days=parseInt(this.bcDays||this.bcCalendarConfig.days,10),this.nestingDepth=this.bcNestingDepth||this.bcCalendarConfig.nestingDepth,this.weekdays=this.bcDayTitleFormat?this.bcCalendarConfig.weekdayStyle[this.bcDayTitleFormat]:this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.dayTitleFormat],this.monthTitleFormat=this.bcMonthTitleFormat||this.bcCalendarConfig.monthTitleFormat,this.showMonthTitles="boolean"==typeof this.bcShowMonthTitles?this.bcShowMonthTitles:this.bcCalendarConfig.showMonthTitles,this.selectedDate=null,this.showWeekdays="boolean"==typeof this.bcShowWeekdays?this.bcShowWeekdays:this.bcCalendarConfig.showWeekdays,this.bcDayTemplate||this.bcCalendarConfig.userDayTemplate){var e="userDayTemplate.html";this.bcDayTemplate&&this.$templateCache.put(e,this.bcDayTemplate),this.bcCalendarConfig.userDayTemplate&&this.$templateCache.put(e,this.bcCalendarConfig.userDayTemplate),this.bcCalendarService.storeDayTemplate(e)}else this.bcCalendarService.storeDayTemplate(this.bcCalendarConfig.dayTemplate);this.dateFormat=this.bcDateFormat||this.bcCalendarConfig.dateFormat;var t=this.bcCalendarService.buildDays(this.days,this.startDate);this._buildCalendar(t,this.nestingDepth)}},{key:"isBeforeToday",value:function(e){return this.bcCalendarService.dateIsBeforeToday(e)}},{key:"isDayToday",value:function(e){return this.bcCalendarService.isDayToday(e,this.startDate)}},{key:"selectDate",value:function(e){this.selectedDate=e,e.date&&this.bcDateSelected&&this.bcDateSelected({date:e.date})}},{key:"formatDate",value:function(e,t){return!!e&&moment(e).format(t)}},{key:"_buildCalendar",value:function(e,t){"month"===t?this.bcCollection=this.bcCalendarService.organizeMonths(e):"week"===t?this.bcCollection=this.bcCalendarService.organizeWeeks(e):"day"===t&&(this.bcCollection=e)}}]),e}()},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html",n='<section class=bc-calendar> <span class=bc-calendar__weekdays data-ng-if="$ctrl.showWeekdays && $ctrl.nestingDepth === \'week\'"> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in $ctrl.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <bc-year data-ng-if="$ctrl.nestingDepth === \'year\'" class=bc-calendar__year-wrapper bc-collection=$ctrl.bcCollection></bc-year> <bc-month data-ng-if="$ctrl.nestingDepth === \'month\'" class=bc-calendar__month-wrapper bc-collection=$ctrl.bcCollection></bc-month> <bc-week data-ng-if="$ctrl.nestingDepth === \'week\'" class=bc-calendar__week-wrapper bc-collection=$ctrl.bcCollection></bc-week> <bc-day data-ng-if="$ctrl.nestingDepth === \'day\'" class=bc-calendar__day-wrapper bc-collection=$ctrl.bcCollection></bc-day> </section>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html",n='<div class=bc-calendar__year data-ng-repeat="year in vm.bcCollection track by $index"> <bc-month bc-collection=year bc-weeks-header=$ctrl.weekdaysHeader class=bc-calendar__month-wrapper></bc-month> </div>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html",n='<time class=bc-calendar__month datetime="{{ month[0][month[0].length - 1].date | date:\'yyyy-MM\' }}" data-ng-repeat="month in vm.bcCollection track by $index"> <span class=bc-calendar__month-title data-ng-bind="$ctrl.formatDate(month[0][month[0].length - 1].date, $ctrl.monthTitleFormat)" data-ng-if=$ctrl.showMonthTitles></span> <span class=bc-calendar__weekdays data-ng-if=$ctrl.showWeekdays> <span class="bc-calendar__day bc-calendar__day--weekdays" data-ng-repeat="day in $ctrl.weekdays track by $index"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </span> <bc-week bc-collection=month class=bc-calendar__week-wrapper></bc-week> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html",n='<time class=bc-calendar__week datetime="{{ week[week.length - 1].date | date:\'yyyy-ww\' }}" data-ng-repeat="week in vm.bcCollection track by $index"> <bc-day bc-collection=week class=bc-calendar__day-wrapper></bc-day> </time>';window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t){var a="/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html",n="<span class=bc-calendar__day data-ng-class=\"{ 'bc-calendar__day--disabled': $ctrl.isBeforeToday(day.date),\n                   'bc-calendar__day--today': $ctrl.isDayToday(day.date),\n                   'bc-calendar__day--even': $even,\n                   'bc-calendar__day--odd': $odd,\n                   'bc-calendar__day--pad': !day.date,\n                   'bc-calendar__day--valid': day.date,\n                   'bc-calendar__day--selected': day.date === $ctrl.selectedDate.date }\" data-ng-click=$ctrl.selectDate(day) data-ng-repeat=\"day in vm.bcCollection track by $index\" title=day.date> <ng-include src=vm.dayTemplate></ng-include> </span>";window.angular.module("ng").run(["$templateCache",function(e){e.put(a,n)}]),e.exports=a},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",scope:!0,bindToController:{bcCollection:"="},templateUrl:o["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcYearDirective=r;var c=a(7),o=n(c)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",scope:!0,bindToController:{bcCollection:"=",bcWeekdaysHeader:"="},templateUrl:o["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcMonthDirective=r;var c=a(8),o=n(c)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(){"ngInject";var e={restrict:"E",scope:!0,bindToController:{bcCollection:"="},templateUrl:o["default"],controller:function(){},controllerAs:"vm"};return e}Object.defineProperty(t,"__esModule",{value:!0}),t.bcWeekDirective=r;var c=a(9),o=n(c)},function(e,t,a){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){"ngInject";var t={restrict:"E",scope:!0,bindToController:{bcCollection:"="},templateUrl:o["default"],controller:["bcCalendarService",function(e){this.dayTemplate=e.getDayTemplate()}],controllerAs:"vm"};return t}r.$inject=["bcCalendarConfig"],Object.defineProperty(t,"__esModule",{value:!0}),t.bcDayDirective=r;var c=a(10),o=n(c)}])});
//# sourceMappingURL=data:application/json;base64,