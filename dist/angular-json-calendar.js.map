{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e1db687c3a2fe50d2787","webpack:///./src/index.js","webpack:///./src/index.js?1f39","webpack:///./src/calendar.provider.js","webpack:///./src/calendar.provider.js?b2f7","webpack:///./src/calendar.service.js","webpack:///./src/calendar.service.js?8728","webpack:///./src/calendar.directive.js","webpack:///./src/calendar.directive.js?d4aa","webpack:///./src/calendar.controller.js","webpack:///./src/calendar.controller.js?6b53","webpack:///./src/templates/calendar.html","webpack:///./src/templates/year.html","webpack:///./src/templates/month.html","webpack:///./src/templates/week.html","webpack:///./src/templates/day.html"],"names":[],"mappings":"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","file":"angular-json-calendar.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angular-json-calendar\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular-json-calendar\"] = factory();\n\telse\n\t\troot[\"angular-json-calendar\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e1db687c3a2fe50d2787\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _calendar = require('./calendar.provider');\n\nvar _calendar2 = require('./calendar.service');\n\nvar _calendar3 = require('./calendar.directive');\n\nexports.default = angular.module('bc.JsonCalendar', []).provider('bcCalendarConfig', _calendar.bcCalendarConfig).service('bcCalendarService', _calendar2.bcCalendarService).directive('bcCalendar', _calendar3.bcCalendarDirective);\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import { bcCalendarConfig } from './calendar.provider';\nimport { bcCalendarService } from './calendar.service';\nimport { bcCalendarDirective } from './calendar.directive';\n\nexport default angular.module('bc.JsonCalendar', [])\n    .provider('bcCalendarConfig', bcCalendarConfig)\n    .service('bcCalendarService', bcCalendarService)\n    .directive('bcCalendar', bcCalendarDirective)\n;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarConfig = exports.bcCalendarConfig = function () {\n\n    // Define defaults\n\n    function bcCalendarConfig() {\n        _classCallCheck(this, bcCalendarConfig);\n\n        // The calendar will begin with today\n        // TODO: Remove 'add'\n        this.startDate = moment(new Date().toISOString()).startOf('day').add(1, 'days');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n            abbreviation: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'],\n            word: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Satday']\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n    }\n\n    _createClass(bcCalendarConfig, [{\n        key: '$get',\n        value: function $get() {\n            return this;\n        }\n    }]);\n\n    return bcCalendarConfig;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.provider.js\n **/","export class bcCalendarConfig {\n\n    // Define defaults\n    constructor() {\n\n        // The calendar will begin with today\n        // TODO: Remove 'add'\n        this.startDate = moment(new Date().toISOString()).startOf('day').add(1, 'days');\n\n        // The default interval type [day|week|month]\n        this.nestingDepth = 'month';\n\n        // How many of the interval type should be generated\n        this.count = 1;\n\n        // Define the different possible representations of the weekday\n        this.weekdayStyle = {\n            letter: [\n                'S',\n                'M',\n                'T',\n                'W',\n                'T',\n                'F',\n                'S',\n            ],\n            abbreviation: [\n                'Sun',\n                'Mon',\n                'Tue',\n                'Wed',\n                'Thur',\n                'Fri',\n                'Sat',\n            ],\n            word: [\n                'Sunday',\n                'Monday',\n                'Tuesday',\n                'Wednesday',\n                'Thursday',\n                'Friday',\n                'Satday',\n            ],\n        };\n\n        // Set the default word type (M vs Mon vs Monday)\n        this.weekTitleFormat = 'abbreviation';\n\n        // Should days be organized by week?\n        this.organizeWeeks = true;\n\n    }\n\n\n\n\n    $get() {\n        return this;\n    }\n\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.provider.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar bcCalendarService = exports.bcCalendarService = function () {\n  function bcCalendarService() {\n    'ngInject';\n\n    _classCallCheck(this, bcCalendarService);\n  }\n\n  /**\n   * Test if days match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n  /*\n   *    daysMatch(date1, date2) {\n   *\n   *        let match = false;\n   *        const day1 = moment(date1).date();\n   *        const day2 = moment(date2).date();\n   *\n   *        if (day1 === day2) {\n   *            match = true;\n   *        }\n   *\n   *        return match;\n   *\n   *    }\n   */\n\n  /**\n   * Test if months match\n   *\n   * @param {Date} date1\n   * @param {Date} date2\n   * @return {Bool} match\n   */\n\n\n  _createClass(bcCalendarService, [{\n    key: 'doMonthsMatch',\n    value: function doMonthsMatch(date1, date2) {\n      var match = false;\n      var month1 = moment(date1).month();\n      var month2 = moment(date2).month();\n\n      if (month1 === month2) {\n        match = true;\n      }\n\n      return match;\n    }\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'getDaysInMonth',\n    value: function getDaysInMonth(month, year) {\n\n      var date = new Date(year, month, 1);\n      var days = [];\n\n      while (date.getMonth() === month) {\n        days.push(moment(date).hour(0).minute(0).second(0).format());\n        date.setDate(date.getDate() + 1);\n      }\n\n      return days;\n    }\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n\n  }, {\n    key: 'createDaysArray',\n    value: function createDaysArray(count) {\n\n      var i = void 0;\n      var days = [];\n\n      for (i = 0; i < count; i += 1) {\n        days.push(i);\n      }\n\n      return days;\n    }\n  }]);\n\n  return bcCalendarService;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.service.js\n **/","export class bcCalendarService {\n\n    constructor(\n    ) {\n        'ngInject';\n\n    }\n\n\n\n\n    /**\n     * Test if days match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    /*\n     *    daysMatch(date1, date2) {\n     *\n     *        let match = false;\n     *        const day1 = moment(date1).date();\n     *        const day2 = moment(date2).date();\n     *\n     *        if (day1 === day2) {\n     *            match = true;\n     *        }\n     *\n     *        return match;\n     *\n     *    }\n     */\n\n\n    /**\n     * Test if months match\n     *\n     * @param {Date} date1\n     * @param {Date} date2\n     * @return {Bool} match\n     */\n    doMonthsMatch(date1, date2) {\n        let match = false;\n        const month1 = moment(date1).month();\n        const month2 = moment(date2).month();\n\n        if (month1 === month2) {\n            match = true;\n        }\n\n        return match;\n\n    }\n\n\n    /**\n     * Test if day is today\n     *\n     * @param {Date} date - The date to check\n     * @param {Date} today - The day to check against\n     * @return {Bool} isToday\n     */\n    /*\n     *    isToday(date, today) {\n     *\n     *        today = moment(today).startOf('day');\n     *\n     *        const dayToTest = moment(date).startOf('day');\n     *        const isToday = today.diff(dayToTest) ? false : true;\n     *\n     *        return isToday;\n     *\n     *    }\n     */\n\n\n    /**\n     * Update the date with the current time\n     *\n     * @param {Date} date\n     * @return {Date} updatedDate\n     */\n    /*\n     *    updateTime(date) {\n     *\n     *        let updatedDate;\n     *\n     *        // Get the current date\n     *        const jsDate = new Date().toISOString();\n     *        const currentHour = moment(jsDate).hour();\n     *        const currentMinutes = moment(jsDate).minutes();\n     *\n     *        // Zero out seconds and milliseconds\n     *        updatedDate = moment(date).set({\n     *            hour: currentHour,\n     *            minutes: currentMinutes,\n     *            second: 0,\n     *            millisecond: 0,\n     *        }).format();\n     *\n     *        return updatedDate;\n     *\n     *    }\n     */\n\n\n\n\n\n\n\n\n\n\n    /**\n     * Return an array of days for the passed in month\n     *\n     * @param {Integer} month\n     * @param {Integer} year\n     * @return {Array} days\n     */\n    getDaysInMonth(month, year) {\n\n        const date = new Date(year, month, 1);\n        const days = [];\n\n        while (date.getMonth() === month) {\n            days.push(moment(date).hour(0).minute(0).second(0).format());\n            date.setDate(date.getDate() + 1);\n        }\n\n        return days;\n\n    }\n\n\n    /**\n     * Turn a count (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    createDaysArray(count) {\n\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.service.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.bcCalendarDirective = bcCalendarDirective;\n\nvar _calendar = require('./calendar.controller');\n\nvar _calendar2 = require('./templates/calendar.html');\n\nvar _calendar3 = _interopRequireDefault(_calendar2);\n\nvar _year = require('./templates/year.html');\n\nvar _year2 = _interopRequireDefault(_year);\n\nvar _month = require('./templates/month.html');\n\nvar _month2 = _interopRequireDefault(_month);\n\nvar _week = require('./templates/week.html');\n\nvar _week2 = _interopRequireDefault(_week);\n\nvar _day = require('./templates/day.html');\n\nvar _day2 = _interopRequireDefault(_day);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction bcCalendarDirective($compile) {\n    'ngInject';\n\n    // Define possible templates\n\n    var templates = {\n        year: _year2.default,\n        month: _month2.default,\n        week: _week2.default,\n        day: _day2.default\n    };\n\n    var directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [year|month|week|day] - defaults: month\n            bcCount: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?' },\n        // string [word|abbreviation|letter] - default: abbreviation\n        link: linkFunction,\n        templateUrl: _calendar3.default,\n        controller: _calendar.CalendarController,\n        controllerAs: 'vm'\n    };\n\n    return directive;\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('depth: ', vm.nestingDepth, templates[vm.nestingDepth]);\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = function () {\n            return templates[vm.nestingDepth];\n        };\n\n        // collection\n        var month = [\n        // month\n        {\n            type: 'months',\n            children: [\n            // week\n            {\n                type: 'weeks',\n                children: [{\n                    type: 'days',\n                    children: ['day', 'day']\n                }]\n            }]\n        }];\n\n        // collection\n        var week = [\n        // week\n        {\n            type: 'weeks',\n            children: [{\n                type: 'days',\n                children: ['day', 'day']\n            }]\n        }];\n\n        // collection\n        var day = [{\n            type: 'days',\n            children: ['day', 'day']\n        }];\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.directive.js\n **/","import { CalendarController } from './calendar.controller';\nimport calendarTemplate from './templates/calendar.html';\nimport yearTemplate from './templates/year.html';\nimport monthTemplate from './templates/month.html';\nimport weekTemplate from './templates/week.html';\nimport dayTemplate from './templates/day.html';\n\n\nexport function bcCalendarDirective(\n    $compile\n) {\n    'ngInject';\n\n    // Define possible templates\n    const templates = {\n        year: yearTemplate,\n        month: monthTemplate,\n        week: weekTemplate,\n        day: dayTemplate,\n    };\n\n    const directive = {\n        restrict: 'E',\n        replace: true,\n        scope: {},\n        bindToController: {\n            bcStartDate: '@?', // date - default to today\n            bcNestingDepth: '@?', // string [year|month|week|day] - defaults: month\n            bcCount: '@?', // integer - default to 1\n            bcWeekTitleFormat: '@?', // string [word|abbreviation|letter] - default: abbreviation\n        },\n        link: linkFunction,\n        templateUrl: calendarTemplate,\n        controller: CalendarController,\n        controllerAs: 'vm',\n    };\n\n    return directive;\n\n\n\n\n    /**\n     * Link\n     */\n    function linkFunction($scope, $element, $attrs, vm) {\n        console.log('depth: ', vm.nestingDepth, templates[vm.nestingDepth]);\n\n        // Set the correct template based on the desired nesting depth\n        vm.getTemplateUrl = () => {\n            return templates[vm.nestingDepth];\n        };\n\n\n\n\n        // collection\n        const month = [\n            // month\n            {\n                type: 'months',\n                children: [\n                    // week\n                    {\n                        type: 'weeks',\n                        children: [\n                            {\n                                type: 'days',\n                                children: [\n                                    'day',\n                                    'day',\n                                ],\n                            },\n                        ],\n                    },\n                ],\n            },\n        ];\n\n        // collection\n        const week = [\n            // week\n            {\n                type: 'weeks',\n                children: [\n                    {\n                        type: 'days',\n                        children: [\n                            'day',\n                            'day',\n                        ],\n                    },\n                ],\n            },\n        ];\n\n        // collection\n        const day = [\n            {\n                type: 'days',\n                children: [\n                    'day',\n                    'day',\n                ],\n            },\n        ];\n    }\n\n\n\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.directive.js\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CalendarController = exports.CalendarController = function () {\n    function CalendarController(bcCalendarConfig, bcCalendarService) {\n        'ngInject';\n\n        _classCallCheck(this, CalendarController);\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n        this._activate();\n    }\n\n    _createClass(CalendarController, [{\n        key: '_activate',\n        value: function _activate() {\n            // Define today's date\n            this.today = this.bcCalendarConfig.startDate;\n\n            // DEFAULTS\n            this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n            this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n            this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n            this.weekdays = this.bcWeekTitleFormat ? this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] : this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n\n            // Define the calendar duration (or length)\n            this.calendarDuration = moment.duration(this.count, this.bcCalendarConfig.interval);\n\n            // Get the full count of days\n            this.calendarDays = this.calendarDuration.asDays();\n\n            // Get the current day of the month\n            this.todayDayOfMonth = moment(this.startDate).date();\n\n            // Get the current weekday\n            this.todayDayOfWeek = moment(this.startDate).day();\n\n            // Initially nothing is selected\n            this.selectedDate = null;\n\n            /*\n             *const needed = 30;\n             *console.log('testl: ', this._buildDays(needed, new Date().toISOString()).length);\n             */\n\n            var JS_DATE = {\n                year: 2016,\n                month: 0,\n                day: 5\n            };\n\n            var needed = 100;\n            var tempDays = this._buildDays(needed, new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n            console.log('tempDays: ', tempDays);\n\n            this.calendar = this._organizeMonths(tempDays);\n\n            /*\n             *console.log('tempMonths: ', tempMonths);\n             */\n\n            // Build the calendar JSON\n            /*\n             *this.calendar = this.build(this.startDate, 2);\n             */\n        }\n\n        /**\n         * Build calendar\n         * TODO: Should this be a service?\n         * TODO: Abstract this out so I can better build the needed collection. Abstract out each part,\n         * building days, organizing weeks/months/years\n         *\n         * @param {String} start\n         * @param {Integer} duration\n         * @return {Array} collection\n         */\n\n    }, {\n        key: 'build',\n        value: function build(start, duration) {\n            var collection = [];\n            var monthsBuilt = -1;\n\n            // Loop to create months\n            while (monthsBuilt < duration) {\n                // Increment counter\n                monthsBuilt = monthsBuilt + 1;\n\n                // If not the first month generated, the start of the month should be at the beginning\n                // rather than the start date\n                if (monthsBuilt !== 0) {\n                    start = moment(start).startOf('month');\n                }\n\n                var days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n                // If this is the FIRST month\n                if (monthsBuilt === 0) {\n                    // Create the missing days for the padding\n                    var missingDays = this._padDaysLeft(days, this.todayDayOfWeek);\n\n                    // Add to the BEGINNING of our existing array\n                    days = missingDays.concat(days);\n                }\n\n                // If this is the LAST month\n                if (monthsBuilt === duration) {\n                    // Create the missing days for the padding\n                    var _missingDays = this._padWeekRight(days, days[days.length - 1]);\n\n                    // Add to the END of our existing array\n                    Array.prototype.push.apply(days, _missingDays);\n                }\n\n                // Add month to collection\n                collection.push(days);\n            }\n\n            if (this.organizeWeeks) {\n                collection = this._organizeWeeks(collection);\n            }\n\n            console.log('collection: ', collection);\n\n            return collection;\n        }\n\n        /**\n         * Check to see if the day is prior to the current date\n         * This is used to disable the unselectable days\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isBeforeToday',\n        value: function isBeforeToday(date) {\n            return moment(date).isBefore(this.startDate);\n        }\n\n        /**\n         * Check to see if the day matches the current date\n         *\n         * @param {Date} day\n         * @return {Bool}\n         */\n\n    }, {\n        key: 'isDayToday',\n        value: function isDayToday(date) {\n            return moment(date).isSame(this.startDate);\n        }\n    }, {\n        key: 'isDaySelected',\n        value: function isDaySelected() {}\n    }, {\n        key: 'selectDate',\n        value: function selectDate() {}\n    }, {\n        key: '_buildDays',\n        value: function _buildDays(limit, start) {\n            var counter = 0;\n            var days = [];\n            var day = void 0;\n\n            while (counter < limit) {\n                // Create the day\n                day = moment(start).add(counter, 'days').toISOString();\n\n                // Add to the array\n                days.push(day);\n\n                // Increment our counter\n                counter = counter + 1;\n            }\n\n            /*\n             *console.warn('build days: ', limit, start, days);\n             */\n\n            return days;\n        }\n\n        /**\n         * Return an array of dates for the passed in month\n         *\n         * @param {Date} startDate\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_getDaysInMonth',\n        value: function _getDaysInMonth(startDate) {\n            var firstDate = moment(startDate);\n            var days = [];\n            var date = moment(startDate);\n\n            // As long as the month hasn't changed\n            while (moment(date).isSame(firstDate, 'month')) {\n                // Add the new day to our array\n                days.push(moment(date).startOf('day').format());\n\n                // Increment the date by one day\n                date = moment(date).add(1, 'days');\n            }\n\n            return days;\n        }\n\n        /**\n         * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n         *\n         * @param {Integer} count\n         * @return {Array} days\n         */\n\n    }, {\n        key: '_integerToArray',\n        value: function _integerToArray(count) {\n            var i = void 0;\n            var days = [];\n\n            for (i = 0; i < count; i += 1) {\n                days.push(i);\n            }\n\n            return days;\n        }\n\n        // Since we are organizing months, we backfill the first month\n\n    }, {\n        key: '_organizeMonths',\n        value: function _organizeMonths(allDays) {\n            var collection = allDays;\n            var firstDate = void 0;\n            var month = void 0;\n            var dayOfMonth = moment(collection[0]).date();\n            var daysInMonth = moment(collection[0]).daysInMonth();\n            var calendar = [];\n\n            // Pad the beginning of the month with any missing days\n            // If the first day is not the first day of the month\n            if (moment(collection[0]).date() > 0) {\n\n                // Pull this month's days from the collection\n                month = collection.slice(0, daysInMonth - (dayOfMonth - 1));\n\n                // Fill the missing days\n                var pad = this._padDaysLeft(month[0], dayOfMonth - 1);\n\n                // Combine with the existing array\n                collection = pad.concat(collection);\n            }\n\n            // Split into months\n            // As long as there are days left in the collection\n            while (collection.length > 0) {\n                // Get the day of the month for the first date of the collection eg. '24'\n                dayOfMonth = moment(moment(collection[0])).date();\n\n                // Determine how many days there are this month (total)\n                daysInMonth = moment(collection[0]).daysInMonth();\n\n                // Pull this month's days from the collection\n                month = collection.splice(0, daysInMonth - (dayOfMonth - 1));\n\n                // Add to the calendar array\n                calendar.push(month);\n            }\n\n            console.info('RETURNING: ', calendar);\n            return calendar;\n        }\n\n        /**\n         * Organize collection of days into sub collections of weeks\n         *\n         * @param {Array} collection\n         * @return {Array} collection\n         */\n\n    }, {\n        key: '_organizeWeeks',\n        value: function _organizeWeeks(collection) {\n            var _this = this;\n\n            var weekLength = 7;\n\n            collection.forEach(function (value, index) {\n                collection[index] = _this._chunk(value, weekLength);\n            });\n\n            return collection;\n        }\n\n        /**\n         * Split an array into chunks and return an array of these chunks\n         *\n         * @param {Array} group\n         * @param {Integer} groupsize\n         * @return {Array} chunks\n         */\n\n    }, {\n        key: '_chunk',\n        value: function _chunk(group, groupsize) {\n            var sets = [];\n            var i = 0;\n            var chunks = group.length / parseInt(groupsize, 10);\n\n            while (i < chunks) {\n                sets[i] = group.splice(0, groupsize);\n                i = i + 1;\n            }\n\n            return sets;\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {String} startDate - date to to work back from\n         * @param {Array} count - how many days to pad\n         * @return {Array} pad\n         */\n\n    }, {\n        key: '_padDaysLeft',\n        value: function _padDaysLeft(startDate, count) {\n            var pad = [];\n            var missingDays = this._integerToArray(count);\n\n            // Loop through missing days\n            for (var day in missingDays) {\n                // How many days to go back\n                var subtraction = parseInt(day, 10) + 1;\n\n                // Find that day\n                var previous = moment(startDate).subtract(subtraction, 'days').toISOString();\n\n                // Add to the beginning of the array\n                pad.unshift(previous);\n            }\n\n            return pad;\n        }\n\n        /**\n         * Pad the beginning of a week\n         *\n         * @param {Array} days\n         * @return {Array} pad\n         */\n\n    }, {\n        key: '_padWeekRight',\n        value: function _padWeekRight(days, startDay) {\n            var week = 7;\n            var dayOfWeek = moment(startDay).day();\n\n            // weekdays are zero based\n            var neededDays = week - (dayOfWeek + 1);\n\n            return this._integerToArray(neededDays);\n        }\n    }]);\n\n    return CalendarController;\n}();\n\n\n/** WEBPACK FOOTER **\n ** ./src/calendar.controller.js\n **/","export class CalendarController {\n\n    constructor(\n        bcCalendarConfig, bcCalendarService\n    ) {\n        'ngInject';\n\n        this.bcCalendarConfig = bcCalendarConfig;\n        this.bcCalendarService = bcCalendarService;\n\n\n        this._activate();\n\n    }\n\n\n\n\n    _activate() {\n        // Define today's date\n        this.today = this.bcCalendarConfig.startDate;\n\n        // DEFAULTS\n        this.startDate = this.startDate || this.bcCalendarConfig.startDate;\n        this.count = parseInt(this.bcCount || this.bcCalendarConfig.count, 10);\n        this.nestingDepth = this.bcNestingDepth || this.bcCalendarConfig.nestingDepth;\n        this.weekdays = this.bcWeekTitleFormat ?\n            this.bcCalendarConfig.weekdayStyle[this.bcWeekTitleFormat] :\n            this.bcCalendarConfig.weekdayStyle[this.bcCalendarConfig.weekTitleFormat];\n\n        // Define the calendar duration (or length)\n        this.calendarDuration =\n            moment.duration(this.count, this.bcCalendarConfig.interval);\n\n        // Get the full count of days\n        this.calendarDays = this.calendarDuration.asDays();\n\n\n        // Get the current day of the month\n        this.todayDayOfMonth = moment(this.startDate).date();\n\n        // Get the current weekday\n        this.todayDayOfWeek = moment(this.startDate).day();\n\n        // Initially nothing is selected\n        this.selectedDate = null;\n\n        /*\n         *const needed = 30;\n         *console.log('testl: ', this._buildDays(needed, new Date().toISOString()).length);\n         */\n\n        const JS_DATE = {\n            year: 2016,\n            month: 0,\n            day: 5,\n        };\n\n        const needed = 100;\n        const tempDays = this._buildDays(needed,\n            new Date(JS_DATE.year, JS_DATE.month, JS_DATE.day).toISOString());\n\n        console.log('tempDays: ', tempDays);\n\n        this.calendar = this._organizeMonths(tempDays);\n\n        /*\n         *console.log('tempMonths: ', tempMonths);\n         */\n\n        // Build the calendar JSON\n        /*\n         *this.calendar = this.build(this.startDate, 2);\n         */\n\n    }\n\n\n    /**\n     * Build calendar\n     * TODO: Should this be a service?\n     * TODO: Abstract this out so I can better build the needed collection. Abstract out each part,\n     * building days, organizing weeks/months/years\n     *\n     * @param {String} start\n     * @param {Integer} duration\n     * @return {Array} collection\n     */\n    build(start, duration) {\n        let collection = [];\n        let monthsBuilt = -1;\n\n        // Loop to create months\n        while (monthsBuilt < duration) {\n            // Increment counter\n            monthsBuilt = monthsBuilt + 1;\n\n            // If not the first month generated, the start of the month should be at the beginning\n            // rather than the start date\n            if (monthsBuilt !== 0) {\n                start = moment(start).startOf('month');\n            }\n\n            let days = this._getDaysInMonth(moment(start).add(monthsBuilt, 'months'));\n\n            // If this is the FIRST month\n            if (monthsBuilt === 0) {\n                // Create the missing days for the padding\n                const missingDays = this._padDaysLeft(days, this.todayDayOfWeek);\n\n                // Add to the BEGINNING of our existing array\n                days = missingDays.concat(days);\n            }\n\n            // If this is the LAST month\n            if (monthsBuilt === duration) {\n                // Create the missing days for the padding\n                const missingDays = this._padWeekRight(days, days[days.length - 1]);\n\n                // Add to the END of our existing array\n                Array.prototype.push.apply(days, missingDays)\n            }\n\n            // Add month to collection\n            collection.push(days);\n        }\n\n        if (this.organizeWeeks) {\n            collection = this._organizeWeeks(collection);\n        }\n\n        console.log('collection: ', collection);\n\n        return collection;\n    }\n\n\n    /**\n     * Check to see if the day is prior to the current date\n     * This is used to disable the unselectable days\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isBeforeToday(date) {\n        return moment(date).isBefore(this.startDate);\n    }\n\n\n    /**\n     * Check to see if the day matches the current date\n     *\n     * @param {Date} day\n     * @return {Bool}\n     */\n    isDayToday(date) {\n        return moment(date).isSame(this.startDate);\n    }\n\n\n    isDaySelected() {\n    }\n\n\n    selectDate() {\n    }\n\n\n    _buildDays(limit, start) {\n        let counter = 0;\n        const days = [];\n        let day;\n\n        while (counter < limit) {\n            // Create the day\n            day = moment(start).add(counter, 'days').toISOString();\n\n            // Add to the array\n            days.push(day);\n\n            // Increment our counter\n            counter = counter + 1;\n        }\n\n        /*\n         *console.warn('build days: ', limit, start, days);\n         */\n\n        return days;\n    }\n\n\n    /**\n     * Return an array of dates for the passed in month\n     *\n     * @param {Date} startDate\n     * @return {Array} days\n     */\n    _getDaysInMonth(startDate) {\n        const firstDate = moment(startDate);\n        const days = [];\n        let date = moment(startDate);\n\n        // As long as the month hasn't changed\n        while (moment(date).isSame(firstDate, 'month')) {\n            // Add the new day to our array\n            days.push(moment(date).startOf('day').format());\n\n            // Increment the date by one day\n            date = moment(date).add(1, 'days');\n        }\n\n        return days;\n    }\n\n\n    /**\n     * Turn a integer (e.g. '6') into an array: '[1,2,3,4,5,6]'\n     *\n     * @param {Integer} count\n     * @return {Array} days\n     */\n    _integerToArray(count) {\n        let i;\n        const days = [];\n\n        for (i = 0; i < count; i += 1) {\n            days.push(i);\n        }\n\n        return days;\n    }\n\n\n    // Since we are organizing months, we backfill the first month\n    _organizeMonths(allDays) {\n        let collection = allDays;\n        let firstDate;\n        let month;\n        let dayOfMonth = moment(collection[0]).date();\n        let daysInMonth = moment(collection[0]).daysInMonth();\n        const calendar = [];\n\n        // Pad the beginning of the month with any missing days\n        // If the first day is not the first day of the month\n        if (moment(collection[0]).date() > 0) {\n\n            // Pull this month's days from the collection\n            month = collection.slice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // Fill the missing days\n            const pad = this._padDaysLeft(month[0], (dayOfMonth - 1));\n\n            // Combine with the existing array\n            collection = pad.concat(collection);\n        }\n\n        // Split into months\n        // As long as there are days left in the collection\n        while (collection.length > 0) {\n            // Get the day of the month for the first date of the collection eg. '24'\n            dayOfMonth = moment(moment(collection[0])).date();\n\n            // Determine how many days there are this month (total)\n            daysInMonth = moment(collection[0]).daysInMonth();\n\n            // Pull this month's days from the collection\n            month = collection.splice(0, (daysInMonth - (dayOfMonth - 1)));\n\n            // Add to the calendar array\n            calendar.push(month);\n        }\n\n        console.info('RETURNING: ', calendar);\n        return calendar;\n\n    }\n\n\n    /**\n     * Organize collection of days into sub collections of weeks\n     *\n     * @param {Array} collection\n     * @return {Array} collection\n     */\n    _organizeWeeks(collection) {\n        const weekLength = 7;\n\n        collection.forEach((value, index) => {\n            collection[index] = this._chunk(value, weekLength);\n        });\n\n        return collection;\n    }\n\n\n    /**\n     * Split an array into chunks and return an array of these chunks\n     *\n     * @param {Array} group\n     * @param {Integer} groupsize\n     * @return {Array} chunks\n     */\n    _chunk(group, groupsize) {\n        const sets = [];\n        let i = 0;\n        const chunks = group.length / parseInt(groupsize, 10);\n\n        while(i < chunks) {\n            sets[i] = group.splice(0, groupsize);\n            i = i + 1;\n        }\n\n        return sets;\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {String} startDate - date to to work back from\n     * @param {Array} count - how many days to pad\n     * @return {Array} pad\n     */\n    _padDaysLeft(startDate, count) {\n        const pad = [];\n        const missingDays = this._integerToArray(count);\n\n        // Loop through missing days\n        for (const day in missingDays) {\n            // How many days to go back\n            const subtraction = parseInt(day, 10) + 1;\n\n            // Find that day\n            const previous = moment(startDate).subtract((subtraction), 'days').toISOString();\n\n            // Add to the beginning of the array\n            pad.unshift(previous);\n        }\n\n        return pad;\n    }\n\n\n    /**\n     * Pad the beginning of a week\n     *\n     * @param {Array} days\n     * @return {Array} pad\n     */\n    _padWeekRight(days, startDay) {\n        const week = 7;\n        const dayOfWeek = moment(startDay).day();\n\n        // weekdays are zero based\n        const neededDays = week - (dayOfWeek + 1);\n\n        return this._integerToArray(neededDays);\n    }\n\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/eslint-loader!./src/calendar.controller.js\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/calendar.html';\nvar html = \"<section class=bc-calendar> <header class=bc-calendar__header> <span class=\\\"bc-calendar__day bc-calendar__day--header\\\" data-ng-repeat=\\\"day in vm.weekdays track by $index\\\"> <strong class=bc-calendar__day-title> {{ day }} </strong> </span> </header> <div ng-include=vm.getTemplateUrl()></div> </section>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/calendar.html\n ** module id = 5\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/year.html';\nvar html = \"<div class=bc-calendar__year data-ng-repeat=\\\"year in vm.calendar track by $index\\\"> <div class=bc-calendar__month data-ng-repeat=\\\"month in year track by $index\\\"> <div class=bc-calendar__week data-ng-repeat=\\\"week in month track by $index\\\"> <span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day),\\n                         'bc-calendar__day--today': vm.isDayToday(day),\\n                         'bc-calendar__day--even': $even }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in week track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day) }\\\" datetime=\\\"{{ day | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day }}\\\" data-ng-if=\\\"day.length > 2\\\"> {{ day | date:'MM/dd/yy' }} <small> {{ day | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=\\\"day.length < 3\\\"></span> </span> </div> </div> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/year.html\n ** module id = 6\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/month.html';\nvar html = \"<div class=bc-calendar__month data-ng-repeat=\\\"month in vm.calendar track by $index\\\"> <div class=bc-calendar__week data-ng-repeat=\\\"week in month track by $index\\\"> <span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day),\\n                       'bc-calendar__day--today': vm.isDayToday(day),\\n                       'bc-calendar__day--even': $even }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in week track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day) }\\\" datetime=\\\"{{ day | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day }}\\\" data-ng-if=\\\"day.length > 2\\\"> {{ day | date:'MM/dd/yy' }} <small> {{ day | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=\\\"day.length < 3\\\"></span> </span> </div> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/month.html\n ** module id = 7\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/week.html';\nvar html = \"<div class=bc-calendar__week data-ng-repeat=\\\"week in vm.calendar track by $index\\\"> <span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(day),\\n                     'bc-calendar__day--today': vm.isDayToday(day),\\n                     'bc-calendar__day--even': $even }\\\" data-ng-click=vm.selectDate(day) data-ng-repeat=\\\"day in week track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(day) }\\\" datetime=\\\"{{ day | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ day }}\\\" data-ng-if=\\\"day.length > 2\\\"> {{ day | date:'MM/dd/yy' }} <small> {{ day | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=\\\"day.length < 3\\\"></span> </span> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/week.html\n ** module id = 8\n ** module chunks = 0 1\n **/","var path = '/Users/bc/Code/open-source/angular-json-calendar/src/templates/day.html';\nvar html = \"<span class=bc-calendar__day data-ng-class=\\\"{ 'bc-calendar__day--disabled': vm.isBeforeToday(item),\\n                   'bc-calendar__day--today': vm.isDayToday(item),\\n                   'bc-calendar__day--even': $even }\\\" data-ng-click=vm.selectDate(item) data-ng-repeat=\\\"item in vm.calendar track by $index\\\"> <time class=bc-calendar__day-time data-ng-class=\\\"{ 'bc-calendar__time--selected': vm.isDaySelected(item) }\\\" datetime=\\\"{{ item | date:'MMMM Do, YYYY' }}\\\" title=\\\"{{ item }}\\\" data-ng-if=\\\"item.length > 2\\\"> {{ item | date:'MM/dd/yy' }} <small> {{ item | date:'EEE' }} </small> </time> <span class=bc-calendar__day-time data-ng-if=\\\"item.length < 3\\\"></span> </span>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/templates/day.html\n ** module id = 9\n ** module chunks = 0 1\n **/"],"sourceRoot":""}